var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Shotgrid integration for AYON","text":"<p>This project provides three elements for the AYON pipeline:</p> <ul> <li>server/ - The AYON Backend Addon.</li> <li>frontend/ - The AYON server Shotgrid settings tab.</li> <li>client/ - The AYON desktop integration.</li> <li>services/ - Standalone dockerized daemons that act based on events (aka <code>leecher</code> and <code>processors</code>).</li> </ul> <p>In order to use this integration, you'll need to run the <code>python create_package.py</code> script, which will create a <code>zip</code> file with the current version (the number is defined in <code>package.py</code>) in <code>ayon-shotgrid/package/shotgrid-{addon version}.zip</code>. You can then upload this zip file in your AYON instance, on the Bundles (<code>/settings/bundles</code>) section. Make sure you restart the server. AYON should prompt you to do so after uploading.</p>"},{"location":"index.html#server","title":"Server","text":"<p>Once the instance has restarted, you should be able to enable the addon by going into the <code>Settings &gt; Bundles</code> and creating (or duplicating an existing) bundle, where you can now choose <code>shotgrid</code> and the <code>version</code> you installed. Make sure you set the bundle as <code>Production</code>. If the addon loaded successfully, you should be able to see a new tab in your <code>Settings &gt; Shotgrid</code>.</p> <p>For the Shotgrid integration to work, we need to provide several pieces of information. Firstly, we\u2019ll need a Shotgrid Script and its API key. Refer to the Shotgrid Documentation to create one; take note of the information and in AYON, navigate to the <code>Settings &gt; Secrets</code> page. Create a new secret with the <code>script_name</code> as the \"Secret Name\" and the <code>script_api_key</code> as the \"Secret Value\".</p> <p>We can now go into the <code>Settings &gt; Studio settings &gt; Shotgrid</code> page in AYON and fill in the following fields: * Shotgrid URL - This will be the URL to your Shotgrid instance. * Shotgrid API Secret - Select the secret you created in the previous step. * Shotgrid field for the Project Code - A field in the <code>Project</code> entity that holds the project code. It can be an existing one or a new one. The default is <code>code</code>. * Service Settings &gt; How often (in seconds) to query the Shotgrid Database  - Defaults to 10 seconds, the time between <code>leeching</code>, <code>processing</code>, and <code>transmitting</code> operations.</p>"},{"location":"index.html#desktop-application","title":"Desktop application","text":"<p>When launching AYON for the first time, you'll be asked to provide a login (only the username) for Shotgrid. This is the user that will be used for publishing. After providing a login, people can publish normally. The integration will ensure that the user can connect to Shotgrid, has the correct permissions, and will create the Version and PublishedFile in Shotgrid if the publish is successful.</p>"},{"location":"index.html#services","title":"Services","text":"<p>The services are a way to handle operations between AYON and Shotgrid in the background. These have been developed around the AYON Events system. We replicate Shotgrid events (the ones we care about) as AYON <code>shotgrid.event</code>, which then the <code>processor</code> will pick up and process them accordingly. Lastly, the <code>transmitter</code> will look for changes in AYON and attempt to replicate them in Shotgrid. In any case, the Shotgrid project has to have the field \"Ayon Auto Sync\" enabled for the <code>leecher</code> and the <code>transmitter</code> to work. They share code, which is found in <code>shotgrid_common</code>. Most importantly, the <code>AyonShotgridHub</code> is a class that bootstraps common actions when working with AYON and Shotgrid.</p> <p>The three provided services are:</p> <ul> <li><code>processor</code> - This has a set of handlers for different <code>shotgrid.event</code> and acts on them.</li> <li><code>leecher</code> - Periodically queries the <code>EventLogEntry</code> table on Shotgrid and ingests any event that interests us, dispatching it as a <code>shotgrid.event</code>. This will only query projects that have the \"Ayon Auto Sync\" field enabled.</li> <li><code>transmitter</code> - Periodically checks for new events in AYON of topic <code>entity.*</code> and pushes any changes to Shotgrid, only affecting projects that have the \"Ayon Auto Sync\" field enabled.</li> </ul> <p>The most straightforward way to get this up and running is by using ASH (AYON Service Host). After loading the Addon on the server, you should be able to spawn services in the \"Services\" page.</p>"},{"location":"index.html#development","title":"Development","text":"<p>There's a single <code>Makefile</code> at the root of the <code>services</code> folder, which is used to <code>build</code> the Docker images and to run the services locally with the <code>dev</code> target. This is UNIX only for the time being. Running <code>make</code> without arguments will print information as to how to run and use it.</p>"},{"location":"index.html#building-docker-images","title":"Building Docker Images","text":"<p>To build the Docker images, you can run <code>make SERVICE=&lt;service-name&gt; build</code>. So, for example, to build the <code>processor</code>, you'd do <code>make SERVICE=processor build</code>. This will build and tag the local image, with the version found in <code>package.py</code> at the root of the addon.</p>"},{"location":"index.html#running-the-service-locally","title":"Running the Service locally","text":"<p>In order to run the service locally, we need to specify certain environment variables. To do so, copy the <code>sample_env</code> file, rename it to <code>.env</code>, and fill the fields accordingly:</p> <pre><code>AYON_API_KEY=&lt;AYON_API_KEY&gt; # You can create a `service` user in AYON, and then get the Key from there.\nAYON_SERVER_URL=&lt;YOUR_AYON_URL&gt;\nPYTHONDONTWRITEBYTECODE=1\n</code></pre> <p>We are ready to spin up the service. For convenience, we got a <code>make</code> target for this:</p> <pre><code>make SERVICE=&lt;service-name&gt; dev\n</code></pre> <p>You should now see something similar to:</p> <pre><code>INFO       Initializing the Shotgrid Processor.\nDEBUG      Found these handlers: {'create-project': [&lt;module 'project_sync'&gt;], 'sync-from-shotgrid': [&lt;module 'sync_from_shotgrid'&gt;], 'shotgrid-event': [&lt;module 'update_from_shotgrid'&gt;]}\nINFO       Start enrolling for AYON `shotgrid.event` Events...\nINFO       Querying for new `shotgrid.event` events...\nINFO       No event of origin `shotgrid.event` is pending.\n</code></pre>"},{"location":"index.html#makefile-commands","title":"Makefile commands","text":"<p>For those who cannot use <code>Makefiles</code>, here are the commands that are required to perform the same action as with <code>make</code>, using the <code>processor</code> version <code>0.2.</code> as an example, from the <code>services</code> folder:</p> <p>Building the Docker image:</p> <p>```sh  docker build -t ynput/ayon-shotgrid-processor:0.2.1 -f processor/Dockerfile .</p> <pre><code>\nRunning a service locally:\n\n```sh\ndocker run --rm -u ayonuser -ti \\\n  -v services/shotgrid_common:services/shotgrid_common:Z \\\n  -v services/processor:/service:Z \\\n  --env-file services/processor/.env \\\n  --env AYON_ADDON_NAME=shotgrid \\\n  --env AYON_ADDON_VERSION=0.2.1 \\\n  --attach=stdin \\\n  --attach=stdout \\\n  --attach=stderr \\\n  --network=host \\\n  ynput/ayon-shotgrid-processor:0.2.1 python -m processor\n</code></pre> <p>This one is trickier since the Makefile will symlink the <code>shotgrid_common</code> inside the <code>service/processor</code> folder.</p>"},{"location":"index.html#running-it-without-docker-or-make","title":"Running it without docker or make","text":"<p>You don't need to run these as Dockerized scripts; for that, you'll need either Poetry installed and create an environment specified by the <code>pyproject.toml</code> or using <code>virtualenv</code> and install the packages specified in the <code>[tool.poetry.dependencies]</code> section of the <code>pyproject.toml</code>; once in that environment, you'll need to load the contents of the <code>.env</code> file and finally:</p> <pre><code>python -m processor\n</code></pre>"},{"location":"index.html#usage","title":"Usage","text":"<p>With this integration, you can perform the following actions by navigating to <code>AYON &gt;Settings &gt; Shotgrid</code> and loading all projects by clicking <code>Populate Data</code>:</p>"},{"location":"index.html#import-a-new-shotgrid-project","title":"Import a New Shotgrid Project","text":"<p>With the <code>processor</code> service running, synchronize <code>Shotgrid --&gt; AYON</code> will replicate the Shotgrid structure in AYON.</p>"},{"location":"index.html#export-an-ayon-project-into-shotgrid","title":"Export an AYON project into Shotgrid","text":"<p>With the <code>processor</code> service running, synchronize <code>AYON --&gt; Shotgrid</code> will replicate the AYON structure in Shotgrid.</p>"},{"location":"index.html#update-based-on-shotgrid-events","title":"Update based on Shotgrid Events","text":"<p>With the <code>leecher</code> and the <code>processor</code> services running, and the <code>Ayon Auto Sync</code> field enabled in Shotgrid, whenever an event on <code>Episodes</code>, <code>Sequences</code>, <code>Shots</code>, or <code>Tasks</code> occurs, an event will be dispatched in Ayon <code>shotgrid.event</code>; this event will be then processed in another event <code>shotgrid.proc</code> dispatched by the <code>processor</code> service; this currently creates and removes entities and updates the name of entities so they are in sync between Shotgrid and Ayon.</p>"},{"location":"index.html#update-based-on-ayon-events","title":"Update based on AYON Events","text":"<p>With the <code>transmitter</code> and the <code>processor</code> services running, and the <code>Ayon Auto Sync</code> field enabled in Shotgrid, whenever an event on <code>entity.*</code> occurs in AYON, an event will be dispatched in Ayon <code>shotgrid.push</code>; this event will attempt to replicate the changes made in AYON in Shotgrid.</p> <p>In all instances, you'll want to keep an eye on the terminal where you launched the services, where you can track the progress of any of the handlers. This will be improved in the future so it can be tracked from AYON.</p>"},{"location":"index.html#automated-tests","title":"Automated tests","text":"<p>These tests do not yet cover all use cases and features provided by the sync services. Instead, they act as a safety net to proactively catch regressions on core functionalities.</p> <p>We strongly recommend running them locally with each new contribution. They require a local AYON server but no FLOW instance, thanks to Mockgun, which simulates a FLOW environment entirely in memory.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<ul> <li>Your local <code>python</code> should be &gt;=3.10</li> <li>You need a local AYON server with a service AYON_API_KEY defined</li> </ul>"},{"location":"index.html#run-the-tests","title":"Run the tests","text":"<p>Windows:</p> <pre><code>.\\service_tools\\manage.ps1 run-tests\n</code></pre> <p>Linux:</p> <pre><code>./service_tools/make runtests\n</code></pre>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_shotgrid<ul> <li>addon</li> <li>plugins<ul> <li>publish<ul> <li>collect_farm_env_variables</li> <li>integrate_moviepaths</li> </ul> </li> </ul> </li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings<ul> <li>main</li> </ul> </li> </ul> </li> <li>service_tools<ul> <li>main</li> </ul> </li> <li>services<ul> <li>leecher<ul> <li>leecher<ul> <li>__main__</li> <li>listener</li> </ul> </li> </ul> </li> <li>processor<ul> <li>processor<ul> <li>__main__</li> <li>handlers<ul> <li>shotgrid_event</li> <li>sync_projects</li> </ul> </li> <li>processor</li> </ul> </li> </ul> </li> <li>shotgrid_common<ul> <li>ayon_shotgrid_hub<ul> <li>match_ayon_hierarchy_in_shotgrid</li> <li>match_shotgrid_hierarchy_in_ayon</li> <li>update_from_ayon</li> <li>update_from_shotgrid</li> </ul> </li> <li>constants</li> <li>utils</li> <li>validate</li> </ul> </li> <li>tests<ul> <li>conftest</li> <li>helpers</li> <li>match_ayon_hierarchy<ul> <li>test_create</li> <li>test_rename</li> <li>test_update</li> </ul> </li> <li>match_shotgrid_hierarchy<ul> <li>test_create</li> <li>test_rename</li> </ul> </li> <li>test_sg_base</li> <li>update_from_ayon<ul> <li>test_create_from_ayon</li> <li>test_delete_from_ayon</li> <li>test_update_from_ayon</li> </ul> </li> </ul> </li> <li>transmitter<ul> <li>transmitter<ul> <li>__main__</li> <li>transmitter</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_shotgrid/index.html","title":"ayon_shotgrid","text":""},{"location":"autoapi/client/ayon_shotgrid/addon.html","title":"addon","text":""},{"location":"autoapi/client/ayon_shotgrid/version.html","title":"version","text":"<p>Package declaring shotgrid addon version.</p>"},{"location":"autoapi/client/ayon_shotgrid/plugins/index.html","title":"plugins","text":""},{"location":"autoapi/client/ayon_shotgrid/plugins/publish/index.html","title":"publish","text":""},{"location":"autoapi/client/ayon_shotgrid/plugins/publish/collect_farm_env_variables.html","title":"collect_farm_env_variables","text":""},{"location":"autoapi/client/ayon_shotgrid/plugins/publish/collect_farm_env_variables.html#client.ayon_shotgrid.plugins.publish.collect_farm_env_variables.CollectShotgridJobEnvVars","title":"<code>CollectShotgridJobEnvVars</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Collect set of environment variables to submit with deadline jobs</p> Source code in <code>client/ayon_shotgrid/plugins/publish/collect_farm_env_variables.py</code> <pre><code>class CollectShotgridJobEnvVars(pyblish.api.ContextPlugin):\n    \"\"\"Collect set of environment variables to submit with deadline jobs\"\"\"\n    order = pyblish.api.CollectorOrder - 0.45\n    label = \"Collect Shotgrid farm environment variables\"\n    targets = [\"local\"]\n\n    def process(self, context):\n        env = context.data.setdefault(FARM_JOB_ENV_DATA_KEY, {})\n        for key in [\n            \"AYON_SG_USERNAME\",\n        ]:\n            value = os.getenv(key)\n            if value:\n                self.log.debug(f\"Setting job env: {key}: {value}\")\n                env[key] = value\n</code></pre>"},{"location":"autoapi/client/ayon_shotgrid/plugins/publish/integrate_moviepaths.html","title":"integrate_moviepaths","text":""},{"location":"autoapi/client/ayon_shotgrid/plugins/publish/integrate_moviepaths.html#client.ayon_shotgrid.plugins.publish.integrate_moviepaths.IntegrateMoviePath","title":"<code>IntegrateMoviePath</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Looks for representation to be marked for source of sg_path_to_movie</p> <p>Dispatches event to update synchronized Version paths to limit race conditions.</p> <p>Must be called after full <code>Integrate</code> when both Version and Representations are present in DB.</p> Source code in <code>client/ayon_shotgrid/plugins/publish/integrate_moviepaths.py</code> <pre><code>class IntegrateMoviePath(pyblish.api.InstancePlugin):\n    \"\"\"Looks for representation to be marked for source of sg_path_to_movie\n\n    Dispatches event to update synchronized Version paths to limit race\n    conditions.\n\n    Must be called after full `Integrate` when both Version and Representations\n    are present in DB.\n    \"\"\"\n\n    order = pyblish.api.IntegratorOrder + 0.45\n    label = \"Integrate event for Flow movie paths\"\n    settings_category = \"shotgrid\"\n\n    profiles = []\n\n    def process(self, instance: pyblish.api.Instance):\n        product_type = instance.data[\"productType\"]\n\n        if instance.data.get(\"farm\"):\n            self.log.debug(\n                f\"`{product_type}` should be processed on farm, skipping.\"\n            )\n            return\n\n        published_representations = instance.data.get(\n            \"published_representations\"\n        )\n        if not published_representations:\n            self.log.debug(\"Instance does not have published representations\")\n            return\n\n        preferred_representation = self._get_preferred_representation(\n            instance,\n            published_representations\n        )\n\n        version_entity = instance.data[\"versionEntity\"]\n        has_slate = \"slate\" in version_entity[\"attrib\"][\"families\"]\n        flow_data = self._add_paths(\n            published_representations, preferred_representation, has_slate\n        )\n        if not flow_data:\n            return\n\n        self._trigger_event(instance, flow_data)\n\n    def _get_representation_profile(self, instance: pyblish.api.Instance):\n        host_name = instance.context.data[\"hostName\"]\n        product_type = instance.data[\"productType\"]\n        task_name = None\n        task_type = None\n        task_entity = instance.data.get(\"taskEntity\")\n        if task_entity:\n            task_type = task_entity[\"taskType\"]\n            task_name = task_entity[\"name\"]\n\n        profile = filter_profiles(\n            self.profiles,\n            {\n                \"host_names\": host_name,\n                \"product_types\": product_type,\n                \"task_names\": task_name,\n                \"task_types\": task_type,\n            },\n            logger=self.log,\n        )\n        return profile\n\n    def _get_preferred_representation(\n        self,\n        instance: pyblish.api.Instance,\n        published_representations: Dict[str, Any]\n    ):\n        profile = self._get_representation_profile(instance)\n        if not profile:\n            return None\n\n        repre_dict = {\n            repre_info[\"representation\"][\"name\"]: repre_info[\"representation\"]\n            for repre_info in published_representations.values()\n        }\n\n        for profile_repre_name in profile[\"repre_names\"]:\n            self.log.debug(\n                f\"Looking for representation `{profile_repre_name}`\"\n            )\n            preferred_representation = repre_dict.get(profile_repre_name)\n            if preferred_representation:\n                self.log.debug(\n                    f\"Using `{profile_repre_name}` as source for sg_movie_path\"\n                )\n                return preferred_representation\n\n    def _add_paths(\n        self,\n        published_representations: Dict[str, Any],\n        preferred_representation: Dict[str, Any],\n        has_slate: bool\n    ):\n        \"\"\"Adds local path to review file to `sg_path_to_*` as metadata.\n\n        We are storing local paths for external processing, some studios might\n        have tools to handle review files in another processes.\n        \"\"\"\n        thumbnail_path = None\n        found_representation = False\n\n        for repre_info in published_representations.values():\n            representation = repre_info[\"representation\"]\n            local_path = representation[\"attrib\"][\"path\"]\n            local_path = os.path.normpath(local_path)\n\n            representation_name = representation[\"name\"]\n            if (preferred_representation and\n                    representation_name == preferred_representation[\"name\"]):\n                found_representation = preferred_representation\n                break\n\n            if representation_name == \"thumbnail\":\n                thumbnail_path = local_path\n\n        flow_data = {}\n        if found_representation:\n            # clunky guess, not having access to ayon_core.VIDEO_EXTENSIONS\n            if len(found_representation[\"files\"]) == 1:\n                flow_data[\"sg_path_to_movie\"] = local_path\n            else:\n                # Replace the frame number with '###'\n                n = 0\n                match = re.search(r\"\\.(\\d+)\\.\", local_path)\n                if match:\n                    digit_str = match.group(1)\n                    n = len(digit_str)\n                path_to_frame = re.sub(r\"\\.\\d+\\.\", f\".{n*'#'}.\", local_path)\n\n                flow_data.update(\n                    {\n                        \"sg_path_to_movie\": path_to_frame,\n                        \"sg_path_to_frames\": path_to_frame,\n                    }\n                )\n\n            if has_slate:\n                flow_data[\"sg_frames_have_slate\"] = True\n\n        elif thumbnail_path:\n            flow_data.update({\n                \"sg_path_to_movie\": thumbnail_path,\n                \"sg_path_to_frames\": thumbnail_path,\n            })\n\n        return flow_data\n\n    def _trigger_event(\n        self,\n        instance: pyblish.api.Instance,\n        flow_data: Dict[str, Any]\n    ):\n        \"\"\"Triggers event to update media path on Flow(SG) Version\n\n        Temporarily via addon server endpoint to mitigate bug in\n        enroll_event_job.ignore_sender_types. When resolved could be changed\n        to simple dispatch_event.\n        \"\"\"\n\n        project_name = instance.context.data[\"projectName\"]\n        version_id = instance.data[\"versionEntity\"][\"id\"]\n        flow_data[\"versionId\"] = version_id\n\n        self.log.debug(f\"Sending event for {version_id} with {flow_data}\")\n\n        addon = instance.context.data[\"ayonAddonsManager\"][\"shotgrid\"]\n\n        endpoint = addon.get_server_addon_endpoint(\n            project_name, \"trigger_mediapath\"\n        )\n        response = ayon_api.post(\n            endpoint,\n            **flow_data,\n        )\n        response.raise_for_status(\"Cannot trigger update of media paths.\")\n</code></pre>"},{"location":"autoapi/server/index.html","title":"server","text":""},{"location":"autoapi/server/index.html#server.ShotgridAddon","title":"<code>ShotgridAddon</code>","text":"<p>               Bases: <code>BaseServerAddon</code></p> Source code in <code>server/__init__.py</code> <pre><code>class ShotgridAddon(BaseServerAddon):\n    settings_model: Type[ShotgridSettings] = ShotgridSettings\n\n    frontend_scopes: dict[str, Any] = {\"settings\": {}}\n\n    def initialize(self) -&gt; None:\n\n        # returning user for SG id value\n        self.add_endpoint(\n            \"/get_ayon_name_by_sg_id/{sg_user_id}\",\n            self.get_ayon_name_by_sg_id,\n            method=\"GET\",\n        )\n        self.add_endpoint(\n            \"/{project_name}/trigger_mediapath\",\n            self.trigger_mediapath_event,\n            method=\"POST\",\n        )\n\n    async def setup(self):\n        need_restart = await self.create_shotgrid_attributes()\n        if need_restart:\n            logging.debug(\n                \"Created or updated attributes in database, \"\n                \"requesting a server restart.\"\n            )\n            self.request_server_restart()\n\n    async def create_shotgrid_attributes(self) -&gt; bool:\n        \"\"\"Make sure AYON has the `shotgridId` and `shotgridPath` attributes.\n\n        Returns:\n            bool: 'True' if an attribute was created or updated.\n        \"\"\"\n\n        if Postgres.pool is None:\n            await Postgres.connect()\n\n        all_attributes = await Postgres.fetch(\n            \"SELECT name from public.attributes\"\n        )\n\n        num_of_attributes = len(all_attributes)\n\n        shotgrid_attributes = await Postgres.fetch(\n            \"SELECT name, scope from public.attributes \"\n            f\"WHERE (name = '{SG_ID_ATTRIB}'\"\n            f\" OR name = '{SG_TYPE_ATTRIB}'\"\n            f\" OR name = '{SG_PUSH_ATTRIB}') \"\n        )\n\n        expected_scopes = {\n            SG_ID_ATTRIB: [\"project\", \"folder\", \"task\", \"version\"],\n            SG_TYPE_ATTRIB:  [\"project\", \"folder\", \"task\", \"version\"],\n            SG_PUSH_ATTRIB: [\"project\"]\n        }\n        not_matching_scopes = False\n        for attr in shotgrid_attributes:\n            if expected_scopes[attr[\"name\"]] != attr[\"scope\"]:\n                not_matching_scopes = True\n                break\n        if (not shotgrid_attributes or\n                len(shotgrid_attributes) &lt; 3 or\n                not_matching_scopes):\n            postgres_query = \"\\n\".join((\n                \"INSERT INTO public.attributes\",\n                \"    (name, position, scope, data)\",\n                \"VALUES\",\n                \"    ($1, $2, $3, $4)\",\n                \"ON CONFLICT (name)\",\n                \"DO UPDATE SET\",\n                \"    scope = $3,\",\n                \"    data = $4\",\n            ))\n\n            logging.debug(\"Creating Shotgrid Attributes...\")\n\n            await Postgres.execute(\n                postgres_query,\n                SG_ID_ATTRIB,  # name\n                num_of_attributes + 1,  # Add Attributes at the end of the list\n                expected_scopes[SG_ID_ATTRIB],  # scope\n                {\n                    \"type\": \"string\",\n                    \"title\": \"Shotgrid ID\",\n                    \"description\": \"The Shotgrid ID of this entity.\",\n                    \"inherit\": False\n                }\n            )\n\n            await Postgres.execute(\n                postgres_query,\n                SG_TYPE_ATTRIB,  # name\n                num_of_attributes + 2,  # Add Attributes at the end of the list\n                expected_scopes[SG_TYPE_ATTRIB],  # scope\n                {\n                    \"type\": \"string\",\n                    \"title\": \"Shotgrid Type\",\n                    \"description\": \"The Shotgrid Type of this entity.\",\n                    \"inherit\": False\n                }\n            )\n\n            await Postgres.execute(\n                postgres_query,\n                SG_PUSH_ATTRIB,  # name\n                num_of_attributes + 3,  # Add Attributes at the end of the list\n                expected_scopes[SG_PUSH_ATTRIB],  # scope\n                {\n                    \"type\": \"boolean\",\n                    \"title\": \"Shotgrid Push\",\n                    \"description\": (\n                        \"Push changes done to this project to ShotGrid. \"\n                        \"Requires the transmitter service.\"\n                    ),\n                    \"inherit\": False,\n                    \"value\": False,\n                }\n            )\n\n            return True\n\n        else:\n            logging.debug(\"Shotgrid Attributes already exist.\")\n            return False\n\n    async def get_ayon_name_by_sg_id(\n        self,\n        sg_user_id: str = Path(\n            ...,\n            description=\"Id of Shotgrid user \",\n            example=\"123\",\n        )\n    ) -&gt; Optional[str]:\n        \"\"\"Queries user for specific 'sg_user_id' field in 'data'.\n\n        Field added during user synchronization to be explicit, not depending that\n        SG login will be same as AYON (which is not as @ is not allowed in AYON)\n        \"\"\"\n        query = f\"\"\"\n            SELECT\n                *\n            FROM public.users\n            WHERE data ? 'sg_user_id' AND data-&gt;&gt;'sg_user_id' = '{sg_user_id}';\n        \"\"\"\n\n        res = await Postgres.fetch(query)\n        if res:\n            return res[0][\"name\"]\n\n    async def trigger_mediapath_event(\n        self,\n        user: CurrentUser,\n        project_name: ProjectName,\n        data: dict[str, Any] = Body(...),\n    ) -&gt; Response:\n        \"\"\"Temporary endpoint to trigger event with explicit sender_type\"\"\"\n        response = await dispatch_event(\n            \"flow.version.mediapath\",\n            project=project_name,\n            sender_type=\"publish\",\n            description=\"Update media paths on synchronized Version\",\n            payload=data,\n        )\n\n        return Response(status_code=200, content=str(response))\n</code></pre>"},{"location":"autoapi/server/index.html#server.ShotgridAddon.create_shotgrid_attributes","title":"<code>create_shotgrid_attributes()</code>  <code>async</code>","text":"<p>Make sure AYON has the <code>shotgridId</code> and <code>shotgridPath</code> attributes.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>'True' if an attribute was created or updated.</p> Source code in <code>server/__init__.py</code> <pre><code>async def create_shotgrid_attributes(self) -&gt; bool:\n    \"\"\"Make sure AYON has the `shotgridId` and `shotgridPath` attributes.\n\n    Returns:\n        bool: 'True' if an attribute was created or updated.\n    \"\"\"\n\n    if Postgres.pool is None:\n        await Postgres.connect()\n\n    all_attributes = await Postgres.fetch(\n        \"SELECT name from public.attributes\"\n    )\n\n    num_of_attributes = len(all_attributes)\n\n    shotgrid_attributes = await Postgres.fetch(\n        \"SELECT name, scope from public.attributes \"\n        f\"WHERE (name = '{SG_ID_ATTRIB}'\"\n        f\" OR name = '{SG_TYPE_ATTRIB}'\"\n        f\" OR name = '{SG_PUSH_ATTRIB}') \"\n    )\n\n    expected_scopes = {\n        SG_ID_ATTRIB: [\"project\", \"folder\", \"task\", \"version\"],\n        SG_TYPE_ATTRIB:  [\"project\", \"folder\", \"task\", \"version\"],\n        SG_PUSH_ATTRIB: [\"project\"]\n    }\n    not_matching_scopes = False\n    for attr in shotgrid_attributes:\n        if expected_scopes[attr[\"name\"]] != attr[\"scope\"]:\n            not_matching_scopes = True\n            break\n    if (not shotgrid_attributes or\n            len(shotgrid_attributes) &lt; 3 or\n            not_matching_scopes):\n        postgres_query = \"\\n\".join((\n            \"INSERT INTO public.attributes\",\n            \"    (name, position, scope, data)\",\n            \"VALUES\",\n            \"    ($1, $2, $3, $4)\",\n            \"ON CONFLICT (name)\",\n            \"DO UPDATE SET\",\n            \"    scope = $3,\",\n            \"    data = $4\",\n        ))\n\n        logging.debug(\"Creating Shotgrid Attributes...\")\n\n        await Postgres.execute(\n            postgres_query,\n            SG_ID_ATTRIB,  # name\n            num_of_attributes + 1,  # Add Attributes at the end of the list\n            expected_scopes[SG_ID_ATTRIB],  # scope\n            {\n                \"type\": \"string\",\n                \"title\": \"Shotgrid ID\",\n                \"description\": \"The Shotgrid ID of this entity.\",\n                \"inherit\": False\n            }\n        )\n\n        await Postgres.execute(\n            postgres_query,\n            SG_TYPE_ATTRIB,  # name\n            num_of_attributes + 2,  # Add Attributes at the end of the list\n            expected_scopes[SG_TYPE_ATTRIB],  # scope\n            {\n                \"type\": \"string\",\n                \"title\": \"Shotgrid Type\",\n                \"description\": \"The Shotgrid Type of this entity.\",\n                \"inherit\": False\n            }\n        )\n\n        await Postgres.execute(\n            postgres_query,\n            SG_PUSH_ATTRIB,  # name\n            num_of_attributes + 3,  # Add Attributes at the end of the list\n            expected_scopes[SG_PUSH_ATTRIB],  # scope\n            {\n                \"type\": \"boolean\",\n                \"title\": \"Shotgrid Push\",\n                \"description\": (\n                    \"Push changes done to this project to ShotGrid. \"\n                    \"Requires the transmitter service.\"\n                ),\n                \"inherit\": False,\n                \"value\": False,\n            }\n        )\n\n        return True\n\n    else:\n        logging.debug(\"Shotgrid Attributes already exist.\")\n        return False\n</code></pre>"},{"location":"autoapi/server/index.html#server.ShotgridAddon.get_ayon_name_by_sg_id","title":"<code>get_ayon_name_by_sg_id(sg_user_id=Path(..., description='Id of Shotgrid user ', example='123'))</code>  <code>async</code>","text":"<p>Queries user for specific 'sg_user_id' field in 'data'.</p> <p>Field added during user synchronization to be explicit, not depending that SG login will be same as AYON (which is not as @ is not allowed in AYON)</p> Source code in <code>server/__init__.py</code> <pre><code>async def get_ayon_name_by_sg_id(\n    self,\n    sg_user_id: str = Path(\n        ...,\n        description=\"Id of Shotgrid user \",\n        example=\"123\",\n    )\n) -&gt; Optional[str]:\n    \"\"\"Queries user for specific 'sg_user_id' field in 'data'.\n\n    Field added during user synchronization to be explicit, not depending that\n    SG login will be same as AYON (which is not as @ is not allowed in AYON)\n    \"\"\"\n    query = f\"\"\"\n        SELECT\n            *\n        FROM public.users\n        WHERE data ? 'sg_user_id' AND data-&gt;&gt;'sg_user_id' = '{sg_user_id}';\n    \"\"\"\n\n    res = await Postgres.fetch(query)\n    if res:\n        return res[0][\"name\"]\n</code></pre>"},{"location":"autoapi/server/index.html#server.ShotgridAddon.trigger_mediapath_event","title":"<code>trigger_mediapath_event(user, project_name, data=Body(...))</code>  <code>async</code>","text":"<p>Temporary endpoint to trigger event with explicit sender_type</p> Source code in <code>server/__init__.py</code> <pre><code>async def trigger_mediapath_event(\n    self,\n    user: CurrentUser,\n    project_name: ProjectName,\n    data: dict[str, Any] = Body(...),\n) -&gt; Response:\n    \"\"\"Temporary endpoint to trigger event with explicit sender_type\"\"\"\n    response = await dispatch_event(\n        \"flow.version.mediapath\",\n        project=project_name,\n        sender_type=\"publish\",\n        description=\"Update media paths on synchronized Version\",\n        payload=data,\n    )\n\n    return Response(status_code=200, content=str(response))\n</code></pre>"},{"location":"autoapi/server/settings/index.html","title":"settings","text":""},{"location":"autoapi/server/settings/index.html#server.settings.ShotgridSettings","title":"<code>ShotgridSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>ShotGrid integration settings.</p> <p>Main setting for the AYON x ShotGrid integration, these need to be filled out in order to for the services to correctly operate.</p> Source code in <code>server/settings/main.py</code> <pre><code>class ShotgridSettings(BaseSettingsModel):\n    \"\"\"ShotGrid integration settings.\n\n    Main setting for the AYON x ShotGrid integration, these need to be filled\n    out in order to for the services to correctly operate.\n    \"\"\"\n\n    shotgrid_server: str = SettingsField(\n        default=\"\",\n        title=\"ShotGrid URL\",\n        description=\"The URL to the ShotGrid Server we want to interact with.\",\n        example=\"https://my-site.shotgrid.autodesk.com\",\n        scope=[\"studio\"]\n    )\n\n    shotgrid_no_ssl_validation: bool = SettingsField(\n        False,\n        title=\"No SSL validation\",\n        description=\"Turns off hostname matching validation for SSL certificates.\",\n    )\n    shotgrid_project_code_field: str = SettingsField(\n        default=\"code\",\n        title=\"ShotGrid Project Code field name\",\n        description=(\n            \"In order to create AYON projects, we need a Project Code, you \"\n            \"can specify here which field in the ShotGrid Project \"\n            \"entity represents it.\"\n        ),\n        example=\"sg_code\",\n        scope=[\"studio\"],\n    )\n    enable_shotgrid_local_storage: bool = SettingsField(\n        default=True,\n        title=\"Enable ShotGrid Local Storage.\",\n        description=(\n            \"Whether to try make use of local storage defined in ShotGrid \"\n            \"('Site Preferences -&gt; File Management -&gt; Local Storage') or not.\"\n        ),\n        scope=[\"studio\"],\n    )\n    shotgrid_local_storage_key: str = SettingsField(\n        default=\"primary\",\n        title=\"ShotGrid Local Storage entry name\",\n        description=(\n            \"Name of the 'code' to select which one of the multiple \"\n            \"possible local storages entries to use.\"\n        ),\n        example=\"ayon_storage\",\n        scope=[\"studio\"],\n    )\n    anatomy_preset: str = SettingsField(\n        default=\"_\",\n        title=\"Anatomy Preset\",\n        description=(\n            \"The anatomy preset to use for the \"\n            \"ShotGrid synchronized projects.\"\n        ),\n        enum_resolver=anatomy_presets_enum\n    )\n    compatibility_settings: ShotgridCompatibilitySettings = SettingsField(\n        default_factory=ShotgridCompatibilitySettings,\n        title=\"ShotGrid &lt;-&gt; AYON compatibility Settings\",\n        description=(\n            \"All the settings that allow us to fine-grain the relation \"\n            \"between ShotGrid and AYON entities.\"\n        )\n    )\n    service_settings: ShotgridServiceSettings = SettingsField(\n        default_factory=ShotgridServiceSettings,\n        title=\"Service settings\",\n        scope=[\"studio\"],\n    )\n    publish: ShotgridPublishPlugins = SettingsField(\n        default_factory=ShotgridPublishPlugins, title=\"Publish plugins\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html","title":"main","text":""},{"location":"autoapi/server/settings/main.html#server.settings.main.FolderReparentingRelocateModel","title":"<code>FolderReparentingRelocateModel</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Re-parent folders with Root relocation</p> Source code in <code>server/settings/main.py</code> <pre><code>class FolderReparentingRelocateModel(BaseSettingsModel):\n    \"\"\"Re-parent folders with Root relocation\"\"\"\n    enabled: bool = SettingsField(\n        False,\n        title=\"Enabled\",\n        description=\"Enable or disable the re-parenting\",\n    )\n\n    presets: list[FolderReparentingPresetsModel] = SettingsField(\n        title=\"Presets\",\n        default_factory=list,\n        description=(\n            \"List of presets for re-parenting. \"\n            \"If empty default behavior will be used.\"\n        ),\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.FolderReparentingTypeGroupingModel","title":"<code>FolderReparentingTypeGroupingModel</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Re-parent folders with Type grouping</p> Source code in <code>server/settings/main.py</code> <pre><code>class FolderReparentingTypeGroupingModel(BaseSettingsModel):\n    \"\"\"Re-parent folders with Type grouping\"\"\"\n    enabled: bool = SettingsField(\n        False,\n        title=\"Enabled\",\n        description=\"Enable or disable the re-parenting\",\n    )\n\n    presets: list[FolderReparentingPresetsModel] = SettingsField(\n        title=\"Presets\",\n        default_factory=list,\n        description=(\n            \"List of presets for re-parenting. \"\n            \"If empty default behavior will be used.\"\n        ),\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.MoviePathProfile","title":"<code>MoviePathProfile</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Profile to select representation to use in Version.sg_path_to_movie</p> Source code in <code>server/settings/main.py</code> <pre><code>class MoviePathProfile(BaseSettingsModel):\n    \"\"\"Profile to select representation to use in Version.sg_path_to_movie\"\"\"\n    _layout = \"expanded\"\n    host_names: list[str] = SettingsField(\n        default_factory=list, title=\"Host names\"\n    )\n    product_types: list[str] = SettingsField(\n        default_factory=list,\n        title=\"Product types\"\n    )\n    task_types: list[str] = SettingsField(\n        default_factory=list,\n        title=\"Task types\",\n        enum_resolver=task_types_enum\n    )\n    task_names: list[str] = SettingsField(\n        default_factory=list,\n        title=\"Task names\")\n    repre_names: list[str] = SettingsField(\n        default_factory=list,\n        title=\"Selected representation names\",\n        description=\"Representation names used for Version.sg_path_to_movie\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.ShotgridCompatibilitySettings","title":"<code>ShotgridCompatibilitySettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Settings to define relationships between ShotGrid and AYON.</p> Source code in <code>server/settings/main.py</code> <pre><code>class ShotgridCompatibilitySettings(BaseSettingsModel):\n    \"\"\"Settings to define relationships between ShotGrid and AYON.\"\"\"\n\n    default_task_type: str = SettingsField(\n        default=\"Generic\",\n        title=\"Default Task Type\",\n        enum_resolver=task_types_enum,\n        description=(\"Default Task Type for SG tasks with missing pipeline step\"),\n    )\n    shotgrid_enabled_entities: list[str] = SettingsField(\n        title=\"ShotGrid Enabled Entities\",\n        default_factory=default_shotgrid_enabled_entities,\n        enum_resolver=default_shotgrid_entities,\n        description=(\n            \"The Entities that are enabled in ShotGrid, disable \"\n            \"any that you do not use.\"\n        ),\n    )\n\n    custom_attribs_map: list[AttributesMappingModel] = SettingsField(\n        title=\"Folder Attributes Map\",\n        default_factory=get_default_folder_attributes,\n        description=(\n            \"AYON attributes &lt;&gt; ShotGrid fields (without 'sg_' prefix!) \"\n            \"mapping. Empty ones will be ignored. Scope is the list of \"\n            \"ShotGrid entities that the mapping applies to. Disable any.\"\n        ),\n    )\n\n    @validator(\"custom_attribs_map\")\n    def ensure_requests(cls, value):\n        \"\"\" Ensure custom attribs map does not contain duplicated SG fields.\n        \"\"\"\n        all_sg_fields = set()\n        all_ayon_attributes = set()\n        for entry in value:\n            if entry.sg and entry.sg in all_sg_fields:\n                raise BadRequestException(f\"Duplicate mapped SG field: {entry.sg}\")\n            if entry.ayon and entry.ayon in all_ayon_attributes:\n                raise BadRequestException(f\"Duplicate mapped AYON attribute: {entry.ayon}\")\n\n            if entry.sg:\n                all_sg_fields.add(entry.sg)\n            if entry.ayon:\n                all_ayon_attributes.add(entry.ayon)\n\n        return value\n\n    folder_parenting: FolderReparentingModel = SettingsField(\n        title=\"Folder re-parenting\",\n        default_factory=FolderReparentingModel,\n        description=(\"Parent folders for AYON folders matching to SG types.\"),\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.ShotgridCompatibilitySettings.ensure_requests","title":"<code>ensure_requests(value)</code>","text":"<p>Ensure custom attribs map does not contain duplicated SG fields.</p> Source code in <code>server/settings/main.py</code> <pre><code>@validator(\"custom_attribs_map\")\ndef ensure_requests(cls, value):\n    \"\"\" Ensure custom attribs map does not contain duplicated SG fields.\n    \"\"\"\n    all_sg_fields = set()\n    all_ayon_attributes = set()\n    for entry in value:\n        if entry.sg and entry.sg in all_sg_fields:\n            raise BadRequestException(f\"Duplicate mapped SG field: {entry.sg}\")\n        if entry.ayon and entry.ayon in all_ayon_attributes:\n            raise BadRequestException(f\"Duplicate mapped AYON attribute: {entry.ayon}\")\n\n        if entry.sg:\n            all_sg_fields.add(entry.sg)\n        if entry.ayon:\n            all_ayon_attributes.add(entry.ayon)\n\n    return value\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.ShotgridServiceSettings","title":"<code>ShotgridServiceSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Specific settings for the ShotGrid Services: Processor, Leecher and Transmitter.</p> <p>The different services process events from either ShotGrid or AYON, this field allows to control how long to wait between each event is processed.</p> Source code in <code>server/settings/main.py</code> <pre><code>class ShotgridServiceSettings(BaseSettingsModel):\n    \"\"\"Specific settings for the ShotGrid Services: Processor, Leecher and\n    Transmitter.\n\n    The different services process events from either ShotGrid or AYON,\n    this field allows to control how long to wait between each event\n    is processed.\n    \"\"\"\n    polling_frequency: int = SettingsField(\n        default=10,\n        title=\"How often (in seconds) to process ShotGrid related events.\",\n    )\n\n    script_key: str = SettingsField(\n        default=\"\",\n        enum_resolver=secrets_enum,\n        title=\"ShotGrid's Script api key\",\n        description=(\n            \"AYON Secret used for Service related server operations \"\n            \"Secret should lead to ShotGrid's Script api key. \"\n            \"See more at: https://developer.shotgridsoftware.com/python-api/\"\n            \"authentication.html#setting-up-shotgrid\"\n        ),\n    )\n\n    script_name: str = SettingsField(\n        default=\"\",\n        placeholder=\"Create and Paste a script name here\",\n        title=\"ShotGrid's Script Name\",\n        description=(\n            \"AYON Secret used for Service related server operations \"\n            \"Secret should lead to ShotGrid's Script Name. \"\n            \"See more at: https://developer.shotgridsoftware.com/python-api/\"\n            \"authentication.html#setting-up-shotgrid\"\n        ),\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.ShotgridSettings","title":"<code>ShotgridSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>ShotGrid integration settings.</p> <p>Main setting for the AYON x ShotGrid integration, these need to be filled out in order to for the services to correctly operate.</p> Source code in <code>server/settings/main.py</code> <pre><code>class ShotgridSettings(BaseSettingsModel):\n    \"\"\"ShotGrid integration settings.\n\n    Main setting for the AYON x ShotGrid integration, these need to be filled\n    out in order to for the services to correctly operate.\n    \"\"\"\n\n    shotgrid_server: str = SettingsField(\n        default=\"\",\n        title=\"ShotGrid URL\",\n        description=\"The URL to the ShotGrid Server we want to interact with.\",\n        example=\"https://my-site.shotgrid.autodesk.com\",\n        scope=[\"studio\"]\n    )\n\n    shotgrid_no_ssl_validation: bool = SettingsField(\n        False,\n        title=\"No SSL validation\",\n        description=\"Turns off hostname matching validation for SSL certificates.\",\n    )\n    shotgrid_project_code_field: str = SettingsField(\n        default=\"code\",\n        title=\"ShotGrid Project Code field name\",\n        description=(\n            \"In order to create AYON projects, we need a Project Code, you \"\n            \"can specify here which field in the ShotGrid Project \"\n            \"entity represents it.\"\n        ),\n        example=\"sg_code\",\n        scope=[\"studio\"],\n    )\n    enable_shotgrid_local_storage: bool = SettingsField(\n        default=True,\n        title=\"Enable ShotGrid Local Storage.\",\n        description=(\n            \"Whether to try make use of local storage defined in ShotGrid \"\n            \"('Site Preferences -&gt; File Management -&gt; Local Storage') or not.\"\n        ),\n        scope=[\"studio\"],\n    )\n    shotgrid_local_storage_key: str = SettingsField(\n        default=\"primary\",\n        title=\"ShotGrid Local Storage entry name\",\n        description=(\n            \"Name of the 'code' to select which one of the multiple \"\n            \"possible local storages entries to use.\"\n        ),\n        example=\"ayon_storage\",\n        scope=[\"studio\"],\n    )\n    anatomy_preset: str = SettingsField(\n        default=\"_\",\n        title=\"Anatomy Preset\",\n        description=(\n            \"The anatomy preset to use for the \"\n            \"ShotGrid synchronized projects.\"\n        ),\n        enum_resolver=anatomy_presets_enum\n    )\n    compatibility_settings: ShotgridCompatibilitySettings = SettingsField(\n        default_factory=ShotgridCompatibilitySettings,\n        title=\"ShotGrid &lt;-&gt; AYON compatibility Settings\",\n        description=(\n            \"All the settings that allow us to fine-grain the relation \"\n            \"between ShotGrid and AYON entities.\"\n        )\n    )\n    service_settings: ShotgridServiceSettings = SettingsField(\n        default_factory=ShotgridServiceSettings,\n        title=\"Service settings\",\n        scope=[\"studio\"],\n    )\n    publish: ShotgridPublishPlugins = SettingsField(\n        default_factory=ShotgridPublishPlugins, title=\"Publish plugins\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.default_shotgrid_enabled_entities","title":"<code>default_shotgrid_enabled_entities()</code>","text":"<p>The entity types in ShotGrid that are enabled by default in AYON.</p> Source code in <code>server/settings/main.py</code> <pre><code>def default_shotgrid_enabled_entities():\n    \"\"\"The entity types in ShotGrid that are enabled by default in AYON.\"\"\"\n    return [\n        \"Project\",\n        \"Episode\",\n        \"Sequence\",\n        \"Shot\",\n        \"Asset\",\n        \"Task\",\n        \"Version\",\n        \"Note\"\n    ]\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.default_shotgrid_entities","title":"<code>default_shotgrid_entities()</code>","text":"<p>The entity types that exist in ShotGrid.</p> Source code in <code>server/settings/main.py</code> <pre><code>def default_shotgrid_entities():\n    \"\"\"The entity types that exist in ShotGrid.\"\"\"\n    return [\n        \"Project\",\n        \"Episode\",\n        \"Sequence\",\n        \"Scene\",\n        \"Shot\",\n        \"Asset\",\n        \"Task\",\n        \"Version\",\n        \"Note\"\n    ]\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.default_shotgrid_reparenting_entities","title":"<code>default_shotgrid_reparenting_entities()</code>","text":"<p>The entity types in ShotGrid that are enabled by default in AYON.</p> Source code in <code>server/settings/main.py</code> <pre><code>def default_shotgrid_reparenting_entities():\n    \"\"\"The entity types in ShotGrid that are enabled by default in AYON.\"\"\"\n    return [\n        \"Episode\",\n        \"Sequence\",\n        \"Shot\",\n        \"Asset\",\n    ]\n</code></pre>"},{"location":"autoapi/server/settings/main.html#server.settings.main.get_default_folder_attributes","title":"<code>get_default_folder_attributes()</code>","text":"<p>Get AYON's Folder attributes</p> <p>Get all the <code>attribs</code> for Folder entities in a list to be consumed by the <code>default_factory</code> in the <code>ShotgridCompatibilitySettings.custom_attribs_map</code> settings.</p> Source code in <code>server/settings/main.py</code> <pre><code>def get_default_folder_attributes():\n    \"\"\"Get AYON's Folder attributes\n\n    Get all the `attribs` for Folder entities in a list\n    to be consumed by the `default_factory` in the\n    `ShotgridCompatibilitySettings.custom_attribs_map`\n    settings.\n    \"\"\"\n    attributes = []\n\n    for attr_dict in attribute_library.data.get(\"folder\", {}):\n        attr_name = attr_dict[\"name\"]\n\n        if attr_name in [\"shotgridId\", \"shotgridType\", \"tools\"]:\n            continue\n\n        attr_map = {\n            \"ayon\": attr_name,\n            \"sg\": \"\",\n            \"type\": attr_dict[\"type\"],\n            \"scope\": default_shotgrid_enabled_entities()\n        }\n\n        # Project.startDate is usually not editable in Flow\n        if attr_name == \"startDate\":\n            reduce_scope = default_shotgrid_enabled_entities()\n            reduce_scope.remove(\"Project\")\n            attr_map[\"scope\"] = reduce_scope\n\n        if attr_map not in attributes:\n            attributes.append(attr_map)\n\n    return attributes\n</code></pre>"},{"location":"autoapi/service_tools/main.html","title":"main","text":""},{"location":"autoapi/services/leecher/leecher/index.html","title":"leecher","text":""},{"location":"autoapi/services/leecher/leecher/index.html#services.leecher.leecher.ShotgridListener","title":"<code>ShotgridListener</code>","text":"Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>class ShotgridListener:\n    log = get_logger(__file__)\n\n    def __init__(self):\n        \"\"\"Ensure both AYON and Shotgrid connections are available.\n\n        Set up common needed attributes and handle shotgrid connection\n        closure via signal handlers.\n\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Listener.\")\n\n        try:\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]  # noqa: E501\n                if attr[\"sg\"]\n            }\n            self.custom_sg_attribs = set(self.custom_attribs_map.values())\n\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]  # noqa: E501\n\n            try:\n                self.shotgrid_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.shotgrid_polling_frequency = 10\n\n        except Exception as e:\n            self.log.error(\n                \"Unable to get Addon settings from the server.\")\n            raise e\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        try:\n            validate.validate_sg_url(self.sg_url)\n            self.sg_session = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key\n            )\n            self.sg_session.connect()\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid Instance:\")\n            raise e\n\n        self.sg_current_api_user = self.sg_session.find_one(\n            \"ApiUser\",\n            [[\"firstname\", \"is\", self.sg_script_name]]\n        )\n\n        signal.signal(signal.SIGINT, self._signal_teardown_handler)\n        signal.signal(signal.SIGTERM, self._signal_teardown_handler)\n\n    def _signal_teardown_handler(self, signalnum, frame):\n        self.log.warning(\"Process stop requested. Terminating process.\")\n        self.sg_session.close()\n        self.log.warning(\"Termination finished.\")\n        sys.exit(0)\n\n    def _build_shotgrid_filters(self, sg_projects):\n        \"\"\"Build SG filters for Events query.\n\n        We want to filter out all the Events in the SG database that do not\n        meet our needs:\n            1) Events of Projects with \"AYON Auto Sync\" enabled.\n            2) Events on entities and type for entities we track.\n\n        Args:\n            sg_projects (list): List of Shotgrid Project IDs.\n\n        Returns:\n            filters (list): Filter to apply to the SG query.\n        \"\"\"\n        filters = []\n\n        if not sg_projects:\n            return []\n\n        filters.append([\"project\", \"in\", sg_projects])\n\n        if sg_event_types := self._get_supported_event_types():\n            filters.append([\"event_type\", \"in\", sg_event_types])\n\n        return filters\n\n    def _get_supported_event_types(self) -&gt; list[str]:\n        sg_event_types = []\n        for entity_type in self.sg_enabled_entities:\n            sg_event_types.extend(\n                event_name.format(entity_type) for event_name in SG_EVENT_TYPES\n            )\n        return sg_event_types\n\n    def _find_last_event_id(self):\n        \"\"\"Find the last event ID processed by AYON.\n\n        Info:\n            This function queries the AYON GraphQL API to get the last event\n            processed by AYON. If none is found we return None. Originally we\n            had iterated all the events in the database to find the last one\n            but this was not efficient in cases where huge amounts of events\n            were present in the database.\n\n        Returns:\n            last_event_id (int): The last known Event id.\n        \"\"\"\n        response = ayon_api.query_graphql(\n            LAST_EVENT_QUERY,\n            {\"eventTopic\": \"shotgrid.event\"},\n        )\n        if response.errors:\n            self.log.error(str(response.errors))\n            return None\n        data = response.data[\"data\"]\n        for node in data[\"events\"][\"edges\"]:\n            summary = node[\"node\"][\"summary\"]\n            summary_data = json.loads(summary)\n\n            if summary_data.get(\"sg_event_id\"):\n                return summary_data[\"sg_event_id\"]\n\n            # return it old way\n            # TODO: remove hash in future since it is only used\n            #       as backward compatibility\n            try:\n                return int(node[\"node\"][\"hash\"])\n            except ValueError:\n                # if hash is not an integer this can happen if project sync\n                # is using old topic `shotgrid.event`\n                pass\n\n        return None\n\n    def _get_last_event_processed(self, sg_filters):\n        \"\"\"Find the Event ID for the last SG processed event.\n\n        First attempt to find it via AYON, if none is found we get the last\n        matching event from Shotgrid.\n\n        Returns:\n            last_event_id (int): The last known Event id.\n        \"\"\"\n        last_event_id = self._find_last_event_id()\n        if not last_event_id:\n            last_event = self.sg_session.find_one(\n                \"EventLogEntry\",\n                filters=sg_filters,\n                fields=[\"id\", \"project\"],\n                order=[{\"column\": \"id\", \"direction\": \"desc\"}],\n            )\n            if last_event:\n                last_event_id = last_event[\"id\"]\n\n        return last_event_id\n\n\n    @staticmethod\n    def _get_syncing_projects():\n        \"\"\"Get shotgrid project IDs defined from current AYON projects.\n        \"\"\"\n        all_ay_projects = ayon_api.get_projects()\n        syncing_sg_ids = []\n\n        for ay_project in all_ay_projects:\n            syncing_id = ay_project[\"attrib\"].get(SHOTGRID_ID_ATTRIB)\n            if not syncing_id:\n                continue\n            syncing_sg_ids.append(syncing_id)\n\n        return syncing_sg_ids\n\n\n    def start_listening(self):\n        \"\"\"Main loop querying the Shotgrid database for new events\n\n        Since Shotgrid does not have an event hub per se, we need to query\n        the \"EventLogEntry table and send these as AYON events for processing.\n\n        We try to continue from the last Event processed by the leecher, if\n        none is found we start at the moment in time.\n        \"\"\"\n        self.log.info(\"Start listening for Shotgrid Events...\")\n\n        last_event_id = None\n\n        while True:\n\n            # Ensure we only fetch the event from the syncing projects.\n            # - project has to exists in Flow instance and AYON server\n            # - sg_project in Flow must define sg_ayon_auto_sync field\n            sg_projects = self.sg_session.find(\n                \"Project\", filters=[[\"sg_ayon_auto_sync\", \"is\", True]]\n            )\n            ayon_sg_ids = self._get_syncing_projects()  # project set in AYON server\n            sg_projects = [proj for proj in sg_projects if str(proj[\"id\"]) in ayon_sg_ids]\n            sg_filters = self._build_shotgrid_filters(sg_projects)\n\n            self.log.debug(f\"Last Event ID: {last_event_id}\")\n\n            if not sg_filters:\n                self.log.debug(\n                    f\"Leecher waiting {self.shotgrid_polling_frequency} \"\n                    \"seconds. No projects with AYON Auto Sync found.\"\n                )\n                time.sleep(self.shotgrid_polling_frequency)\n                continue\n\n            if last_event_id is None:\n                last_event_id = self._get_last_event_processed(sg_filters)\n\n            sg_filters.append([\"id\", \"greater_than\", last_event_id])\n\n            self.log.debug(f\"Shotgrid filters: {sg_filters}\")\n\n            try:\n                events = self.sg_session.find(\n                    \"EventLogEntry\",\n                    sg_filters,\n                    SG_EVENT_QUERY_FIELDS,\n                    order=[{\"column\": \"id\", \"direction\": \"asc\"}],\n                    limit=50,\n                )\n                if not events:\n                    self.log.debug(\n                        f\"Leecher waiting {self.shotgrid_polling_frequency} seconds...\"\n                    )\n                    time.sleep(self.shotgrid_polling_frequency)\n                    continue\n\n                self.log.debug(f\"Found {len(events)} events in Shotgrid.\")\n\n                sg_projects_by_id = {\n                    sg_project[\"id\"]: sg_project\n                    for sg_project in sg_projects\n                }\n                supported_event_types = []\n                if events:\n                    supported_event_types = self._get_supported_event_types()\n\n                for event in events:\n                    if not event:\n                        continue\n\n                    ignore_event = True\n                    last_event_id = event[\"id\"]\n\n                    if (\n                        event[\"event_type\"].endswith(\"_Change\")\n                        and (\n                            event[\"attribute_name\"].replace(\"sg_\", \"\")\n                            not in self.custom_sg_attribs\n                        )\n                    ):\n                        # events related to custom attributes changes\n                        # check if event was caused by api user\n                        ignore_event = self._is_api_user_event(event)\n\n                        if not ignore_event:\n                            # check meta if in_create is True and ignore\n                            # those events as they are not useful for us\n                            # we are interested only in changes in entities\n                            # not in creation events\n                            ignore_event = event.get(\"meta\", {}).get(\n                                \"in_create\")\n\n                    elif event[\"event_type\"] in supported_event_types:\n                        # events related to changes in entities we track\n                        # check if event was caused by api user\n                        ignore_event = self._is_api_user_event(event)\n\n                    if ignore_event:\n                        self.log.info(f\"Ignoring event: {event['id']}\")\n                        self.log.debug(f\"event payload: {pformat(event)}\")\n                        continue\n\n                    self.send_shotgrid_event_to_ayon(event, sg_projects_by_id)\n\n            except Exception:\n                self.log.error(traceback.format_exc())\n\n    def _is_api_user_event(self, event: dict[str, Any]) -&gt; bool:\n        \"\"\"Check if the event was caused by our API user.\n\n        Args:\n            event (dict): The Shotgrid Event data.\n\n        Returns:\n            bool: True if the event was caused by our API user.\n        \"\"\"\n        # Ignore events that are coming from ourselves.\n        # Other ApiUser generated events are OK.\n        if (\n            event.get(\"user\", {}).get(\"type\") == \"ApiUser\"\n            and event.get(\"user\", {}).get(\"id\") == self.sg_current_api_user[\"id\"]\n        ):\n            self.log.debug(\n                \"Ignore event from the AYON&lt;-&gt;SG service ApiUser. \"\n            )\n            return True\n\n    def send_shotgrid_event_to_ayon(\n        self, payload: dict[str, Any], sg_projects_by_id: dict[str, Any]\n    ):\n        \"\"\"Send the Shotgrid event as an AYON event.\n\n        Args:\n            payload (dict): The Event data.\n        \"\"\"\n        payload_id = payload[\"id\"]\n        payload_type = payload[\"event_type\"]\n        description = f\"Leeched '{payload_type}' event  with ID '{payload_id}'\"\n        user_name = payload.get(\"user\", {}).get(\"name\", \"Undefined\")\n\n        if user_name:\n            description = (\n                f\"Leeched '{payload_type}' event  with ID '{payload_id}' \"\n                f\"by '{user_name}'\"\n            )\n\n        # fix non serializable datetime\n        payload[\"created_at\"] = payload[\"created_at\"].isoformat()\n\n        payload_meta = payload.get(\"meta\", {})\n        if payload_meta.get(\"entity_type\", \"Undefined\") == \"Project\":\n            project_name = payload.get(\"entity\", {}).get(\"name\", \"Undefined\")\n            project_id = payload.get(\"entity\", {}).get(\"id\", \"Undefined\")\n        else:\n            project_name = payload.get(\"project\", {}).get(\"name\", \"Undefined\")\n            project_id = payload.get(\"project\", {}).get(\"id\", \"Undefined\")\n\n        sg_project = sg_projects_by_id[project_id]\n        new_event_hash = get_event_hash(\"shotgrid.event\", payload[\"id\"])\n\n        ayon_api.dispatch_event(\n            \"shotgrid.event\",\n            sender=socket.gethostname(),\n            event_hash=new_event_hash,\n            project_name=project_name,\n            username=user_name,\n            description=description,\n            summary={\n                \"sg_event_id\": payload_id,\n            },\n            payload={\n                \"message\": json.dumps(payload, indent=2),\n                \"action\": \"shotgrid-event\",\n                \"user_name\": user_name,\n                \"project_name\": project_name,\n                \"project_code\": sg_project.get(self.sg_project_code_field),\n                \"project_code_field\": self.sg_project_code_field,\n                \"sg_payload\": payload,\n            },\n        )\n\n        self.log.debug(f\"Dispatched AYON event with payload:{payload}\")\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/index.html#services.leecher.leecher.ShotgridListener.__init__","title":"<code>__init__()</code>","text":"<p>Ensure both AYON and Shotgrid connections are available.</p> <p>Set up common needed attributes and handle shotgrid connection closure via signal handlers.</p> Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def __init__(self):\n    \"\"\"Ensure both AYON and Shotgrid connections are available.\n\n    Set up common needed attributes and handle shotgrid connection\n    closure via signal handlers.\n\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Listener.\")\n\n    try:\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]  # noqa: E501\n            if attr[\"sg\"]\n        }\n        self.custom_sg_attribs = set(self.custom_attribs_map.values())\n\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]  # noqa: E501\n\n        try:\n            self.shotgrid_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.shotgrid_polling_frequency = 10\n\n    except Exception as e:\n        self.log.error(\n            \"Unable to get Addon settings from the server.\")\n        raise e\n\n    # SSL validation\n    if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n        shotgun_api3.NO_SSL_VALIDATION = True\n        self.log.info(\"SSL validation is disabled.\")\n\n    try:\n        validate.validate_sg_url(self.sg_url)\n        self.sg_session = shotgun_api3.Shotgun(\n            self.sg_url,\n            script_name=self.sg_script_name,\n            api_key=self.sg_api_key\n        )\n        self.sg_session.connect()\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid Instance:\")\n        raise e\n\n    self.sg_current_api_user = self.sg_session.find_one(\n        \"ApiUser\",\n        [[\"firstname\", \"is\", self.sg_script_name]]\n    )\n\n    signal.signal(signal.SIGINT, self._signal_teardown_handler)\n    signal.signal(signal.SIGTERM, self._signal_teardown_handler)\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/index.html#services.leecher.leecher.ShotgridListener.send_shotgrid_event_to_ayon","title":"<code>send_shotgrid_event_to_ayon(payload, sg_projects_by_id)</code>","text":"<p>Send the Shotgrid event as an AYON event.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict</code> <p>The Event data.</p> required Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def send_shotgrid_event_to_ayon(\n    self, payload: dict[str, Any], sg_projects_by_id: dict[str, Any]\n):\n    \"\"\"Send the Shotgrid event as an AYON event.\n\n    Args:\n        payload (dict): The Event data.\n    \"\"\"\n    payload_id = payload[\"id\"]\n    payload_type = payload[\"event_type\"]\n    description = f\"Leeched '{payload_type}' event  with ID '{payload_id}'\"\n    user_name = payload.get(\"user\", {}).get(\"name\", \"Undefined\")\n\n    if user_name:\n        description = (\n            f\"Leeched '{payload_type}' event  with ID '{payload_id}' \"\n            f\"by '{user_name}'\"\n        )\n\n    # fix non serializable datetime\n    payload[\"created_at\"] = payload[\"created_at\"].isoformat()\n\n    payload_meta = payload.get(\"meta\", {})\n    if payload_meta.get(\"entity_type\", \"Undefined\") == \"Project\":\n        project_name = payload.get(\"entity\", {}).get(\"name\", \"Undefined\")\n        project_id = payload.get(\"entity\", {}).get(\"id\", \"Undefined\")\n    else:\n        project_name = payload.get(\"project\", {}).get(\"name\", \"Undefined\")\n        project_id = payload.get(\"project\", {}).get(\"id\", \"Undefined\")\n\n    sg_project = sg_projects_by_id[project_id]\n    new_event_hash = get_event_hash(\"shotgrid.event\", payload[\"id\"])\n\n    ayon_api.dispatch_event(\n        \"shotgrid.event\",\n        sender=socket.gethostname(),\n        event_hash=new_event_hash,\n        project_name=project_name,\n        username=user_name,\n        description=description,\n        summary={\n            \"sg_event_id\": payload_id,\n        },\n        payload={\n            \"message\": json.dumps(payload, indent=2),\n            \"action\": \"shotgrid-event\",\n            \"user_name\": user_name,\n            \"project_name\": project_name,\n            \"project_code\": sg_project.get(self.sg_project_code_field),\n            \"project_code_field\": self.sg_project_code_field,\n            \"sg_payload\": payload,\n        },\n    )\n\n    self.log.debug(f\"Dispatched AYON event with payload:{payload}\")\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/index.html#services.leecher.leecher.ShotgridListener.start_listening","title":"<code>start_listening()</code>","text":"<p>Main loop querying the Shotgrid database for new events</p> <p>Since Shotgrid does not have an event hub per se, we need to query the \"EventLogEntry table and send these as AYON events for processing.</p> <p>We try to continue from the last Event processed by the leecher, if none is found we start at the moment in time.</p> Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def start_listening(self):\n    \"\"\"Main loop querying the Shotgrid database for new events\n\n    Since Shotgrid does not have an event hub per se, we need to query\n    the \"EventLogEntry table and send these as AYON events for processing.\n\n    We try to continue from the last Event processed by the leecher, if\n    none is found we start at the moment in time.\n    \"\"\"\n    self.log.info(\"Start listening for Shotgrid Events...\")\n\n    last_event_id = None\n\n    while True:\n\n        # Ensure we only fetch the event from the syncing projects.\n        # - project has to exists in Flow instance and AYON server\n        # - sg_project in Flow must define sg_ayon_auto_sync field\n        sg_projects = self.sg_session.find(\n            \"Project\", filters=[[\"sg_ayon_auto_sync\", \"is\", True]]\n        )\n        ayon_sg_ids = self._get_syncing_projects()  # project set in AYON server\n        sg_projects = [proj for proj in sg_projects if str(proj[\"id\"]) in ayon_sg_ids]\n        sg_filters = self._build_shotgrid_filters(sg_projects)\n\n        self.log.debug(f\"Last Event ID: {last_event_id}\")\n\n        if not sg_filters:\n            self.log.debug(\n                f\"Leecher waiting {self.shotgrid_polling_frequency} \"\n                \"seconds. No projects with AYON Auto Sync found.\"\n            )\n            time.sleep(self.shotgrid_polling_frequency)\n            continue\n\n        if last_event_id is None:\n            last_event_id = self._get_last_event_processed(sg_filters)\n\n        sg_filters.append([\"id\", \"greater_than\", last_event_id])\n\n        self.log.debug(f\"Shotgrid filters: {sg_filters}\")\n\n        try:\n            events = self.sg_session.find(\n                \"EventLogEntry\",\n                sg_filters,\n                SG_EVENT_QUERY_FIELDS,\n                order=[{\"column\": \"id\", \"direction\": \"asc\"}],\n                limit=50,\n            )\n            if not events:\n                self.log.debug(\n                    f\"Leecher waiting {self.shotgrid_polling_frequency} seconds...\"\n                )\n                time.sleep(self.shotgrid_polling_frequency)\n                continue\n\n            self.log.debug(f\"Found {len(events)} events in Shotgrid.\")\n\n            sg_projects_by_id = {\n                sg_project[\"id\"]: sg_project\n                for sg_project in sg_projects\n            }\n            supported_event_types = []\n            if events:\n                supported_event_types = self._get_supported_event_types()\n\n            for event in events:\n                if not event:\n                    continue\n\n                ignore_event = True\n                last_event_id = event[\"id\"]\n\n                if (\n                    event[\"event_type\"].endswith(\"_Change\")\n                    and (\n                        event[\"attribute_name\"].replace(\"sg_\", \"\")\n                        not in self.custom_sg_attribs\n                    )\n                ):\n                    # events related to custom attributes changes\n                    # check if event was caused by api user\n                    ignore_event = self._is_api_user_event(event)\n\n                    if not ignore_event:\n                        # check meta if in_create is True and ignore\n                        # those events as they are not useful for us\n                        # we are interested only in changes in entities\n                        # not in creation events\n                        ignore_event = event.get(\"meta\", {}).get(\n                            \"in_create\")\n\n                elif event[\"event_type\"] in supported_event_types:\n                    # events related to changes in entities we track\n                    # check if event was caused by api user\n                    ignore_event = self._is_api_user_event(event)\n\n                if ignore_event:\n                    self.log.info(f\"Ignoring event: {event['id']}\")\n                    self.log.debug(f\"event payload: {pformat(event)}\")\n                    continue\n\n                self.send_shotgrid_event_to_ayon(event, sg_projects_by_id)\n\n        except Exception:\n            self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/__main__.html","title":"__main__","text":""},{"location":"autoapi/services/leecher/leecher/listener.html","title":"listener","text":"<p>A Shotgrid Events listener leecher for AYON.</p> <p>This service will continually run and query the EventLogEntry table from Shotgrid and converts them to AYON events, and can be configured from the AYON Addon settings page.</p>"},{"location":"autoapi/services/leecher/leecher/listener.html#services.leecher.leecher.listener.ShotgridListener","title":"<code>ShotgridListener</code>","text":"Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>class ShotgridListener:\n    log = get_logger(__file__)\n\n    def __init__(self):\n        \"\"\"Ensure both AYON and Shotgrid connections are available.\n\n        Set up common needed attributes and handle shotgrid connection\n        closure via signal handlers.\n\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Listener.\")\n\n        try:\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]  # noqa: E501\n                if attr[\"sg\"]\n            }\n            self.custom_sg_attribs = set(self.custom_attribs_map.values())\n\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]  # noqa: E501\n\n            try:\n                self.shotgrid_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.shotgrid_polling_frequency = 10\n\n        except Exception as e:\n            self.log.error(\n                \"Unable to get Addon settings from the server.\")\n            raise e\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        try:\n            validate.validate_sg_url(self.sg_url)\n            self.sg_session = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key\n            )\n            self.sg_session.connect()\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid Instance:\")\n            raise e\n\n        self.sg_current_api_user = self.sg_session.find_one(\n            \"ApiUser\",\n            [[\"firstname\", \"is\", self.sg_script_name]]\n        )\n\n        signal.signal(signal.SIGINT, self._signal_teardown_handler)\n        signal.signal(signal.SIGTERM, self._signal_teardown_handler)\n\n    def _signal_teardown_handler(self, signalnum, frame):\n        self.log.warning(\"Process stop requested. Terminating process.\")\n        self.sg_session.close()\n        self.log.warning(\"Termination finished.\")\n        sys.exit(0)\n\n    def _build_shotgrid_filters(self, sg_projects):\n        \"\"\"Build SG filters for Events query.\n\n        We want to filter out all the Events in the SG database that do not\n        meet our needs:\n            1) Events of Projects with \"AYON Auto Sync\" enabled.\n            2) Events on entities and type for entities we track.\n\n        Args:\n            sg_projects (list): List of Shotgrid Project IDs.\n\n        Returns:\n            filters (list): Filter to apply to the SG query.\n        \"\"\"\n        filters = []\n\n        if not sg_projects:\n            return []\n\n        filters.append([\"project\", \"in\", sg_projects])\n\n        if sg_event_types := self._get_supported_event_types():\n            filters.append([\"event_type\", \"in\", sg_event_types])\n\n        return filters\n\n    def _get_supported_event_types(self) -&gt; list[str]:\n        sg_event_types = []\n        for entity_type in self.sg_enabled_entities:\n            sg_event_types.extend(\n                event_name.format(entity_type) for event_name in SG_EVENT_TYPES\n            )\n        return sg_event_types\n\n    def _find_last_event_id(self):\n        \"\"\"Find the last event ID processed by AYON.\n\n        Info:\n            This function queries the AYON GraphQL API to get the last event\n            processed by AYON. If none is found we return None. Originally we\n            had iterated all the events in the database to find the last one\n            but this was not efficient in cases where huge amounts of events\n            were present in the database.\n\n        Returns:\n            last_event_id (int): The last known Event id.\n        \"\"\"\n        response = ayon_api.query_graphql(\n            LAST_EVENT_QUERY,\n            {\"eventTopic\": \"shotgrid.event\"},\n        )\n        if response.errors:\n            self.log.error(str(response.errors))\n            return None\n        data = response.data[\"data\"]\n        for node in data[\"events\"][\"edges\"]:\n            summary = node[\"node\"][\"summary\"]\n            summary_data = json.loads(summary)\n\n            if summary_data.get(\"sg_event_id\"):\n                return summary_data[\"sg_event_id\"]\n\n            # return it old way\n            # TODO: remove hash in future since it is only used\n            #       as backward compatibility\n            try:\n                return int(node[\"node\"][\"hash\"])\n            except ValueError:\n                # if hash is not an integer this can happen if project sync\n                # is using old topic `shotgrid.event`\n                pass\n\n        return None\n\n    def _get_last_event_processed(self, sg_filters):\n        \"\"\"Find the Event ID for the last SG processed event.\n\n        First attempt to find it via AYON, if none is found we get the last\n        matching event from Shotgrid.\n\n        Returns:\n            last_event_id (int): The last known Event id.\n        \"\"\"\n        last_event_id = self._find_last_event_id()\n        if not last_event_id:\n            last_event = self.sg_session.find_one(\n                \"EventLogEntry\",\n                filters=sg_filters,\n                fields=[\"id\", \"project\"],\n                order=[{\"column\": \"id\", \"direction\": \"desc\"}],\n            )\n            if last_event:\n                last_event_id = last_event[\"id\"]\n\n        return last_event_id\n\n\n    @staticmethod\n    def _get_syncing_projects():\n        \"\"\"Get shotgrid project IDs defined from current AYON projects.\n        \"\"\"\n        all_ay_projects = ayon_api.get_projects()\n        syncing_sg_ids = []\n\n        for ay_project in all_ay_projects:\n            syncing_id = ay_project[\"attrib\"].get(SHOTGRID_ID_ATTRIB)\n            if not syncing_id:\n                continue\n            syncing_sg_ids.append(syncing_id)\n\n        return syncing_sg_ids\n\n\n    def start_listening(self):\n        \"\"\"Main loop querying the Shotgrid database for new events\n\n        Since Shotgrid does not have an event hub per se, we need to query\n        the \"EventLogEntry table and send these as AYON events for processing.\n\n        We try to continue from the last Event processed by the leecher, if\n        none is found we start at the moment in time.\n        \"\"\"\n        self.log.info(\"Start listening for Shotgrid Events...\")\n\n        last_event_id = None\n\n        while True:\n\n            # Ensure we only fetch the event from the syncing projects.\n            # - project has to exists in Flow instance and AYON server\n            # - sg_project in Flow must define sg_ayon_auto_sync field\n            sg_projects = self.sg_session.find(\n                \"Project\", filters=[[\"sg_ayon_auto_sync\", \"is\", True]]\n            )\n            ayon_sg_ids = self._get_syncing_projects()  # project set in AYON server\n            sg_projects = [proj for proj in sg_projects if str(proj[\"id\"]) in ayon_sg_ids]\n            sg_filters = self._build_shotgrid_filters(sg_projects)\n\n            self.log.debug(f\"Last Event ID: {last_event_id}\")\n\n            if not sg_filters:\n                self.log.debug(\n                    f\"Leecher waiting {self.shotgrid_polling_frequency} \"\n                    \"seconds. No projects with AYON Auto Sync found.\"\n                )\n                time.sleep(self.shotgrid_polling_frequency)\n                continue\n\n            if last_event_id is None:\n                last_event_id = self._get_last_event_processed(sg_filters)\n\n            sg_filters.append([\"id\", \"greater_than\", last_event_id])\n\n            self.log.debug(f\"Shotgrid filters: {sg_filters}\")\n\n            try:\n                events = self.sg_session.find(\n                    \"EventLogEntry\",\n                    sg_filters,\n                    SG_EVENT_QUERY_FIELDS,\n                    order=[{\"column\": \"id\", \"direction\": \"asc\"}],\n                    limit=50,\n                )\n                if not events:\n                    self.log.debug(\n                        f\"Leecher waiting {self.shotgrid_polling_frequency} seconds...\"\n                    )\n                    time.sleep(self.shotgrid_polling_frequency)\n                    continue\n\n                self.log.debug(f\"Found {len(events)} events in Shotgrid.\")\n\n                sg_projects_by_id = {\n                    sg_project[\"id\"]: sg_project\n                    for sg_project in sg_projects\n                }\n                supported_event_types = []\n                if events:\n                    supported_event_types = self._get_supported_event_types()\n\n                for event in events:\n                    if not event:\n                        continue\n\n                    ignore_event = True\n                    last_event_id = event[\"id\"]\n\n                    if (\n                        event[\"event_type\"].endswith(\"_Change\")\n                        and (\n                            event[\"attribute_name\"].replace(\"sg_\", \"\")\n                            not in self.custom_sg_attribs\n                        )\n                    ):\n                        # events related to custom attributes changes\n                        # check if event was caused by api user\n                        ignore_event = self._is_api_user_event(event)\n\n                        if not ignore_event:\n                            # check meta if in_create is True and ignore\n                            # those events as they are not useful for us\n                            # we are interested only in changes in entities\n                            # not in creation events\n                            ignore_event = event.get(\"meta\", {}).get(\n                                \"in_create\")\n\n                    elif event[\"event_type\"] in supported_event_types:\n                        # events related to changes in entities we track\n                        # check if event was caused by api user\n                        ignore_event = self._is_api_user_event(event)\n\n                    if ignore_event:\n                        self.log.info(f\"Ignoring event: {event['id']}\")\n                        self.log.debug(f\"event payload: {pformat(event)}\")\n                        continue\n\n                    self.send_shotgrid_event_to_ayon(event, sg_projects_by_id)\n\n            except Exception:\n                self.log.error(traceback.format_exc())\n\n    def _is_api_user_event(self, event: dict[str, Any]) -&gt; bool:\n        \"\"\"Check if the event was caused by our API user.\n\n        Args:\n            event (dict): The Shotgrid Event data.\n\n        Returns:\n            bool: True if the event was caused by our API user.\n        \"\"\"\n        # Ignore events that are coming from ourselves.\n        # Other ApiUser generated events are OK.\n        if (\n            event.get(\"user\", {}).get(\"type\") == \"ApiUser\"\n            and event.get(\"user\", {}).get(\"id\") == self.sg_current_api_user[\"id\"]\n        ):\n            self.log.debug(\n                \"Ignore event from the AYON&lt;-&gt;SG service ApiUser. \"\n            )\n            return True\n\n    def send_shotgrid_event_to_ayon(\n        self, payload: dict[str, Any], sg_projects_by_id: dict[str, Any]\n    ):\n        \"\"\"Send the Shotgrid event as an AYON event.\n\n        Args:\n            payload (dict): The Event data.\n        \"\"\"\n        payload_id = payload[\"id\"]\n        payload_type = payload[\"event_type\"]\n        description = f\"Leeched '{payload_type}' event  with ID '{payload_id}'\"\n        user_name = payload.get(\"user\", {}).get(\"name\", \"Undefined\")\n\n        if user_name:\n            description = (\n                f\"Leeched '{payload_type}' event  with ID '{payload_id}' \"\n                f\"by '{user_name}'\"\n            )\n\n        # fix non serializable datetime\n        payload[\"created_at\"] = payload[\"created_at\"].isoformat()\n\n        payload_meta = payload.get(\"meta\", {})\n        if payload_meta.get(\"entity_type\", \"Undefined\") == \"Project\":\n            project_name = payload.get(\"entity\", {}).get(\"name\", \"Undefined\")\n            project_id = payload.get(\"entity\", {}).get(\"id\", \"Undefined\")\n        else:\n            project_name = payload.get(\"project\", {}).get(\"name\", \"Undefined\")\n            project_id = payload.get(\"project\", {}).get(\"id\", \"Undefined\")\n\n        sg_project = sg_projects_by_id[project_id]\n        new_event_hash = get_event_hash(\"shotgrid.event\", payload[\"id\"])\n\n        ayon_api.dispatch_event(\n            \"shotgrid.event\",\n            sender=socket.gethostname(),\n            event_hash=new_event_hash,\n            project_name=project_name,\n            username=user_name,\n            description=description,\n            summary={\n                \"sg_event_id\": payload_id,\n            },\n            payload={\n                \"message\": json.dumps(payload, indent=2),\n                \"action\": \"shotgrid-event\",\n                \"user_name\": user_name,\n                \"project_name\": project_name,\n                \"project_code\": sg_project.get(self.sg_project_code_field),\n                \"project_code_field\": self.sg_project_code_field,\n                \"sg_payload\": payload,\n            },\n        )\n\n        self.log.debug(f\"Dispatched AYON event with payload:{payload}\")\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/listener.html#services.leecher.leecher.listener.ShotgridListener.__init__","title":"<code>__init__()</code>","text":"<p>Ensure both AYON and Shotgrid connections are available.</p> <p>Set up common needed attributes and handle shotgrid connection closure via signal handlers.</p> Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def __init__(self):\n    \"\"\"Ensure both AYON and Shotgrid connections are available.\n\n    Set up common needed attributes and handle shotgrid connection\n    closure via signal handlers.\n\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Listener.\")\n\n    try:\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]  # noqa: E501\n            if attr[\"sg\"]\n        }\n        self.custom_sg_attribs = set(self.custom_attribs_map.values())\n\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]  # noqa: E501\n\n        try:\n            self.shotgrid_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.shotgrid_polling_frequency = 10\n\n    except Exception as e:\n        self.log.error(\n            \"Unable to get Addon settings from the server.\")\n        raise e\n\n    # SSL validation\n    if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n        shotgun_api3.NO_SSL_VALIDATION = True\n        self.log.info(\"SSL validation is disabled.\")\n\n    try:\n        validate.validate_sg_url(self.sg_url)\n        self.sg_session = shotgun_api3.Shotgun(\n            self.sg_url,\n            script_name=self.sg_script_name,\n            api_key=self.sg_api_key\n        )\n        self.sg_session.connect()\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid Instance:\")\n        raise e\n\n    self.sg_current_api_user = self.sg_session.find_one(\n        \"ApiUser\",\n        [[\"firstname\", \"is\", self.sg_script_name]]\n    )\n\n    signal.signal(signal.SIGINT, self._signal_teardown_handler)\n    signal.signal(signal.SIGTERM, self._signal_teardown_handler)\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/listener.html#services.leecher.leecher.listener.ShotgridListener.send_shotgrid_event_to_ayon","title":"<code>send_shotgrid_event_to_ayon(payload, sg_projects_by_id)</code>","text":"<p>Send the Shotgrid event as an AYON event.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict</code> <p>The Event data.</p> required Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def send_shotgrid_event_to_ayon(\n    self, payload: dict[str, Any], sg_projects_by_id: dict[str, Any]\n):\n    \"\"\"Send the Shotgrid event as an AYON event.\n\n    Args:\n        payload (dict): The Event data.\n    \"\"\"\n    payload_id = payload[\"id\"]\n    payload_type = payload[\"event_type\"]\n    description = f\"Leeched '{payload_type}' event  with ID '{payload_id}'\"\n    user_name = payload.get(\"user\", {}).get(\"name\", \"Undefined\")\n\n    if user_name:\n        description = (\n            f\"Leeched '{payload_type}' event  with ID '{payload_id}' \"\n            f\"by '{user_name}'\"\n        )\n\n    # fix non serializable datetime\n    payload[\"created_at\"] = payload[\"created_at\"].isoformat()\n\n    payload_meta = payload.get(\"meta\", {})\n    if payload_meta.get(\"entity_type\", \"Undefined\") == \"Project\":\n        project_name = payload.get(\"entity\", {}).get(\"name\", \"Undefined\")\n        project_id = payload.get(\"entity\", {}).get(\"id\", \"Undefined\")\n    else:\n        project_name = payload.get(\"project\", {}).get(\"name\", \"Undefined\")\n        project_id = payload.get(\"project\", {}).get(\"id\", \"Undefined\")\n\n    sg_project = sg_projects_by_id[project_id]\n    new_event_hash = get_event_hash(\"shotgrid.event\", payload[\"id\"])\n\n    ayon_api.dispatch_event(\n        \"shotgrid.event\",\n        sender=socket.gethostname(),\n        event_hash=new_event_hash,\n        project_name=project_name,\n        username=user_name,\n        description=description,\n        summary={\n            \"sg_event_id\": payload_id,\n        },\n        payload={\n            \"message\": json.dumps(payload, indent=2),\n            \"action\": \"shotgrid-event\",\n            \"user_name\": user_name,\n            \"project_name\": project_name,\n            \"project_code\": sg_project.get(self.sg_project_code_field),\n            \"project_code_field\": self.sg_project_code_field,\n            \"sg_payload\": payload,\n        },\n    )\n\n    self.log.debug(f\"Dispatched AYON event with payload:{payload}\")\n</code></pre>"},{"location":"autoapi/services/leecher/leecher/listener.html#services.leecher.leecher.listener.ShotgridListener.start_listening","title":"<code>start_listening()</code>","text":"<p>Main loop querying the Shotgrid database for new events</p> <p>Since Shotgrid does not have an event hub per se, we need to query the \"EventLogEntry table and send these as AYON events for processing.</p> <p>We try to continue from the last Event processed by the leecher, if none is found we start at the moment in time.</p> Source code in <code>services/leecher/leecher/listener.py</code> <pre><code>def start_listening(self):\n    \"\"\"Main loop querying the Shotgrid database for new events\n\n    Since Shotgrid does not have an event hub per se, we need to query\n    the \"EventLogEntry table and send these as AYON events for processing.\n\n    We try to continue from the last Event processed by the leecher, if\n    none is found we start at the moment in time.\n    \"\"\"\n    self.log.info(\"Start listening for Shotgrid Events...\")\n\n    last_event_id = None\n\n    while True:\n\n        # Ensure we only fetch the event from the syncing projects.\n        # - project has to exists in Flow instance and AYON server\n        # - sg_project in Flow must define sg_ayon_auto_sync field\n        sg_projects = self.sg_session.find(\n            \"Project\", filters=[[\"sg_ayon_auto_sync\", \"is\", True]]\n        )\n        ayon_sg_ids = self._get_syncing_projects()  # project set in AYON server\n        sg_projects = [proj for proj in sg_projects if str(proj[\"id\"]) in ayon_sg_ids]\n        sg_filters = self._build_shotgrid_filters(sg_projects)\n\n        self.log.debug(f\"Last Event ID: {last_event_id}\")\n\n        if not sg_filters:\n            self.log.debug(\n                f\"Leecher waiting {self.shotgrid_polling_frequency} \"\n                \"seconds. No projects with AYON Auto Sync found.\"\n            )\n            time.sleep(self.shotgrid_polling_frequency)\n            continue\n\n        if last_event_id is None:\n            last_event_id = self._get_last_event_processed(sg_filters)\n\n        sg_filters.append([\"id\", \"greater_than\", last_event_id])\n\n        self.log.debug(f\"Shotgrid filters: {sg_filters}\")\n\n        try:\n            events = self.sg_session.find(\n                \"EventLogEntry\",\n                sg_filters,\n                SG_EVENT_QUERY_FIELDS,\n                order=[{\"column\": \"id\", \"direction\": \"asc\"}],\n                limit=50,\n            )\n            if not events:\n                self.log.debug(\n                    f\"Leecher waiting {self.shotgrid_polling_frequency} seconds...\"\n                )\n                time.sleep(self.shotgrid_polling_frequency)\n                continue\n\n            self.log.debug(f\"Found {len(events)} events in Shotgrid.\")\n\n            sg_projects_by_id = {\n                sg_project[\"id\"]: sg_project\n                for sg_project in sg_projects\n            }\n            supported_event_types = []\n            if events:\n                supported_event_types = self._get_supported_event_types()\n\n            for event in events:\n                if not event:\n                    continue\n\n                ignore_event = True\n                last_event_id = event[\"id\"]\n\n                if (\n                    event[\"event_type\"].endswith(\"_Change\")\n                    and (\n                        event[\"attribute_name\"].replace(\"sg_\", \"\")\n                        not in self.custom_sg_attribs\n                    )\n                ):\n                    # events related to custom attributes changes\n                    # check if event was caused by api user\n                    ignore_event = self._is_api_user_event(event)\n\n                    if not ignore_event:\n                        # check meta if in_create is True and ignore\n                        # those events as they are not useful for us\n                        # we are interested only in changes in entities\n                        # not in creation events\n                        ignore_event = event.get(\"meta\", {}).get(\n                            \"in_create\")\n\n                elif event[\"event_type\"] in supported_event_types:\n                    # events related to changes in entities we track\n                    # check if event was caused by api user\n                    ignore_event = self._is_api_user_event(event)\n\n                if ignore_event:\n                    self.log.info(f\"Ignoring event: {event['id']}\")\n                    self.log.debug(f\"event payload: {pformat(event)}\")\n                    continue\n\n                self.send_shotgrid_event_to_ayon(event, sg_projects_by_id)\n\n        except Exception:\n            self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/processor/processor/index.html","title":"processor","text":""},{"location":"autoapi/services/processor/processor/index.html#services.processor.processor.ShotgridProcessor","title":"<code>ShotgridProcessor</code>","text":"Source code in <code>services/processor/processor/processor.py</code> <pre><code>class ShotgridProcessor:\n    _sg: shotgun_api3.Shotgun = None\n    _RETRIGGERED_TOPIC = \"shotgrid.event.retriggered\"\n    log = get_logger(__file__)\n\n    def __init__(self):\n        \"\"\"A class to process AYON events of `shotgrid.event` topic.\n\n        These events contain an \"action\" key in the payload, which is\n        used to match to any handler that has REGISTER_EVENT_TYPE attribute.\n\n        For example, the `handlers/project_sync.py` will be triggered whenever\n        an event has the action \"create-project\", since it has the following\n        constant declared `REGISTER_EVENT_TYPE = [\"create-project\"]`.\n\n        New handlers can be added to the `handlers` directory and as long as they\n        have `REGISTER_EVENT_TYPE` declared, if an event with said action is pending,\n        it will be triggered, this directory is traversed upon initialization.\n\n        In order for this service to work, the settings for the Addon have to be\n        populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Processor.\")\n\n        self.handlers_map = None\n\n        try:\n            ayon_api.init_service()\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            try:\n                self.sg_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.sg_polling_frequency = 10\n\n            # SSL validation\n            if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n                shotgun_api3.NO_SSL_VALIDATION = True\n                self.log.info(\"SSL validation is disabled.\")\n\n            sg_connection = self.get_sg_connection()\n\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n                if attr[\"sg\"]\n            }\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.custom_attribs_types = {\n                attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n                if attr[\"sg\"]\n            }\n            self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]\n\n            if not all([self.sg_url, self.sg_script_name, self.sg_api_key]):\n                msg = \"Addon is missing settings, check \" \\\n                      \"'AYON &gt; Studio Settings &gt; Shotgrid' and fill out all the fields.\"\n                self.log.error(msg)\n                raise ValueError(msg)\n\n        except Exception as e:\n            self.log.error(\"Unable to get Addon settings from the server.\")\n            self.log.error(traceback.format_exc())\n            raise e\n\n        # Validation\n        try:\n            validate.validate_projects_sync(\n                sg_connection,\n                self.sg_enabled_entities,\n                log=self.log\n            )\n            validate.validate_custom_attribs_map(\n                sg_connection,\n                self.settings[\"compatibility_settings\"][\"custom_attribs_map\"],\n                log=self.log,\n            )\n\n        except ValueError as error:\n            self.log.error(\n                \"The sync service cannot start properly due to invalid \"\n                \"configuration. Adjust it and restart the services.\"\n            )\n            self.log.error(error)\n            raise SystemExit from error\n\n        self.handlers_map = self._get_handlers()\n        if not self.handlers_map:\n            self.log.error(\"No handlers found for the processor, aborting.\")\n\n    def _get_handlers(self):\n        \"\"\" Import the handlers found in the `handlers` directory.\n\n        Scan the `handlers` directory and build a dictionary with\n        each `REGISTER_EVENT_TYPE` found in importable Python files,\n        wich get stored as a list, since several handlers could be\n        triggered by the same event type.\n        \"\"\"\n        handlers_dir = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"handlers\"\n        )\n        handlers_dict = {}\n\n        for root, handlers_directories, handler_files in os.walk(handlers_dir):\n            for handler in handler_files:\n                if handler.endswith(\".py\") and not handler.startswith((\".\", \"_\")):\n                    module_name = str(handler.replace(\".py\", \"\"))\n                    module_obj = types.ModuleType(module_name)\n\n                    module_loader = importlib.machinery.SourceFileLoader(\n                        module_name,\n                        os.path.join(root, handler)\n                    )\n                    module_loader.exec_module(module_obj)\n                    register_event_types = module_obj.REGISTER_EVENT_TYPE\n\n                    for event_type in register_event_types:\n                        handlers_dict.setdefault(\n                            event_type, []\n                        ).append(module_obj)\n\n        return handlers_dict\n\n    def get_sg_connection(self):\n        \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n        Start connections to the APIs and catch any possible error, we abort if\n        this steps fails for any reason.\n        \"\"\"\n\n        if self._sg is None:\n            try:\n                validate.validate_sg_url(self.sg_url)\n                self._sg = shotgun_api3.Shotgun(\n                    self.sg_url,\n                    script_name=self.sg_script_name,\n                    api_key=self.sg_api_key\n                )\n            except Exception as e:\n                self.log.error(\"Unable to create Shotgrid Session.\")\n                raise e\n\n        try:\n            self._sg.connect()\n\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid.\")\n            raise e\n\n        return self._sg\n\n    def start_processing(self):\n        \"\"\"Enroll AYON events of topic `shotgrid.event`\n\n        We query AYON Events in search of unfinished `shotgrid.event` events,\n        these events must an `action` key in their `payload` in order to be\n        processed, that `action` is the one used to match with a `handler`'s\n        `REGISTER_EVENT_TYPE` attribute.\n\n        For example, an event that has `{\"action\": \"create-project\"}` payload,\n        will trigger the `handlers/project_sync.py` since that one has the\n        attribute REGISTER_EVENT_TYPE = [\"create-project\"]\n        \"\"\"\n        while True:\n            try:\n                event = ayon_api.enroll_event_job(\n                    \"shotgrid.event*\",\n                    \"shotgrid.proc\",\n                    socket.gethostname(),\n                    description=\"Enrolling to any `shotgrid.event` Event...\",\n                    max_retries=2,\n                    sequential=True,\n                )\n\n                if not event:\n                    time.sleep(self.sg_polling_frequency)\n                    continue\n\n                # Get source event because it is having payload to process\n                source_event = ayon_api.get_event(event[\"dependsOn\"])\n                payload = source_event[\"payload\"]\n                summary = source_event[\"summary\"]\n\n                if source_sg_event_id := summary.get(\"sg_event_id\"):\n                    event_id_text = (\n                        f\". Shotgrid Event ID: {source_sg_event_id}.\"\n                    )\n                else:\n                    event_id_text = \".\"\n\n                if not payload:\n                    # TODO: maybe remove this - unrealistic scenario\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=(\n                            f\"Unable to process the event{event_id_text} &gt; \"\n                            f\"&lt;{source_event['id']}&gt; since it has no \"\n                            \"Shotgrid Payload!\"\n                        ),\n                        status=\"finished\"\n                    )\n                    continue\n\n                failed = False\n                for handler in self.handlers_map.get(payload[\"action\"], []):\n                    # If theres any handler \"subscribed\" to this event type..\n                    try:\n                        self.log.info(f\"Running the Handler {handler}\")\n                        ayon_api.update_event(\n                            event[\"id\"],\n                            description=(\n                                \"Processing event with Handler \"\n                                f\"{payload['action']}...\"\n                            ),\n                            status=\"in_progress\",\n                        )\n                        self.log.debug(\n                            f\"processing event {pformat(payload)}\")\n                        handler.process_event(\n                            self,\n                            payload,\n                        )\n                    except Exception:\n                        failed = True\n                        self.log.error(\n                            f\"Unable to process handler {handler.__name__}\",\n                            exc_info=True\n                        )\n                        ayon_api.update_event(\n                            event[\"id\"],\n                            status=\"failed\",\n                            description=(\n                                \"An error occurred while processing\"\n                                f\"{event_id_text}\"\n                            ),\n                            payload={\n                                \"message\": traceback.format_exc(),\n                            },\n                        )\n\n                if not failed:\n                    self.log.info(\n                        \"Event has been processed... setting to finished!\")\n\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=f\"Event processed successfully{event_id_text}\",\n                        status=\"finished\",\n                    )\n\n            except Exception:\n                self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/processor/processor/index.html#services.processor.processor.ShotgridProcessor.__init__","title":"<code>__init__()</code>","text":"<p>A class to process AYON events of <code>shotgrid.event</code> topic.</p> <p>These events contain an \"action\" key in the payload, which is used to match to any handler that has REGISTER_EVENT_TYPE attribute.</p> <p>For example, the <code>handlers/project_sync.py</code> will be triggered whenever an event has the action \"create-project\", since it has the following constant declared <code>REGISTER_EVENT_TYPE = [\"create-project\"]</code>.</p> <p>New handlers can be added to the <code>handlers</code> directory and as long as they have <code>REGISTER_EVENT_TYPE</code> declared, if an event with said action is pending, it will be triggered, this directory is traversed upon initialization.</p> <p>In order for this service to work, the settings for the Addon have to be populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def __init__(self):\n    \"\"\"A class to process AYON events of `shotgrid.event` topic.\n\n    These events contain an \"action\" key in the payload, which is\n    used to match to any handler that has REGISTER_EVENT_TYPE attribute.\n\n    For example, the `handlers/project_sync.py` will be triggered whenever\n    an event has the action \"create-project\", since it has the following\n    constant declared `REGISTER_EVENT_TYPE = [\"create-project\"]`.\n\n    New handlers can be added to the `handlers` directory and as long as they\n    have `REGISTER_EVENT_TYPE` declared, if an event with said action is pending,\n    it will be triggered, this directory is traversed upon initialization.\n\n    In order for this service to work, the settings for the Addon have to be\n    populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Processor.\")\n\n    self.handlers_map = None\n\n    try:\n        ayon_api.init_service()\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        try:\n            self.sg_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.sg_polling_frequency = 10\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        sg_connection = self.get_sg_connection()\n\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n            if attr[\"sg\"]\n        }\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.custom_attribs_types = {\n            attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n            if attr[\"sg\"]\n        }\n        self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]\n\n        if not all([self.sg_url, self.sg_script_name, self.sg_api_key]):\n            msg = \"Addon is missing settings, check \" \\\n                  \"'AYON &gt; Studio Settings &gt; Shotgrid' and fill out all the fields.\"\n            self.log.error(msg)\n            raise ValueError(msg)\n\n    except Exception as e:\n        self.log.error(\"Unable to get Addon settings from the server.\")\n        self.log.error(traceback.format_exc())\n        raise e\n\n    # Validation\n    try:\n        validate.validate_projects_sync(\n            sg_connection,\n            self.sg_enabled_entities,\n            log=self.log\n        )\n        validate.validate_custom_attribs_map(\n            sg_connection,\n            self.settings[\"compatibility_settings\"][\"custom_attribs_map\"],\n            log=self.log,\n        )\n\n    except ValueError as error:\n        self.log.error(\n            \"The sync service cannot start properly due to invalid \"\n            \"configuration. Adjust it and restart the services.\"\n        )\n        self.log.error(error)\n        raise SystemExit from error\n\n    self.handlers_map = self._get_handlers()\n    if not self.handlers_map:\n        self.log.error(\"No handlers found for the processor, aborting.\")\n</code></pre>"},{"location":"autoapi/services/processor/processor/index.html#services.processor.processor.ShotgridProcessor.get_sg_connection","title":"<code>get_sg_connection()</code>","text":"<p>Ensure we can talk to AYON and Shotgrid.</p> <p>Start connections to the APIs and catch any possible error, we abort if this steps fails for any reason.</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def get_sg_connection(self):\n    \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n    Start connections to the APIs and catch any possible error, we abort if\n    this steps fails for any reason.\n    \"\"\"\n\n    if self._sg is None:\n        try:\n            validate.validate_sg_url(self.sg_url)\n            self._sg = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key\n            )\n        except Exception as e:\n            self.log.error(\"Unable to create Shotgrid Session.\")\n            raise e\n\n    try:\n        self._sg.connect()\n\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid.\")\n        raise e\n\n    return self._sg\n</code></pre>"},{"location":"autoapi/services/processor/processor/index.html#services.processor.processor.ShotgridProcessor.start_processing","title":"<code>start_processing()</code>","text":"<p>Enroll AYON events of topic <code>shotgrid.event</code></p> <p>We query AYON Events in search of unfinished <code>shotgrid.event</code> events, these events must an <code>action</code> key in their <code>payload</code> in order to be processed, that <code>action</code> is the one used to match with a <code>handler</code>'s <code>REGISTER_EVENT_TYPE</code> attribute.</p> <p>For example, an event that has <code>{\"action\": \"create-project\"}</code> payload, will trigger the <code>handlers/project_sync.py</code> since that one has the attribute REGISTER_EVENT_TYPE = [\"create-project\"]</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def start_processing(self):\n    \"\"\"Enroll AYON events of topic `shotgrid.event`\n\n    We query AYON Events in search of unfinished `shotgrid.event` events,\n    these events must an `action` key in their `payload` in order to be\n    processed, that `action` is the one used to match with a `handler`'s\n    `REGISTER_EVENT_TYPE` attribute.\n\n    For example, an event that has `{\"action\": \"create-project\"}` payload,\n    will trigger the `handlers/project_sync.py` since that one has the\n    attribute REGISTER_EVENT_TYPE = [\"create-project\"]\n    \"\"\"\n    while True:\n        try:\n            event = ayon_api.enroll_event_job(\n                \"shotgrid.event*\",\n                \"shotgrid.proc\",\n                socket.gethostname(),\n                description=\"Enrolling to any `shotgrid.event` Event...\",\n                max_retries=2,\n                sequential=True,\n            )\n\n            if not event:\n                time.sleep(self.sg_polling_frequency)\n                continue\n\n            # Get source event because it is having payload to process\n            source_event = ayon_api.get_event(event[\"dependsOn\"])\n            payload = source_event[\"payload\"]\n            summary = source_event[\"summary\"]\n\n            if source_sg_event_id := summary.get(\"sg_event_id\"):\n                event_id_text = (\n                    f\". Shotgrid Event ID: {source_sg_event_id}.\"\n                )\n            else:\n                event_id_text = \".\"\n\n            if not payload:\n                # TODO: maybe remove this - unrealistic scenario\n                ayon_api.update_event(\n                    event[\"id\"],\n                    description=(\n                        f\"Unable to process the event{event_id_text} &gt; \"\n                        f\"&lt;{source_event['id']}&gt; since it has no \"\n                        \"Shotgrid Payload!\"\n                    ),\n                    status=\"finished\"\n                )\n                continue\n\n            failed = False\n            for handler in self.handlers_map.get(payload[\"action\"], []):\n                # If theres any handler \"subscribed\" to this event type..\n                try:\n                    self.log.info(f\"Running the Handler {handler}\")\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=(\n                            \"Processing event with Handler \"\n                            f\"{payload['action']}...\"\n                        ),\n                        status=\"in_progress\",\n                    )\n                    self.log.debug(\n                        f\"processing event {pformat(payload)}\")\n                    handler.process_event(\n                        self,\n                        payload,\n                    )\n                except Exception:\n                    failed = True\n                    self.log.error(\n                        f\"Unable to process handler {handler.__name__}\",\n                        exc_info=True\n                    )\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        status=\"failed\",\n                        description=(\n                            \"An error occurred while processing\"\n                            f\"{event_id_text}\"\n                        ),\n                        payload={\n                            \"message\": traceback.format_exc(),\n                        },\n                    )\n\n            if not failed:\n                self.log.info(\n                    \"Event has been processed... setting to finished!\")\n\n                ayon_api.update_event(\n                    event[\"id\"],\n                    description=f\"Event processed successfully{event_id_text}\",\n                    status=\"finished\",\n                )\n\n        except Exception:\n            self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/processor/processor/__main__.html","title":"__main__","text":""},{"location":"autoapi/services/processor/processor/processor.html","title":"processor","text":"<p>A Shotgrid Events listener processor for AYON.</p> <p>This service will continually run and query the AYON Events Server in orther to entroll the events of topic <code>shotgrid.leech</code> to perform processing of Shotgrid related events.</p>"},{"location":"autoapi/services/processor/processor/processor.html#services.processor.processor.processor.ShotgridProcessor","title":"<code>ShotgridProcessor</code>","text":"Source code in <code>services/processor/processor/processor.py</code> <pre><code>class ShotgridProcessor:\n    _sg: shotgun_api3.Shotgun = None\n    _RETRIGGERED_TOPIC = \"shotgrid.event.retriggered\"\n    log = get_logger(__file__)\n\n    def __init__(self):\n        \"\"\"A class to process AYON events of `shotgrid.event` topic.\n\n        These events contain an \"action\" key in the payload, which is\n        used to match to any handler that has REGISTER_EVENT_TYPE attribute.\n\n        For example, the `handlers/project_sync.py` will be triggered whenever\n        an event has the action \"create-project\", since it has the following\n        constant declared `REGISTER_EVENT_TYPE = [\"create-project\"]`.\n\n        New handlers can be added to the `handlers` directory and as long as they\n        have `REGISTER_EVENT_TYPE` declared, if an event with said action is pending,\n        it will be triggered, this directory is traversed upon initialization.\n\n        In order for this service to work, the settings for the Addon have to be\n        populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Processor.\")\n\n        self.handlers_map = None\n\n        try:\n            ayon_api.init_service()\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            try:\n                self.sg_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.sg_polling_frequency = 10\n\n            # SSL validation\n            if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n                shotgun_api3.NO_SSL_VALIDATION = True\n                self.log.info(\"SSL validation is disabled.\")\n\n            sg_connection = self.get_sg_connection()\n\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n                if attr[\"sg\"]\n            }\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.custom_attribs_types = {\n                attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n                for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n                if attr[\"sg\"]\n            }\n            self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]\n\n            if not all([self.sg_url, self.sg_script_name, self.sg_api_key]):\n                msg = \"Addon is missing settings, check \" \\\n                      \"'AYON &gt; Studio Settings &gt; Shotgrid' and fill out all the fields.\"\n                self.log.error(msg)\n                raise ValueError(msg)\n\n        except Exception as e:\n            self.log.error(\"Unable to get Addon settings from the server.\")\n            self.log.error(traceback.format_exc())\n            raise e\n\n        # Validation\n        try:\n            validate.validate_projects_sync(\n                sg_connection,\n                self.sg_enabled_entities,\n                log=self.log\n            )\n            validate.validate_custom_attribs_map(\n                sg_connection,\n                self.settings[\"compatibility_settings\"][\"custom_attribs_map\"],\n                log=self.log,\n            )\n\n        except ValueError as error:\n            self.log.error(\n                \"The sync service cannot start properly due to invalid \"\n                \"configuration. Adjust it and restart the services.\"\n            )\n            self.log.error(error)\n            raise SystemExit from error\n\n        self.handlers_map = self._get_handlers()\n        if not self.handlers_map:\n            self.log.error(\"No handlers found for the processor, aborting.\")\n\n    def _get_handlers(self):\n        \"\"\" Import the handlers found in the `handlers` directory.\n\n        Scan the `handlers` directory and build a dictionary with\n        each `REGISTER_EVENT_TYPE` found in importable Python files,\n        wich get stored as a list, since several handlers could be\n        triggered by the same event type.\n        \"\"\"\n        handlers_dir = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"handlers\"\n        )\n        handlers_dict = {}\n\n        for root, handlers_directories, handler_files in os.walk(handlers_dir):\n            for handler in handler_files:\n                if handler.endswith(\".py\") and not handler.startswith((\".\", \"_\")):\n                    module_name = str(handler.replace(\".py\", \"\"))\n                    module_obj = types.ModuleType(module_name)\n\n                    module_loader = importlib.machinery.SourceFileLoader(\n                        module_name,\n                        os.path.join(root, handler)\n                    )\n                    module_loader.exec_module(module_obj)\n                    register_event_types = module_obj.REGISTER_EVENT_TYPE\n\n                    for event_type in register_event_types:\n                        handlers_dict.setdefault(\n                            event_type, []\n                        ).append(module_obj)\n\n        return handlers_dict\n\n    def get_sg_connection(self):\n        \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n        Start connections to the APIs and catch any possible error, we abort if\n        this steps fails for any reason.\n        \"\"\"\n\n        if self._sg is None:\n            try:\n                validate.validate_sg_url(self.sg_url)\n                self._sg = shotgun_api3.Shotgun(\n                    self.sg_url,\n                    script_name=self.sg_script_name,\n                    api_key=self.sg_api_key\n                )\n            except Exception as e:\n                self.log.error(\"Unable to create Shotgrid Session.\")\n                raise e\n\n        try:\n            self._sg.connect()\n\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid.\")\n            raise e\n\n        return self._sg\n\n    def start_processing(self):\n        \"\"\"Enroll AYON events of topic `shotgrid.event`\n\n        We query AYON Events in search of unfinished `shotgrid.event` events,\n        these events must an `action` key in their `payload` in order to be\n        processed, that `action` is the one used to match with a `handler`'s\n        `REGISTER_EVENT_TYPE` attribute.\n\n        For example, an event that has `{\"action\": \"create-project\"}` payload,\n        will trigger the `handlers/project_sync.py` since that one has the\n        attribute REGISTER_EVENT_TYPE = [\"create-project\"]\n        \"\"\"\n        while True:\n            try:\n                event = ayon_api.enroll_event_job(\n                    \"shotgrid.event*\",\n                    \"shotgrid.proc\",\n                    socket.gethostname(),\n                    description=\"Enrolling to any `shotgrid.event` Event...\",\n                    max_retries=2,\n                    sequential=True,\n                )\n\n                if not event:\n                    time.sleep(self.sg_polling_frequency)\n                    continue\n\n                # Get source event because it is having payload to process\n                source_event = ayon_api.get_event(event[\"dependsOn\"])\n                payload = source_event[\"payload\"]\n                summary = source_event[\"summary\"]\n\n                if source_sg_event_id := summary.get(\"sg_event_id\"):\n                    event_id_text = (\n                        f\". Shotgrid Event ID: {source_sg_event_id}.\"\n                    )\n                else:\n                    event_id_text = \".\"\n\n                if not payload:\n                    # TODO: maybe remove this - unrealistic scenario\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=(\n                            f\"Unable to process the event{event_id_text} &gt; \"\n                            f\"&lt;{source_event['id']}&gt; since it has no \"\n                            \"Shotgrid Payload!\"\n                        ),\n                        status=\"finished\"\n                    )\n                    continue\n\n                failed = False\n                for handler in self.handlers_map.get(payload[\"action\"], []):\n                    # If theres any handler \"subscribed\" to this event type..\n                    try:\n                        self.log.info(f\"Running the Handler {handler}\")\n                        ayon_api.update_event(\n                            event[\"id\"],\n                            description=(\n                                \"Processing event with Handler \"\n                                f\"{payload['action']}...\"\n                            ),\n                            status=\"in_progress\",\n                        )\n                        self.log.debug(\n                            f\"processing event {pformat(payload)}\")\n                        handler.process_event(\n                            self,\n                            payload,\n                        )\n                    except Exception:\n                        failed = True\n                        self.log.error(\n                            f\"Unable to process handler {handler.__name__}\",\n                            exc_info=True\n                        )\n                        ayon_api.update_event(\n                            event[\"id\"],\n                            status=\"failed\",\n                            description=(\n                                \"An error occurred while processing\"\n                                f\"{event_id_text}\"\n                            ),\n                            payload={\n                                \"message\": traceback.format_exc(),\n                            },\n                        )\n\n                if not failed:\n                    self.log.info(\n                        \"Event has been processed... setting to finished!\")\n\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=f\"Event processed successfully{event_id_text}\",\n                        status=\"finished\",\n                    )\n\n            except Exception:\n                self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/processor/processor/processor.html#services.processor.processor.processor.ShotgridProcessor.__init__","title":"<code>__init__()</code>","text":"<p>A class to process AYON events of <code>shotgrid.event</code> topic.</p> <p>These events contain an \"action\" key in the payload, which is used to match to any handler that has REGISTER_EVENT_TYPE attribute.</p> <p>For example, the <code>handlers/project_sync.py</code> will be triggered whenever an event has the action \"create-project\", since it has the following constant declared <code>REGISTER_EVENT_TYPE = [\"create-project\"]</code>.</p> <p>New handlers can be added to the <code>handlers</code> directory and as long as they have <code>REGISTER_EVENT_TYPE</code> declared, if an event with said action is pending, it will be triggered, this directory is traversed upon initialization.</p> <p>In order for this service to work, the settings for the Addon have to be populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def __init__(self):\n    \"\"\"A class to process AYON events of `shotgrid.event` topic.\n\n    These events contain an \"action\" key in the payload, which is\n    used to match to any handler that has REGISTER_EVENT_TYPE attribute.\n\n    For example, the `handlers/project_sync.py` will be triggered whenever\n    an event has the action \"create-project\", since it has the following\n    constant declared `REGISTER_EVENT_TYPE = [\"create-project\"]`.\n\n    New handlers can be added to the `handlers` directory and as long as they\n    have `REGISTER_EVENT_TYPE` declared, if an event with said action is pending,\n    it will be triggered, this directory is traversed upon initialization.\n\n    In order for this service to work, the settings for the Addon have to be\n    populated in 'AYON &gt; Studio Settings &gt; Shotgrid'.\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Processor.\")\n\n    self.handlers_map = None\n\n    try:\n        ayon_api.init_service()\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        try:\n            self.sg_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.sg_polling_frequency = 10\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        sg_connection = self.get_sg_connection()\n\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n            if attr[\"sg\"]\n        }\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.custom_attribs_types = {\n            attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n            for attr in self.settings[\"compatibility_settings\"][\"custom_attribs_map\"]\n            if attr[\"sg\"]\n        }\n        self.sg_enabled_entities = self.settings[\"compatibility_settings\"][\"shotgrid_enabled_entities\"]\n\n        if not all([self.sg_url, self.sg_script_name, self.sg_api_key]):\n            msg = \"Addon is missing settings, check \" \\\n                  \"'AYON &gt; Studio Settings &gt; Shotgrid' and fill out all the fields.\"\n            self.log.error(msg)\n            raise ValueError(msg)\n\n    except Exception as e:\n        self.log.error(\"Unable to get Addon settings from the server.\")\n        self.log.error(traceback.format_exc())\n        raise e\n\n    # Validation\n    try:\n        validate.validate_projects_sync(\n            sg_connection,\n            self.sg_enabled_entities,\n            log=self.log\n        )\n        validate.validate_custom_attribs_map(\n            sg_connection,\n            self.settings[\"compatibility_settings\"][\"custom_attribs_map\"],\n            log=self.log,\n        )\n\n    except ValueError as error:\n        self.log.error(\n            \"The sync service cannot start properly due to invalid \"\n            \"configuration. Adjust it and restart the services.\"\n        )\n        self.log.error(error)\n        raise SystemExit from error\n\n    self.handlers_map = self._get_handlers()\n    if not self.handlers_map:\n        self.log.error(\"No handlers found for the processor, aborting.\")\n</code></pre>"},{"location":"autoapi/services/processor/processor/processor.html#services.processor.processor.processor.ShotgridProcessor.get_sg_connection","title":"<code>get_sg_connection()</code>","text":"<p>Ensure we can talk to AYON and Shotgrid.</p> <p>Start connections to the APIs and catch any possible error, we abort if this steps fails for any reason.</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def get_sg_connection(self):\n    \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n    Start connections to the APIs and catch any possible error, we abort if\n    this steps fails for any reason.\n    \"\"\"\n\n    if self._sg is None:\n        try:\n            validate.validate_sg_url(self.sg_url)\n            self._sg = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key\n            )\n        except Exception as e:\n            self.log.error(\"Unable to create Shotgrid Session.\")\n            raise e\n\n    try:\n        self._sg.connect()\n\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid.\")\n        raise e\n\n    return self._sg\n</code></pre>"},{"location":"autoapi/services/processor/processor/processor.html#services.processor.processor.processor.ShotgridProcessor.start_processing","title":"<code>start_processing()</code>","text":"<p>Enroll AYON events of topic <code>shotgrid.event</code></p> <p>We query AYON Events in search of unfinished <code>shotgrid.event</code> events, these events must an <code>action</code> key in their <code>payload</code> in order to be processed, that <code>action</code> is the one used to match with a <code>handler</code>'s <code>REGISTER_EVENT_TYPE</code> attribute.</p> <p>For example, an event that has <code>{\"action\": \"create-project\"}</code> payload, will trigger the <code>handlers/project_sync.py</code> since that one has the attribute REGISTER_EVENT_TYPE = [\"create-project\"]</p> Source code in <code>services/processor/processor/processor.py</code> <pre><code>def start_processing(self):\n    \"\"\"Enroll AYON events of topic `shotgrid.event`\n\n    We query AYON Events in search of unfinished `shotgrid.event` events,\n    these events must an `action` key in their `payload` in order to be\n    processed, that `action` is the one used to match with a `handler`'s\n    `REGISTER_EVENT_TYPE` attribute.\n\n    For example, an event that has `{\"action\": \"create-project\"}` payload,\n    will trigger the `handlers/project_sync.py` since that one has the\n    attribute REGISTER_EVENT_TYPE = [\"create-project\"]\n    \"\"\"\n    while True:\n        try:\n            event = ayon_api.enroll_event_job(\n                \"shotgrid.event*\",\n                \"shotgrid.proc\",\n                socket.gethostname(),\n                description=\"Enrolling to any `shotgrid.event` Event...\",\n                max_retries=2,\n                sequential=True,\n            )\n\n            if not event:\n                time.sleep(self.sg_polling_frequency)\n                continue\n\n            # Get source event because it is having payload to process\n            source_event = ayon_api.get_event(event[\"dependsOn\"])\n            payload = source_event[\"payload\"]\n            summary = source_event[\"summary\"]\n\n            if source_sg_event_id := summary.get(\"sg_event_id\"):\n                event_id_text = (\n                    f\". Shotgrid Event ID: {source_sg_event_id}.\"\n                )\n            else:\n                event_id_text = \".\"\n\n            if not payload:\n                # TODO: maybe remove this - unrealistic scenario\n                ayon_api.update_event(\n                    event[\"id\"],\n                    description=(\n                        f\"Unable to process the event{event_id_text} &gt; \"\n                        f\"&lt;{source_event['id']}&gt; since it has no \"\n                        \"Shotgrid Payload!\"\n                    ),\n                    status=\"finished\"\n                )\n                continue\n\n            failed = False\n            for handler in self.handlers_map.get(payload[\"action\"], []):\n                # If theres any handler \"subscribed\" to this event type..\n                try:\n                    self.log.info(f\"Running the Handler {handler}\")\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        description=(\n                            \"Processing event with Handler \"\n                            f\"{payload['action']}...\"\n                        ),\n                        status=\"in_progress\",\n                    )\n                    self.log.debug(\n                        f\"processing event {pformat(payload)}\")\n                    handler.process_event(\n                        self,\n                        payload,\n                    )\n                except Exception:\n                    failed = True\n                    self.log.error(\n                        f\"Unable to process handler {handler.__name__}\",\n                        exc_info=True\n                    )\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        status=\"failed\",\n                        description=(\n                            \"An error occurred while processing\"\n                            f\"{event_id_text}\"\n                        ),\n                        payload={\n                            \"message\": traceback.format_exc(),\n                        },\n                    )\n\n            if not failed:\n                self.log.info(\n                    \"Event has been processed... setting to finished!\")\n\n                ayon_api.update_event(\n                    event[\"id\"],\n                    description=f\"Event processed successfully{event_id_text}\",\n                    status=\"finished\",\n                )\n\n        except Exception:\n            self.log.error(traceback.format_exc())\n</code></pre>"},{"location":"autoapi/services/processor/processor/handlers/index.html","title":"handlers","text":""},{"location":"autoapi/services/processor/processor/handlers/shotgrid_event.html","title":"shotgrid_event","text":"<p>Handle Events originated from Shotgrid.</p>"},{"location":"autoapi/services/processor/processor/handlers/shotgrid_event.html#services.processor.processor.handlers.shotgrid_event.process_event","title":"<code>process_event(sg_processor, event)</code>","text":"<p>React to Shotgrid Events.</p> <p>Events with the action <code>shotgrid-event</code> will trigger this function, where we attempt to replicate a change coming form Shotgrid, like creating a new Shot, renaming a Task, etc.</p> Source code in <code>services/processor/processor/handlers/shotgrid_event.py</code> <pre><code>def process_event(\n    sg_processor,\n    event,\n):\n    \"\"\"React to Shotgrid Events.\n\n    Events with the action `shotgrid-event` will trigger this\n    function, where we attempt to replicate a change coming form Shotgrid, like\n    creating a new Shot, renaming a Task, etc.\n    \"\"\"\n    sg_payload = event.get(\"sg_payload\", {})\n    if not sg_payload:\n        raise ValueError(\"The Event payload is empty!\")\n\n    if not sg_payload.get(\"meta\", {}):\n        raise ValueError(\"The Event payload is missing the action to perform!\")\n\n    hub = AyonShotgridHub(\n        sg_processor.get_sg_connection(),\n        event.get(\"project_name\"),\n        event.get(\"project_code\"),\n        sg_project_code_field=sg_processor.sg_project_code_field,\n        custom_attribs_map=sg_processor.custom_attribs_map,\n        custom_attribs_types=sg_processor.custom_attribs_types,\n        sg_enabled_entities=sg_processor.sg_enabled_entities,\n    )\n\n    hub.react_to_shotgrid_event(sg_payload[\"meta\"])\n</code></pre>"},{"location":"autoapi/services/processor/processor/handlers/sync_projects.html","title":"sync_projects","text":"<p>Sync Projects - A <code>processor.handler</code> to ensure two Projects are in sync between AYON and Shotgrid, uses the <code>AyonShotgridHub</code>.</p>"},{"location":"autoapi/services/processor/processor/handlers/sync_projects.html#services.processor.processor.handlers.sync_projects.process_event","title":"<code>process_event(sg_processor, event)</code>","text":"<p>Synchronize a project between AYON and Shotgrid.</p> <p>Events with the action <code>sync-from-shotgrid</code> or <code>sync-from-ayon</code> will trigger this function, where we traverse a whole project, either in Shotgrid or AYON, and replicate it's structure in the other platform.</p> Source code in <code>services/processor/processor/handlers/sync_projects.py</code> <pre><code>def process_event(\n    sg_processor,\n    event,\n):\n    \"\"\"Synchronize a project between AYON and Shotgrid.\n\n    Events with the action `sync-from-shotgrid` or `sync-from-ayon` will\n    trigger this function, where we traverse a whole project, either in\n    Shotgrid or AYON, and replicate it's structure in the other platform.\n    \"\"\"\n    hub = AyonShotgridHub(\n        sg_processor.get_sg_connection(),\n        event.get(\"project_name\"),\n        event.get(\"project_code\"),\n        sg_project_code_field=sg_processor.sg_project_code_field,\n        custom_attribs_map=sg_processor.custom_attribs_map,\n        custom_attribs_types=sg_processor.custom_attribs_types,\n        sg_enabled_entities=sg_processor.sg_enabled_entities,\n    )\n\n    # This will ensure that the project exists in both platforms.\n    hub.create_project()\n    sync_source = (\n        \"ayon\" if event.get(\"action\") == \"sync-from-ayon\" else \"shotgrid\")\n    hub.synchronize_projects(source=sync_source)\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/index.html","title":"shotgrid_common","text":""},{"location":"autoapi/services/shotgrid_common/constants.html","title":"constants","text":""},{"location":"autoapi/services/shotgrid_common/utils.html","title":"utils","text":""},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.check_sg_attribute_exists","title":"<code>check_sg_attribute_exists(sg_session, sg_entity_type, field_code, check_writable=False)</code>","text":"<p>Validate whether given field code exists under that entity type</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def check_sg_attribute_exists(\n    sg_session: shotgun_api3.Shotgun,\n    sg_entity_type: str,\n    field_code: str,\n    check_writable: bool = False,\n) -&gt; bool:\n    \"\"\"Validate whether given field code exists under that entity type\"\"\"\n    try:\n        schema_field = sg_session.schema_field_read(\n            sg_entity_type,\n            field_name=field_code\n        )\n        # If we are checking whether the attribute can be written to\n        # we check the \"editable\" key in the schema field\n        if check_writable:\n            is_writable = schema_field[field_code].get(\n                \"editable\", {}).get(\"value\")\n            if not is_writable:\n                return False\n\n        return schema_field\n    except Exception:\n        # shotgun_api3.shotgun.Fault: API schema_field_read()\n        pass\n\n    return False\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_ay_custom_attribs_in_sg_entity","title":"<code>create_ay_custom_attribs_in_sg_entity(sg_session, sg_entity_type, custom_attribs_map, custom_attribs_types)</code>","text":"<p>Create AYON custom attributes in ShotGrid entities.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a ShotGrid API Session.</p> required <code>sg_entities</code> <code>list</code> <p>List of ShotGrid entities to create the fields in.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> required <code>custom_attribs_types</code> <code>dict</code> <p>Dictionary that contains a tuple for each attribute containing the type of data and the scope of the attribute.</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_ay_custom_attribs_in_sg_entity(\n    sg_session: shotgun_api3.Shotgun,\n    sg_entity_type: str,\n    custom_attribs_map: dict,\n    custom_attribs_types: dict\n):\n    \"\"\"Create AYON custom attributes in ShotGrid entities.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a ShotGrid API Session.\n        sg_entities (list): List of ShotGrid entities to create the fields in.\n        custom_attribs_map (dict): Dictionary that maps names of attributes in\n            AYON to ShotGrid equivalents.\n        custom_attribs_types (dict): Dictionary that contains a tuple for each\n            attribute containing the type of data and the scope of the\n            attribute.\n    \"\"\"\n    # Add all the custom attributes\n    for sg_attrib in custom_attribs_map.values():\n\n        data_scope = custom_attribs_types.get(sg_attrib)\n        if not data_scope:\n            continue\n\n        data_type, ent_scope = data_scope\n\n        # If SG entity type is not in the scope set on the attribute, skip it\n        if sg_entity_type not in ent_scope:\n            continue\n\n        field_type = AYON_SHOTGRID_ATTRIBUTES_MAP[data_type][\"name\"]\n\n        # First we simply validate whether the built-in attribute\n        # already exists in the SG entity\n        exists = check_sg_attribute_exists(\n            sg_session,\n            sg_entity_type,\n            sg_attrib,\n        )\n        # If it doesn't exist, we create a custom attribute on the\n        # SG entity by prefixing it with \"sg_\"\n        if not exists:\n            get_or_create_sg_field(\n                sg_session,\n                sg_entity_type,\n                sg_attrib,\n                field_type\n            )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_ay_fields_in_sg_entities","title":"<code>create_ay_fields_in_sg_entities(sg_session, sg_entities, custom_attribs_map, custom_attribs_types)</code>","text":"<p>Create AYON fields in ShotGrid entities.</p> <p>Some fields need to exist in the ShotGrid Entities, mainly the <code>sg_ayon_id</code> and <code>sg_ayon_sync_status</code> for the correct operation of the handlers.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a ShotGrid API Session.</p> required <code>sg_entities</code> <code>list</code> <p>List of ShotGrid entities to create the fields in.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> required <code>custom_attribs_types</code> <code>dict</code> <p>Dictionary that contains a tuple for each attribute containing the type of data and the scope of the attribute.</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_ay_fields_in_sg_entities(\n    sg_session: shotgun_api3.Shotgun,\n    sg_entities: list,\n    custom_attribs_map: dict,\n    custom_attribs_types: dict\n):\n    \"\"\"Create AYON fields in ShotGrid entities.\n\n    Some fields need to exist in the ShotGrid Entities, mainly the `sg_ayon_id`\n    and `sg_ayon_sync_status` for the correct operation of the handlers.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a ShotGrid API Session.\n        sg_entities (list): List of ShotGrid entities to create the fields in.\n        custom_attribs_map (dict): Dictionary that maps names of attributes in\n            AYON to ShotGrid equivalents.\n        custom_attribs_types (dict): Dictionary that contains a tuple for each\n            attribute containing the type of data and the scope of the attribute.\n    \"\"\"\n    for sg_entity_type in sg_entities:\n        get_or_create_sg_field(\n            sg_session,\n            sg_entity_type,\n            \"Ayon ID\",\n            \"text\",\n            CUST_FIELD_CODE_ID,\n        )\n\n        get_or_create_sg_field(\n            sg_session,\n            sg_entity_type,\n            \"Ayon Sync Status\",\n            \"list\",\n            CUST_FIELD_CODE_SYNC,\n            field_properties={\n                \"name\": \"Ayon Sync Status\",\n                \"description\": \"The Synchronization status with AYON.\",\n                \"valid_values\": [\"Synced\", \"Failed\", \"Skipped\"],\n            }\n        )\n\n        # Add custom attributes to entity\n        create_ay_custom_attribs_in_sg_entity(\n            sg_session,\n            sg_entity_type,\n            custom_attribs_map,\n            custom_attribs_types\n        )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_ay_fields_in_sg_project","title":"<code>create_ay_fields_in_sg_project(sg_session, custom_attribs_map, custom_attribs_types)</code>","text":"<p>Create AYON Project fields in ShotGrid.</p> <p>This will create Project Unique attributes into ShotGrid.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a ShotGrid API Session.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> required <code>custom_attribs_types</code> <code>dict</code> <p>Dictionary that contains a tuple for each attribute containing the type of data and the scope of the attribute.</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_ay_fields_in_sg_project(\n    sg_session: shotgun_api3.Shotgun,\n    custom_attribs_map: dict,\n    custom_attribs_types: dict\n):\n    \"\"\"Create AYON Project fields in ShotGrid.\n\n    This will create Project Unique attributes into ShotGrid.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a ShotGrid API Session.\n        custom_attribs_map (dict): Dictionary that maps names of attributes in\n            AYON to ShotGrid equivalents.\n        custom_attribs_types (dict): Dictionary that contains a tuple for each\n            attribute containing the type of data and the scope of the\n            attribute.\n    \"\"\"\n    ayon_attribs_mapping = {\n        attr_name: attr_dict[\"type\"]\n        for attr_name, attr_dict in get_attributes_for_type(\"folder\").items()\n    }\n    for attribute, attribute_values in SG_PROJECT_ATTRS.items():\n        sg_field_name = attribute_values[\"name\"]\n        sg_field_code = attribute_values[\"sg_field\"]\n        sg_field_type = attribute_values.get(\"type\")\n        sg_field_properties = {}\n\n        if not sg_field_type:\n            sg_field_type = ayon_attribs_mapping.get(attribute)\n\n        if sg_field_type == \"checkbox\":\n            sg_field_properties = {\"default_value\": False}\n\n        get_or_create_sg_field(\n            sg_session,\n            \"Project\",\n            sg_field_name,\n            sg_field_type,\n            field_code=sg_field_code,\n            field_properties=sg_field_properties\n        )\n\n        # Add custom attributes to project\n        create_ay_custom_attribs_in_sg_entity(\n            sg_session,\n            \"Project\",\n            custom_attribs_map,\n            custom_attribs_types\n        )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_new_ayon_entity","title":"<code>create_new_ayon_entity(sg_session, entity_hub, parent_entity, sg_ay_dict)</code>","text":"<p>Helper method to create entities in the EntityHub.</p> Task Creation <p>https://github.com/ynput/ayon-python-api/blob/30d7026/ayon_api/entity_hub.py#L284</p> Folder Creation <p>https://github.com/ynput/ayon-python-api/blob/30d7026/ayon_api/entity_hub.py#L254</p> <p>Parameters:</p> Name Type Description Default <code>entity_hub</code> <code>EntityHub</code> <p>The project's entity hub.</p> required <code>parent_entity</code> <code>Union[ProjectEntity, FolderEntity]</code> <p>AYON parent entity.</p> required <code>sg_ay_dict</code> <code>dict</code> <p>AYON ShotGrid entity to create.</p> required <p>Returns:</p> Type Description <p>FolderEntity|TaskEntity: Added task entity.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_new_ayon_entity(\n    sg_session: shotgun_api3.Shotgun,\n    entity_hub: ayon_api.entity_hub.EntityHub,\n    parent_entity: Union[ProjectEntity, FolderEntity],\n    sg_ay_dict: Dict\n):\n    \"\"\"Helper method to create entities in the EntityHub.\n\n    Task Creation:\n        https://github.com/ynput/ayon-python-api/blob/30d702618b58676c3708f09f131a0974a92e1002/ayon_api/entity_hub.py#L284\n\n    Folder Creation:\n        https://github.com/ynput/ayon-python-api/blob/30d702618b58676c3708f09f131a0974a92e1002/ayon_api/entity_hub.py#L254\n\n    Args:\n        entity_hub (ayon_api.EntityHub): The project's entity hub.\n        parent_entity: AYON parent entity.\n        sg_ay_dict (dict): AYON ShotGrid entity to create.\n\n    Returns:\n        FolderEntity|TaskEntity: Added task entity.\n    \"\"\"\n\n    # Flow API return date as string, need to convert\n    # them back as datetime in order to set to AYON.\n    all_attrib_schemas = ayon_api.get_attributes_schema()\n    for ay_attrib, attrib_value in sg_ay_dict[\"attribs\"].items():\n        attrib_schemas = [\n            attr for attr in all_attrib_schemas[\"attributes\"]\n            if attr[\"name\"] == ay_attrib\n        ]\n        if (\n            attrib_schemas\n            and attrib_schemas[0][\"data\"][\"type\"] == \"datetime\"\n        ):\n            value_as_date = datetime.datetime.strptime(\n                attrib_value,\n                \"%Y-%m-%d\",\n            )\n            sg_ay_dict[\"attribs\"][ay_attrib] = value_as_date\n\n    if sg_ay_dict[\"type\"].lower() == \"task\":\n        if parent_entity.entity_type == \"project\":\n            log.warning(\"Cannot create task directly under project\")\n            return\n\n        ay_entity = entity_hub.add_new_task(\n            task_type=sg_ay_dict[\"task_type\"],\n            name=sg_ay_dict[\"name\"],\n            label=sg_ay_dict[\"label\"],\n            entity_id=sg_ay_dict[\"data\"][CUST_FIELD_CODE_ID],\n            parent_id=parent_entity.id,\n            attribs=sg_ay_dict[\"attribs\"],\n            data=sg_ay_dict[\"data\"]\n        )\n    elif sg_ay_dict[\"type\"].lower() == \"version\":\n        # SG doesn't have values for product_name and version (int)\n        # we might create some assumption how to parsem out in the future\n        log.warning(\n            \"Version creation from Flow is not implemented because \"\n            \"Flow entity is much less strict than AYON product with reviewable \"\n            \"(e.g. product name and integer are not mandatory in Flow).\"\n        )\n        return\n    elif sg_ay_dict[\"type\"].lower() == \"comment\":\n        handle_comment(sg_ay_dict, sg_session, entity_hub)\n        return\n    else:\n        ay_entity = entity_hub.add_new_folder(\n            folder_type=sg_ay_dict[\"folder_type\"],\n            name=sg_ay_dict[\"name\"],\n            label=sg_ay_dict[\"label\"],\n            entity_id=sg_ay_dict[\"data\"][CUST_FIELD_CODE_ID],\n            parent_id=parent_entity.id,\n            attribs=sg_ay_dict[\"attribs\"],\n            data=sg_ay_dict[\"data\"]\n        )\n\n    log.debug(f\"Created new AYON entity: {ay_entity}\")\n    ay_entity.attribs.set(\n        SHOTGRID_ID_ATTRIB,\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_ID_ATTRIB, \"\")\n    )\n    ay_entity.attribs.set(\n        SHOTGRID_TYPE_ATTRIB,\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_TYPE_ATTRIB, \"\")\n    )\n\n    status = sg_ay_dict.get(\"status\")\n    if status:\n        # Entity hub expects the statuses to be provided with the `name` and\n        # not the `short_name` (which is what we get from SG) so we convert\n        # the short name back to the long name before setting it\n        status_mapping = {\n            status.short_name: status.name\n            for status in entity_hub.project_entity.statuses\n        }\n        new_status_name = status_mapping.get(status)\n        if not new_status_name:\n            log.warning(\n                \"Status with short name '%s' doesn't exist in project\", status\n            )\n        else:\n            try:\n                # INFO: it was causing error so trying to set status directly\n                ay_entity.status = new_status_name\n            except ValueError as e:\n                # `ValueError: Status ip is not available on project.`\n                # NOTE: this doesn't really raise exception?\n                log.warning(f\"Status sync not implemented: {e}\")\n\n    assignees = sg_ay_dict.get(\"assignees\")\n    if assignees:\n        ay_entity.assignees = assignees\n\n    tags = sg_ay_dict.get(\"tags\")\n    if tags:\n        ay_entity.tags = [tag[\"name\"] for tag in tags]\n\n    try:\n        entity_hub.commit_changes()\n\n    except Exception:\n        log.error(\"AYON Entity could not be created\", exc_info=True)\n\n    else:\n\n        # AssetCategory AYON entity do not have any equivalent in SG.\n        if sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB] == \"AssetCategory\":\n            return ay_entity\n\n        try:\n             sg_session.update(\n                sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB],\n                sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB],\n                {\n                    CUST_FIELD_CODE_ID: ay_entity.id\n                }\n            )\n\n        except Exception:\n            log.error(\n                \"Could not update SG %d entity with AYON id %r.\",\n                sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB],\n                ay_entity.id\n            )\n\n    return ay_entity\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_new_sg_entity","title":"<code>create_new_sg_entity(ay_entity, sg_session, sg_project, sg_parent_entity, sg_enabled_entities, sg_project_code_field, custom_attribs_map, addon_settings, ay_project_name)</code>","text":"<p>Helper method to create entities in Shotgrid.</p> <p>Parameters:</p> Name Type Description Default <code>ay_entity</code> <code>Dict[str, Any]</code> <p>The AYON entity.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The Shotgrid API session.</p> required <code>sg_project</code> <code>Dict[str, Any]</code> <p>The Shotgrid Project.</p> required <code>sg_parent_entity</code> <code>Dict[str, str]</code> <p>{\"id\": XX, \"type\": \"Asset|Task..\"}</p> required <code>sg_enabled_entities</code> <code>list</code> <p>List of Shotgrid entities to be enabled.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary of extra attributes to store in the SG entity.</p> required <code>addon_settings</code> <code>Dict[str, Any]</code> <p>(Dict[str, Any]): settings from current version</p> required <code>ay_project_name</code> <code>str</code> <p>(str): AYON project name, could be different from sg_project</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_new_sg_entity(\n    ay_entity: Union[ProjectEntity, TaskEntity, FolderEntity, VersionEntity],\n    sg_session: shotgun_api3.Shotgun,\n    sg_project: Dict,\n    sg_parent_entity: Dict,\n    sg_enabled_entities: List[str],\n    sg_project_code_field: str,\n    custom_attribs_map: Dict[str, str],\n    addon_settings: Dict[str, Any],\n    ay_project_name: str\n):\n    \"\"\"Helper method to create entities in Shotgrid.\n\n    Args:\n        ay_entity (Dict[str, Any]): The AYON entity.\n        sg_session (shotgun_api3.Shotgun): The Shotgrid API session.\n        sg_project (Dict[str, Any]): The Shotgrid Project.\n        sg_parent_entity (Dict[str, str]): {\"id\": XX, \"type\": \"Asset|Task..\"}\n        sg_enabled_entities (list): List of Shotgrid entities to be enabled.\n        custom_attribs_map (dict): Dictionary of extra attributes to store in the SG entity.\n        addon_settings: (Dict[str, Any]): settings from current version\n        ay_project_name: (str): AYON project name, could be different from\n            sg_project\n    \"\"\"\n    if hasattr(ay_entity, \"folder_type\"):\n        sg_type = ay_entity.folder_type\n    else:\n        sg_type = ay_entity.entity_type\n\n    sg_parent_field = get_sg_entity_parent_field(\n        sg_session, sg_project, sg_type.capitalize(), sg_enabled_entities)\n\n    # generic data\n    data = {\n        \"project\": sg_project,\n        CUST_FIELD_CODE_ID: ay_entity.id,\n        CUST_FIELD_CODE_SYNC: \"Synced\",\n    }\n\n    # Task creation\n    if ay_entity.entity_type == \"task\":\n        step_query_filters = [[\"code\", \"is\", ay_entity.task_type]]\n\n        if sg_parent_entity[\"type\"] in [\"Asset\", \"Shot\", \"Episode\", \"Sequence\"]:\n            step_query_filters.append(\n                [\"entity_type\", \"is\", sg_parent_entity[\"type\"]]\n            )\n\n        task_step = sg_session.find_one(\n            \"Step\",\n            filters=step_query_filters,\n            fields=[\"code\", \"name\"],\n        )\n        if not task_step:\n            raise ValueError(\n                f\"Unable to create Task {ay_entity.task_type} {ay_entity}\\n\"\n                f\"-&gt; Shotgrid is missing Pipeline Step {ay_entity.task_type}\"\n            )\n\n        sg_type = \"Task\"\n        data[\"content\"] = ay_entity.name\n        data[\"entity\"] = sg_parent_entity\n        data[\"step\"] = task_step\n\n    # Asset creation\n    elif (\n        ay_entity.entity_type == \"folder\"\n        and ay_entity.folder_type == \"Asset\"\n    ):\n        sg_type = \"Asset\"\n        # get name form sg_parent_entity\n        parent_entity_name = sg_parent_entity.get(\"name\")\n\n        if not parent_entity_name:\n            # Try to get AssetCategory type name and use it as\n            # SG asset type. If not found, use None.\n            parent_entity = ay_entity.parent\n            parent_entity_name = parent_entity.name\n            asset_type = parent_entity_name.capitalize()\n        else:\n            asset_type = None\n\n        log.debug(f\"Creating Asset '{ay_entity.name}' of type '{asset_type}'\")\n\n        data[\"sg_asset_type\"] = asset_type\n        data[\"code\"] = ay_entity.name\n    elif ay_entity.entity_type == \"version\":\n        sg_type = \"Version\"\n\n        # this query shouldn't be necessary as we are reaching for attribs of\n        # grandparent, but it seems that field is not returned correctly TODO\n        folder_id = ay_entity.parent.parent.id\n        ayon_asset = ayon_api.get_folder_by_id(\n            ay_project_name, folder_id)\n\n        if not ayon_asset:\n            raise ValueError(f\"Not found '{folder_id}'\")\n\n        ay_username = ay_entity.data.get(\"author\")\n        sg_user_id = get_sg_user_id(ay_username) if ay_username else -1\n        if sg_user_id &lt; 0:\n            log.warning(\n                f\"{ay_username} is not synchronized, \"\n                f\"Version will be created under script user.\"\n            )\n            data[\"description\"] = f\"Created in AYON by '{ay_username}'\"\n        else:\n            data[\"user\"] = {'type': 'HumanUser', 'id': sg_user_id}\n\n        # sync associated task\n        if ay_entity.task_id:\n            task_data = ayon_api.get_task_by_id(\n                ay_project_name,\n                ay_entity.task_id\n            )\n            sg_task = task_data[\"attrib\"].get(SHOTGRID_ID_ATTRIB)\n            if sg_task:\n                data[\"sg_task\"] = {\"type\": \"Task\", \"id\": int(sg_task)}\n\n        # sync comment for description\n        data[\"description\"] = ay_entity.attribs.get(\"comment\")\n\n        # sync productType as version type\n        product_data =  ayon_api.get_product_by_id(\n            ay_project_name,\n            ay_entity.product_id\n        )\n        sg_version_field = sg_session.schema_field_read(\n            \"Version\", \"sg_version_type\")[\"sg_version_type\"]\n        sg_valid_values = (\n            sg_version_field[\"properties\"][\"valid_values\"][\"value\"]\n        )\n\n        if product_data[\"productType\"] in sg_valid_values:\n            data[\"sg_version_type\"] = product_data[\"productType\"]\n\n        # sync first/last frames\n        frame_start = ay_entity.attribs.get(\"frameStart\") or 0\n        frame_end = ay_entity.attribs.get(\"frameEnd\") or 0\n        handle_start = ay_entity.attribs.get(\"handleStart\") or 0\n        handle_end = ay_entity.attribs.get(\"handleEnd\") or 0\n\n        frame_in = frame_start - handle_start\n        frame_out = frame_end + handle_end\n\n        data[\"sg_first_frame\"]  = frame_in\n        data[\"sg_last_frame\"] = frame_out\n\n        data[\"frame_count\"] = frame_out - frame_in + 1\n        data[\"frame_range\"] = '-'.join([str(frame_in), str(frame_out)])\n\n        product_name = ay_entity.parent.name\n        version_str = str(ay_entity.version).zfill(3)\n        version_name = f\"{product_name}_v{version_str}\"\n\n        data[sg_parent_field] = sg_parent_entity\n        data[\"code\"] = version_name\n\n    # Folder creation\n    else:\n        sg_type = ay_entity.folder_type\n\n        # If parent field is different than project, add parent field to\n        # data dictionary. Each project might have different parent fields\n        # defined on each entity types. This way we secure that we are\n        # always creating the entity with the correct parent field.\n        if (\n            sg_parent_field != \"project\"\n            and sg_parent_entity[\"type\"] != \"Project\"\n        ):\n            data[sg_parent_field] = sg_parent_entity\n        data[\"code\"] = ay_entity.name\n\n    # Set status\n    if ay_entity.status:\n        entity = ay_entity\n        project_entity = None\n        while entity.parent:\n            entity = entity.parent\n            if entity.entity_type == \"project\":\n                project_entity = entity\n                break\n\n        if project_entity:\n            ay_statuses = {\n                status.name: status.short_name\n                for status in project_entity.statuses\n            }\n            ay_status = ay_statuses.get(ay_entity.status)\n            if ay_status and ay_status in get_sg_statuses(sg_session, sg_type):\n                data[\"sg_status_list\"] = ay_status\n\n    # Fill up data with any extra attributes from AYON we want to sync to SG\n    data |= get_sg_custom_attributes_data(\n        sg_session,\n        ay_entity.attribs.to_dict(),\n        sg_type,\n        custom_attribs_map\n    )\n\n    try:\n        sg_entity = sg_session.create(sg_type, data)\n    except Exception as e:\n        log.error(\n            f\"Unable to create SG entity {sg_type} with data: {data}\")\n        raise e\n\n    compatibility_settings = addon_settings.get(\"compatibility_settings\", {})\n    default_task_type = compatibility_settings.get(\"default_task_type\")\n\n    return get_sg_entity_as_ay_dict(\n        sg_session,\n        sg_entity[\"type\"],\n        sg_entity[\"id\"],\n        sg_project_code_field,\n        default_task_type,\n        custom_attribs_map=custom_attribs_map\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.create_sg_entities_in_ay","title":"<code>create_sg_entities_in_ay(project_entity, sg_session, shotgrid_project, sg_enabled_entities)</code>","text":"<p>Ensure AYON has all the SG Steps (to use as task types) and Folder types.</p> <p>Parameters:</p> Name Type Description Default <code>project_entity</code> <code>ProjectEntity</code> <p>The ProjectEntity for a given project.</p> required <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>shotgrid_project</code> <code>dict</code> <p>The project owning the Tasks.</p> required <code>sg_enabled_entities</code> <code>list</code> <p>The enabled entities.</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def create_sg_entities_in_ay(\n    project_entity: ProjectEntity,\n    sg_session: shotgun_api3.Shotgun,\n    shotgrid_project: dict,\n    sg_enabled_entities: list,\n):\n    \"\"\"Ensure AYON has all the SG Steps (to use as task types) and Folder types.\n\n    Args:\n        project_entity (ProjectEntity): The ProjectEntity for a given project.\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        shotgrid_project (dict): The project owning the Tasks.\n        sg_enabled_entities (list): The enabled entities.\n    \"\"\"\n\n    # Types of SG entities to ignore as AYON folders\n    ignored_folder_types = {\"task\", \"version\"}\n\n    # Find ShotGrid Entities that are to be treated as folders\n    sg_folder_entities = [\n        {\"name\": entity_type}\n        for entity_type, _ in get_sg_project_enabled_entities(\n            sg_session,\n            shotgrid_project,\n            sg_enabled_entities\n        ) if entity_type.lower() not in ignored_folder_types\n    ]\n\n    new_folder_types = sg_folder_entities + project_entity.folder_types\n    # So we can have a specific folder for AssetCategory\n    new_folder_types.extend([\n        {\"name\": \"AssetCategory\"},\n        {\"name\": \"Folder\"}\n    ])\n\n    # Make sure list items are unique\n    new_folder_types = list({\n        entity['name']: entity\n        for entity in new_folder_types\n    }.values())\n    project_entity.folder_types = new_folder_types\n\n    # Add ShotGrid Statuses to AYON Project Entity\n    ay_statuses = {\n        status.short_name.lower(): status.name.lower()\n        for status in list(project_entity.statuses)\n    }\n    ay_status_codes = list(ay_statuses.keys())\n    ay_status_names = list(ay_statuses.values())\n    for sg_entity_type in sg_enabled_entities:\n        if sg_entity_type == \"Project\":\n            # Skipping statuses from SG project as they are irrelevant in AYON\n            continue\n        for status_code, status_name in get_sg_statuses(sg_session, sg_entity_type).items():\n            if status_code.lower() not in ay_status_codes:\n                if status_name.lower() in ay_status_names:\n                    status_name += \" (from SG)\"\n                project_entity.statuses.create(status_name, short_name=status_code)\n                ay_status_codes.append(status_code)\n\n    # Add Project task types by querying ShotGrid Pipeline steps\n    sg_steps = [\n        {\"name\": step[0], \"shortName\": step[1]}\n        for step in get_sg_pipeline_steps(\n            sg_session,\n            shotgrid_project,\n            sg_enabled_entities\n        )\n    ]\n    new_task_types = sg_steps + project_entity.task_types\n    new_task_types = list({\n        task['name']: task\n        for task in new_task_types\n    }.values())\n    project_entity.task_types = new_task_types\n\n    return sg_folder_entities, sg_steps\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_ayon_name_by_sg_id","title":"<code>get_ayon_name_by_sg_id(sg_user_id)</code>","text":"<p>Returns AYON user name for particular <code>sg_user_id</code></p> <p>Calls SG addon endpoint to query 'users' table limit need to loop through all users.</p> <p>Returns:     (Optional[str])</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_ayon_name_by_sg_id(sg_user_id):\n    \"\"\"Returns AYON user name for particular `sg_user_id`\n\n    Calls SG addon endpoint to query 'users' table limit need to loop through\n    all users.\n\n    Args:\n        sg_user_id (str)\n    Returns:\n        (Optional[str])\n    \"\"\"\n    addon_name = ayon_api.get_service_addon_name()\n    addon_version = ayon_api.get_service_addon_version()\n    variant = ayon_api.get_default_settings_variant()\n    endpoint_url = (\n        f\"addons/{addon_name}/{addon_version}/\"\n        f\"get_ayon_name_by_sg_id/{sg_user_id}\"\n        f\"?variant={variant}\"\n    )\n\n    response = ayon_api.get(endpoint_url)\n    if response.status_code != 200:\n        print(response.content)\n        raise RuntimeError(response.text)\n\n    return response.data\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_event_hash","title":"<code>get_event_hash(event_topic, event_id)</code>","text":"<p>Create a SHA-256 hash from the event topic and event ID.</p> <p>Parameters:</p> Name Type Description Default <code>event_topic</code> <code>str</code> <p>The event topic.</p> required <code>event_id</code> <code>int</code> <p>The event ID.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The SHA-256 hash.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_event_hash(event_topic: str, event_id: int) -&gt; str:\n    \"\"\"Create a SHA-256 hash from the event topic and event ID.\n\n    Arguments:\n        event_topic (str): The event topic.\n        event_id (int): The event ID.\n\n    Returns:\n        str: The SHA-256 hash.\n    \"\"\"\n    data = {\n        \"event_topic\": event_topic,\n        \"event_id\": event_id,\n    }\n    json_data = json.dumps(data)\n    return hashlib.sha256(json_data.encode(\"utf-8\")).hexdigest()\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_logger","title":"<code>get_logger(name)</code>","text":"<p>Return a logger instance with the given name.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_logger(name: str) -&gt; logging.Logger:\n    \"\"\"Return a logger instance with the given name.\"\"\"\n    if name in _loggers:\n        return _loggers[name]\n\n    # get environment variable DEBUG level\n    log_level = os.environ.get(\"LOGLEVEL\", \"INFO\").upper()\n\n    logger = logging.Logger(name)\n    _loggers[name] = logger\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(log_level)\n\n    formatting_str = (\n        \"%(asctime)s.%(msecs)03d %(levelname)s: %(message)s\"\n    )\n\n    if log_level == \"DEBUG\":\n        formatting_str = (\n            \"%(asctime)s.%(msecs)03d | %(module)s | %(funcName)s | \"\n            \"%(levelname)s: %(message)s\"\n        )\n\n    # create formatter\n    formatter = logging.Formatter(\n        fmt=formatting_str,\n        datefmt=\"%Y-%m-%d %H:%M:%S\",\n    )\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    logger.addHandler(ch)\n\n    return logger\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_or_create_sg_field","title":"<code>get_or_create_sg_field(sg_session, sg_entity_type, field_name, field_type, field_code=None, field_properties={})</code>","text":"<p>Return a field from a ShotGrid Entity or create it if it doesn't exist.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a ShotGrid API Session.</p> required <code>sg_entity_type</code> <code>str</code> <p>The ShotGrid entity type the field belongs to.</p> required <code>field_name</code> <code>str</code> <p>The ShotGrid field name, displayed in the UI.</p> required <code>field_type</code> <code>str</code> <p>The type of ShotGrid field.</p> required <code>field_code</code> <code>Optional[str]</code> <p>The ShotGrid field code, inferred from the the <code>field_name</code> if not provided.</p> <code>None</code> <code>field_properties</code> <code>Optional[dict]</code> <p>Some fields allow extra properties, these can be defined with this argument.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>attribute_exists</code> <code>str</code> <p>The Field name (code).</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_or_create_sg_field(\n    sg_session: shotgun_api3.Shotgun,\n    sg_entity_type: str,\n    field_name: str,\n    field_type: str,\n    field_code: Optional[str] = None,\n    field_properties: Optional[dict] = {}\n):\n    \"\"\"Return a field from a ShotGrid Entity or create it if it doesn't exist.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a ShotGrid API Session.\n        sg_entity_type (str): The ShotGrid entity type the field belongs to.\n        field_name (str): The ShotGrid field name, displayed in the UI.\n        field_type (str): The type of ShotGrid field.\n        field_code (Optional[str]): The ShotGrid field code, inferred from the\n            the `field_name` if not provided.\n        field_properties (Optional[dict]): Some fields allow extra properties,\n            these can be defined with this argument.\n\n    Returns:\n        attribute_exists (str): The Field name (code).\n    \"\"\"\n    if not field_code:\n        field_code = f\"sg_{field_name.lower().replace(' ', '_')}\"\n\n    attribute_exists = check_sg_attribute_exists(\n        sg_session, sg_entity_type, field_code)\n\n    if not attribute_exists:\n\n        try:\n            attribute_exists = sg_session.schema_field_create(\n                sg_entity_type,\n                field_type,\n                field_name,\n                properties=field_properties,\n            )\n            return attribute_exists\n        except Exception:\n            log.error(\n                \"Can't create ShotGrid field \"\n                f\"{sg_entity_type} &gt; {field_code}.\",\n                exc_info=True\n            )\n\n    return attribute_exists\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_reparenting_from_settings","title":"<code>get_reparenting_from_settings(entity_hub, sg_ay_dict, addon_settings)</code>","text":"<p>AYON settings can change the hierarchy mapping via settings: - root_relocate: move the hierarchy in-place under a different root - type grouping: group all entities of a same time under a common location.</p> <p>Parameters:</p> Name Type Description Default <code>entity_hub</code> <code>EntityHub</code> <p>The project's entity hub.</p> required <code>parent_entity</code> <p>Ayon parent entity.</p> required <code>sg_ay_dict</code> <code>dict</code> <p>The ShotGrid entity ready for Ayon consumption.</p> required <p>Returns:</p> Type Description <p>dict. The new parent entity if modified by the settings, None otherwise.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_reparenting_from_settings(entity_hub, sg_ay_dict, addon_settings):\n    \"\"\" AYON settings can change the hierarchy mapping via settings:\n    - root_relocate: move the hierarchy in-place under a different root\n    - type grouping: group all entities of a same time under a common location.\n\n    Args:\n        entity_hub (ayon_api.EntityHub): The project's entity hub.\n        parent_entity: Ayon parent entity.\n        sg_ay_dict (dict): The ShotGrid entity ready for Ayon consumption.\n\n    Returns:\n        dict. The new parent entity if modified by the settings, None otherwise.\n    \"\"\"\n    transfer_type = _get_parenting_transfer_type(addon_settings)\n\n    # No re-parenting settings enabled,\n    # no hierarchy changes must be made.\n    if transfer_type is None:\n        return None\n\n    sg_type = sg_ay_dict[\"folder_type\"]\n\n    # AssetCategory is an AYON specific entity type.\n    # Apply same logic as Asset when reparenting from SG.\n    if sg_type == \"AssetCategory\":\n        sg_type = \"Asset\"\n\n    folders_and_types = _get_parents_and_types(\n        addon_settings,\n        transfer_type,\n        sg_type\n    )\n\n    # No special rules set for this entity type\n    # in the settings, no hierarchy changes must be made.\n    if not folders_and_types:\n        return None\n\n    return _get_special_category(\n        entity_hub,\n        sg_ay_dict,\n        folders_and_types=folders_and_types\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_custom_attributes_data","title":"<code>get_sg_custom_attributes_data(sg_session, ay_attribs, sg_entity_type, custom_attribs_map)</code>","text":"<p>Get a dictionary with all the extra attributes we want to sync to SG</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a Shotgrid API Session.</p> required <code>ay_attribs</code> <code>dict</code> <p>Dictionary that contains the ground truth data of attributes that we want to sync to SG.</p> required <code>sg_entity_type</code> <code>str</code> <p>ShotGrid Entity type.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> required Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_custom_attributes_data(\n    sg_session: shotgun_api3.Shotgun,\n    ay_attribs: dict,\n    sg_entity_type: str,\n    custom_attribs_map: dict,\n) -&gt; dict:\n    \"\"\"Get a dictionary with all the extra attributes we want to sync to SG\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a Shotgrid API Session.\n        ay_attribs (dict): Dictionary that contains the ground truth data of\n            attributes that we want to sync to SG.\n        sg_entity_type (str): ShotGrid Entity type.\n        custom_attribs_map (dict): Dictionary that maps names of attributes in\n            AYON to ShotGrid equivalents.\n    \"\"\"\n    data_to_update = {}\n    for ay_attrib, sg_attrib in custom_attribs_map.items():\n        attrib_value = ay_attribs.get(ay_attrib)\n        if attrib_value is None:\n            continue\n\n        # try it first without `sg_` prefix since some are built-in\n        exists = check_sg_attribute_exists(\n            sg_session, sg_entity_type, sg_attrib, check_writable=True\n        )\n        # and then with the prefix\n        if not exists:\n            sg_attrib = f\"sg_{sg_attrib}\"\n            exists = check_sg_attribute_exists(\n                sg_session, sg_entity_type, sg_attrib, check_writable=True\n            )\n\n        if exists:\n\n            try:\n                value_as_date = datetime.datetime.fromisoformat(str(attrib_value))\n\n            except (ValueError, TypeError):\n                value_as_date = None\n\n            # AYON attribute value converts as date,\n            # confirm targeted SG field is also of type date.\n            if value_as_date:\n                schema_field = sg_session.schema_field_read(\n                    sg_entity_type,\n                    field_name=sg_attrib\n                )\n                data_type = schema_field[sg_attrib][\"data_type\"][\"value\"]\n                if data_type == \"date\":\n                    # AYON returns its date as isoformat, but FLOW API expects its date\n                    # formatted as YYY-MM-DD\n                    attrib_value = value_as_date.strftime(\"%Y-%m-%d\")\n\n            data_to_update[sg_attrib] = attrib_value\n\n    return data_to_update\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_entities","title":"<code>get_sg_entities(sg_session, sg_project, sg_enabled_entities, project_code_field, custom_attribs_map, addon_settings, extra_fields=None)</code>","text":"<p>Get all available entities within a ShotGrid Project.</p> <p>We check with ShotGrid to see what entities are enabled in a given project, then we build two dictionaries, one containing all entities with their ID as key and the representation as the value, and another dictionary where we store all the children on an entity, the key is the parent entity, and the value a list of it's children; all this by querying all the existing entities in a project for the enabled entities.</p> <p>Note: Asset Categories in ShotGrid aren't entities per se, or at least not queryable from the API, so we treat them as folders.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>sg_project</code> <code>dict</code> <p>The ShotGrid project to query its entities.</p> required <code>sg_enabled_entities</code> <code>list</code> <p>List of ShotGrid entities to query.</p> required <code>project_code_field</code> <code>str</code> <p>The ShotGrid project code field.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> required <code>addon_settings</code> <code>dict</code> <p>Settings</p> required <code>extra_fields</code> <code>list</code> <p>List of extra fields to pass to the query.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>tuple( entities_by_id (dict): A dict containing all entities with     their ID as key. entities_by_parent_id (dict): A dict containing all entities     that have children.</p> <code>dict</code> <p>)</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_entities(\n    sg_session: shotgun_api3.Shotgun,\n    sg_project: dict,\n    sg_enabled_entities: list,\n    project_code_field: str,\n    custom_attribs_map: dict,\n    addon_settings: dict,\n    extra_fields: Optional[list] = None,\n) -&gt; tuple[dict, dict]:\n    \"\"\"Get all available entities within a ShotGrid Project.\n\n    We check with ShotGrid to see what entities are enabled in a given project,\n    then we build two dictionaries, one containing all entities with their ID\n    as key and the representation as the value, and another dictionary where we\n    store all the children on an entity, the key is the parent entity, and the\n    value a list of it's children; all this by querying all the existing\n    entities in a project for the enabled entities.\n\n    Note: Asset Categories in ShotGrid aren't entities per se, or at least not\n    queryable from the API, so we treat them as folders.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        sg_project (dict): The ShotGrid project to query its entities.\n        sg_enabled_entities (list): List of ShotGrid entities to query.\n        project_code_field (str): The ShotGrid project code field.\n        custom_attribs_map (dict): Dictionary that maps names of attributes in\n            AYON to ShotGrid equivalents.\n        addon_settings (dict): Settings\n        extra_fields (list): List of extra fields to pass to the query.\n\n    Returns:\n        tuple(\n            entities_by_id (dict): A dict containing all entities with\n                their ID as key.\n            entities_by_parent_id (dict): A dict containing all entities\n                that have children.\n        )\n\n    \"\"\"\n    compatibility_settings = addon_settings.get(\"compatibility_settings\", {})\n    default_task_type = compatibility_settings.get(\"default_task_type\")\n\n    query_fields = list(SG_COMMON_ENTITY_FIELDS)\n\n    if extra_fields and isinstance(extra_fields, list):\n        query_fields += extra_fields\n\n    for sg_attrib in custom_attribs_map.values():\n        query_fields.extend([f\"sg_{sg_attrib}\", sg_attrib])\n\n    project_enabled_entities = get_sg_project_enabled_entities(\n        sg_session,\n        sg_project,\n        sg_enabled_entities\n    )\n\n    if not project_code_field:\n        project_code_field = \"code\"\n\n    sg_ay_dicts = {\n        sg_project[\"id\"]: _sg_to_ay_dict(\n            sg_project,\n            project_code_field,\n            custom_attribs_map,\n            default_task_type\n        ),\n    }\n\n    sg_ay_dicts_parents: Dict[str, set] = (\n        collections.defaultdict(set)\n    )\n\n    for enabled_entity in project_enabled_entities:\n        entity_name, parent_field = enabled_entity\n\n        sg_entities = sg_session.find(\n            entity_name,\n            filters=[[\"project\", \"is\", sg_project]],\n            fields=query_fields,\n        )\n\n        for sg_entity in sg_entities:\n            parent_id = sg_project[\"id\"]\n\n            if (\n                parent_field != \"project\"\n                and sg_entity[parent_field]\n                and entity_name != \"Asset\"\n            ):\n\n                sg_parent = sg_entity[parent_field]\n\n                # Parenting in Project tracking settings can\n                # point to a non-entity entry (e.g. AYON Sync status).\n                # Set parent id only if defined parent is a valid entity.\n                if isinstance(sg_parent, dict) and sg_parent.get(\"id\"):\n                    parent_id = sg_parent[\"id\"]\n                    parent_type = sg_parent[\"type\"]\n                    parent_id = f'{parent_type}_{parent_id}'\n\n            # Reparent the current SG Asset under an AssetCategory ?\n            elif (\n                entity_name == \"Asset\"\n                and sg_entity.get(\"sg_asset_type\")\n            ):\n                # Asset Categories (sg_asset_type) are not entities\n                # (or at least aren't queryable) in ShotGrid\n                # thus here we create common folders.\n                asset_category = sg_entity[\"sg_asset_type\"]\n                # asset category entity name\n                cat_ent_name = slugify_string(asset_category).lower()\n\n                if cat_ent_name not in sg_ay_dicts:\n                    asset_category_entity = {\n                        \"label\": asset_category,\n                        \"name\": cat_ent_name,\n                        \"attribs\": {\n                            SHOTGRID_ID_ATTRIB: slugify_string(\n                                asset_category).lower(),\n                            SHOTGRID_TYPE_ATTRIB: \"AssetCategory\",\n                        },\n                        \"data\": {\n                            CUST_FIELD_CODE_ID: None,\n                            CUST_FIELD_CODE_SYNC: None,\n                        },\n                        \"type\": \"folder\",\n                        \"folder_type\": \"AssetCategory\",\n                    }\n                    sg_ay_dicts[cat_ent_name] = asset_category_entity\n                    sg_ay_dicts_parents[sg_project[\"id\"]].add(cat_ent_name)\n\n                parent_id = cat_ent_name\n\n            _add_task_assignees(sg_entity)\n\n            sg_ay_dict = _sg_to_ay_dict(\n                sg_entity,\n                project_code_field,\n                custom_attribs_map,\n                default_task_type\n            )\n\n            sg_id = (\n                f'{sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB]}_'\n                f'{sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB]}'\n            )\n            sg_ay_dicts[sg_id] = sg_ay_dict\n            sg_ay_dicts_parents[parent_id].add(sg_id)\n\n    return sg_ay_dicts, sg_ay_dicts_parents\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_entity_as_ay_dict","title":"<code>get_sg_entity_as_ay_dict(sg_session, sg_type, sg_id, project_code_field, default_task_type, custom_attribs_map=None, extra_fields=None, retired_only=False)</code>","text":"<p>Get a ShotGrid entity, and morph it to an AYON compatible one.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>sg_type</code> <code>str</code> <p>The ShotGrid entity type.</p> required <code>sg_id</code> <code>int</code> <p>ShotGrid ID of the entity to query.</p> required <code>project_code_field</code> <code>str</code> <p>The ShotGrid project code field.</p> required <code>default_task_type</code> <code>str</code> <p>The default task type to use.</p> required <code>custom_attribs_map</code> <code>Optional[dict]</code> <p>Dictionary that maps names of attributes in AYON to ShotGrid equivalents.</p> <code>None</code> <code>extra_fields</code> <code>Optional[list]</code> <p>List of optional fields to query.</p> <code>None</code> <code>retired_only</code> <code>bool</code> <p>Whether to return only retired entities.</p> <code>False</code> <p>Returns:     new_entity (dict): The ShotGrid entity ready for AYON consumption.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_entity_as_ay_dict(\n    sg_session: shotgun_api3.Shotgun,\n    sg_type: str,\n    sg_id: int,\n    project_code_field: str,\n    default_task_type: str,\n    custom_attribs_map: Optional[Dict[str, str]] = None,\n    extra_fields: Optional[list] = None,\n    retired_only: Optional[bool] = False,\n) -&gt; dict:\n    \"\"\"Get a ShotGrid entity, and morph it to an AYON compatible one.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        sg_type (str): The ShotGrid entity type.\n        sg_id (int): ShotGrid ID of the entity to query.\n        project_code_field (str): The ShotGrid project code field.\n        default_task_type (str): The default task type to use.\n        custom_attribs_map (Optional[dict]): Dictionary that maps names of\n            attributes in AYON to ShotGrid equivalents.\n        extra_fields (Optional[list]): List of optional fields to query.\n        retired_only (bool): Whether to return only retired entities.\n    Returns:\n        new_entity (dict): The ShotGrid entity ready for AYON consumption.\n    \"\"\"\n    query_fields = list(SG_COMMON_ENTITY_FIELDS)\n    if extra_fields and isinstance(extra_fields, list):\n        query_fields.extend(extra_fields)\n    else:\n        extra_fields = []\n\n    # If custom attributes are passed, query each of them\n    # NOTE: we query both with the prefix \"sg_\" and without\n    # to account for the fact that some attributes are built-in\n    # and some aren't in SG\n    if custom_attribs_map:\n        for sg_attrib in custom_attribs_map.values():\n            query_fields.extend([f\"sg_{sg_attrib}\", sg_attrib])\n\n    if project_code_field not in query_fields:\n        query_fields.append(project_code_field)\n\n    sg_entity = sg_session.find_one(\n        sg_type,\n        filters=[[\"id\", \"is\", sg_id]],\n        fields=query_fields,\n        retired_only=retired_only\n    )\n\n    if not sg_entity:\n        return {}\n\n    _add_task_assignees(sg_entity)\n\n    sg_ay_dict = _sg_to_ay_dict(\n        sg_entity, project_code_field, custom_attribs_map, default_task_type\n    )\n\n    for field in extra_fields:\n        sg_value = sg_entity.get(field)\n        # If no value in SG entity skip\n        if sg_value is None:\n            continue\n\n        sg_ay_dict[\"data\"][field] = sg_value\n\n    return sg_ay_dict\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_entity_parent_field","title":"<code>get_sg_entity_parent_field(sg_session, sg_project, sg_entity_type, sg_enabled_entities)</code>","text":"<p>Find the ShotGrid entity field that points to its parent.</p> <p>This is handy since there is really no way to tell the parent entity of a ShotGrid entity unless you don't know this field, and it can change based on projects and their Tracking Settings.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>ShotGrid Session object.</p> required <code>sg_project</code> <code>dict</code> <p>ShotGrid Project dict representation.</p> required <code>sg_entity_type</code> <code>str</code> <p>ShotGrid Entity type.</p> required <p>Returns:</p> Name Type Description <code>sg_parent_field</code> <code>str</code> <p>The field that points to the entity parent.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_entity_parent_field(\n    sg_session: shotgun_api3.Shotgun,\n    sg_project: dict,\n    sg_entity_type: str,\n    sg_enabled_entities: list\n) -&gt; str:\n    \"\"\"Find the ShotGrid entity field that points to its parent.\n\n    This is handy since there is really no way to tell the parent entity of\n    a ShotGrid entity unless you don't know this field, and it can change based\n    on projects and their Tracking Settings.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): ShotGrid Session object.\n        sg_project (dict): ShotGrid Project dict representation.\n        sg_entity_type (str): ShotGrid Entity type.\n\n    Returns:\n        sg_parent_field (str): The field that points to the entity parent.\n    \"\"\"\n    sg_parent_field = \"\"\n\n    for entity_tuple in get_sg_project_enabled_entities(\n        sg_session, sg_project, sg_enabled_entities\n    ):\n        entity_type, parent_field = entity_tuple\n\n        if entity_type == sg_entity_type:\n            sg_parent_field = parent_field\n\n    return sg_parent_field\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_missing_ay_attributes","title":"<code>get_sg_missing_ay_attributes(sg_session)</code>","text":"<p>Ensure all the AYON required fields are present in ShotGrid.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Instance of a ShotGrid API Session.</p> required <p>Returns:</p> Name Type Description <code>missing_attrs</code> <code>list</code> <p>Contains any missing attribute, if any.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_missing_ay_attributes(sg_session: shotgun_api3.Shotgun):\n    \"\"\" Ensure all the AYON required fields are present in ShotGrid.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Instance of a ShotGrid API Session.\n\n    Returns:\n        missing_attrs (list): Contains any missing attribute, if any.\n    \"\"\"\n    missing_attrs = []\n    for ayon_attr, attr_dict in SG_PROJECT_ATTRS.items():\n        try:\n            sg_session.schema_field_read(\n                \"Project\",\n                field_name=f\"sg_{ayon_attr}\"\n            )\n        except Exception:\n            # shotgun_api3.shotgun.Fault: API schema_field_read()\n            missing_attrs.append(ayon_attr)\n\n    return missing_attrs\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_pipeline_steps","title":"<code>get_sg_pipeline_steps(sg_session, shotgrid_project, sg_enabled_entities)</code>","text":"<p>Get all pipeline steps on a ShotGrid project.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>ShotGrid Session object.</p> required <code>shotgrid_project</code> <code>dict</code> <p>The project owning the Pipeline steps.</p> required <p>Returns:     sg_steps (list): ShotGrid Project Pipeline Steps list.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_pipeline_steps(\n    sg_session: shotgun_api3.Shotgun,\n    shotgrid_project: dict,\n    sg_enabled_entities: list,\n) -&gt; list:\n    \"\"\" Get all pipeline steps on a ShotGrid project.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): ShotGrid Session object.\n        shotgrid_project (dict): The project owning the Pipeline steps.\n    Returns:\n        sg_steps (list): ShotGrid Project Pipeline Steps list.\n    \"\"\"\n    sg_steps = []\n    enabled_entities = get_sg_project_enabled_entities(\n        sg_session,\n        shotgrid_project,\n        sg_enabled_entities\n    )\n\n    pipeline_steps = sg_session.find(\n        \"Step\",\n        filters=[{\n                \"filter_operator\": \"any\",\n                \"filters\": [\n                    [\"entity_type\", \"is\", entity]\n                    for entity, _ in enabled_entities\n                ]\n            }],\n        fields=[\"code\", \"short_name\", \"entity_type\"]\n    )\n\n    for step in pipeline_steps:\n        sg_steps.append((step[\"code\"], step[\"short_name\"].lower()))\n\n    sg_steps = list(set(sg_steps))\n    return sg_steps\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_project_by_id","title":"<code>get_sg_project_by_id(sg_session, project_id, extra_fields=None)</code>","text":"<p>Find a project in ShotGrid by its id.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>project_id</code> <code>int</code> <p>The project ID to look for.</p> required <code>extra_fields</code> <code>Optional[list]</code> <p>List of optional fields to query.</p> <code>None</code> <p>Returns:     sg_project (dict): ShotGrid Project dict.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_project_by_id(\n    sg_session: shotgun_api3.Shotgun,\n    project_id: int,\n    extra_fields: Optional[list] = None\n) -&gt; dict:\n    \"\"\" Find a project in ShotGrid by its id.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        project_id (int): The project ID to look for.\n        extra_fields (Optional[list]): List of optional fields to query.\n    Returns:\n        sg_project (dict): ShotGrid Project dict.\n     \"\"\"\n    common_fields = list(SG_COMMON_ENTITY_FIELDS)\n\n    if extra_fields:\n        common_fields.extend(extra_fields)\n\n    sg_project = sg_session.find_one(\n        \"Project\",\n        [[\"id\", \"is\", project_id]],\n        fields=common_fields,\n    )\n\n    if not sg_project:\n        raise ValueError(f\"Unable to find project {project_id} in ShotGrid.\")\n\n    return sg_project\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_project_by_name","title":"<code>get_sg_project_by_name(sg_session, project_name, custom_fields=None)</code>","text":"<p>Find a project in ShotGrid by its name.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>project_name</code> <code>str</code> <p>The project name to look for.</p> required <p>Returns:     sg_project (dict): ShotGrid Project dict.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_project_by_name(\n    sg_session: shotgun_api3.Shotgun,\n    project_name: str,\n    custom_fields: list = None,\n) -&gt; dict:\n    \"\"\" Find a project in ShotGrid by its name.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        project_name (str): The project name to look for.\n    Returns:\n        sg_project (dict): ShotGrid Project dict.\n    \"\"\"\n    common_fields = [\"id\", \"code\", \"name\", \"sg_status\"]\n\n    if custom_fields and isinstance(custom_fields, list):\n        common_fields += custom_fields\n\n    sg_project = sg_session.find_one(\n        \"Project\",\n        [[\"name\", \"is\", project_name]],\n        fields=common_fields,\n    )\n\n    if not sg_project:\n        raise ValueError(f\"Unable to find project {project_name} in ShotGrid.\")\n\n    return sg_project\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_project_enabled_entities","title":"<code>get_sg_project_enabled_entities(sg_session, sg_project, sg_enabled_entities)</code>","text":"<p>Function to get all enabled entities in a project.</p> <p>ShotGrid allows a lot of flexibility when it comes to hierarchies, here we find all the enabled entity type (Shots, Sequence, etc) in a specific project and provide the configured field that points to the parent entity.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>project_name</code> <code>str</code> <p>The project name to look for.</p> required <code>sg_enabled_entities</code> <code>list</code> <p>The SG entities enabled from the settings.</p> required <p>Returns:</p> Name Type Description <code>project_entities</code> <code>list[tuple(entity type, parent field)]</code> <p>List of enabled entities names and their respective parent field.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_project_enabled_entities(\n    sg_session: shotgun_api3.Shotgun,\n    sg_project: dict,\n    sg_enabled_entities: list,\n) -&gt; list:\n    \"\"\"Function to get all enabled entities in a project.\n\n    ShotGrid allows a lot of flexibility when it comes to hierarchies, here we\n    find all the enabled entity type (Shots, Sequence, etc) in a specific\n    project and provide the configured field that points to the parent entity.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        project_name (str): The project name to look for.\n        sg_enabled_entities (list): The SG entities enabled from the settings.\n\n    Returns:\n        project_entities (list[tuple(entity type, parent field)]): List of\n            enabled entities names and their respective parent field.\n    \"\"\"\n    sg_project = sg_session.find_one(\n        \"Project\",\n        filters=[[\"id\", \"is\", sg_project[\"id\"]]],\n        fields=[\"tracking_settings\", \"name\", \"code\"]\n    )\n\n    if not sg_project:\n        log.error(\n            f\"Unable to find {sg_project} in the ShotGrid instance.\"\n        )\n        return []\n\n    sg_project_schema = sg_session.schema_entity_read(\n        project_entity=sg_project\n    )\n\n    project_navigation = sg_project[\"tracking_settings\"][\"navchains\"]\n    # explicit parent fields - not part of hierarchy\n    project_navigation[\"Task\"] = \"entity\"\n    project_navigation[\"Version\"] = \"entity\"\n\n    project_entities = []\n\n    for sg_entity_type in sg_enabled_entities:\n        if sg_entity_type == \"Project\":\n            continue\n\n        is_entity_enabled = sg_project_schema.get(\n            sg_entity_type, {}\n        ).get(\"visible\", {}).get(\"value\", False)\n\n        if not is_entity_enabled:\n            log.warning(\n                \"%s is enabled in AYON settings for project \"\n                \"but hidden in Flow tracking settings for project %r. \"\n                \"It'll be ignored, please check \"\n                \"your configuration.\",\n                sg_entity_type,\n                sg_project.get(\"name\") or sg_project.get(\"code\"),\n            )\n\n        else:\n            parent_field = project_navigation.get(sg_entity_type, None)\n\n            if parent_field and parent_field != \"__flat__\":\n                if \",\" in parent_field:\n                    # This catches instances where the Hierarchy is set to\n                    # something like \"Seq &gt; Scene &gt; Shot\" which returns\n                    # a string like so: 'sg_scene,Scene.sg_sequence' and\n                    # confusing enough we want the first element to be\n                    # the parent.\n                    parent_field = parent_field.split(\",\")[0]\n\n                project_entities.append((\n                    sg_entity_type,\n                    parent_field.replace(f\"{sg_entity_type}.\", \"\")\n                ))\n            else:\n                project_entities.append((sg_entity_type, \"project\"))\n\n    return project_entities\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_statuses","title":"<code>get_sg_statuses(sg_session, sg_entity_type=None)</code>","text":"<p>Get all supported ShotGrid Statuses.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>ShotGrid Session object.</p> required <code>sg_entity_type</code> <code>str</code> <p>ShotGrid Entity type.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>sg_statuses</code> <code>dict[str, str]</code> <p>ShotGrid Project Statuses dictionary mapping the status short code and its long name.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_statuses(\n    sg_session: shotgun_api3.Shotgun,\n    sg_entity_type: Optional[str] = None\n) -&gt; dict:\n    \"\"\" Get all supported ShotGrid Statuses.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): ShotGrid Session object.\n        sg_entity_type (str): ShotGrid Entity type.\n\n    Returns:\n        sg_statuses (dict[str, str]): ShotGrid Project Statuses dictionary\n            mapping the status short code and its long name.\n    \"\"\"\n    # If given an entity type, we filter out the statuses by just the ones\n    # supported by that entity\n    # NOTE: this is a limitation in AYON as the statuses are global and not\n    # per entity\n    if sg_entity_type:\n        if sg_entity_type == \"Project\":\n            status_field = \"sg_status\"\n        else:\n            status_field = \"sg_status_list\"\n        entity_status = sg_session.schema_field_read(sg_entity_type, status_field)\n        sg_statuses = entity_status[\"sg_status_list\"][\"properties\"][\"display_values\"][\"value\"]\n        return sg_statuses\n\n    sg_statuses = {\n        status[\"code\"]: status[\"name\"]\n        for status in sg_session.find(\"Status\", [], fields=[\"name\", \"code\"])\n    }\n    return sg_statuses\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_tags","title":"<code>get_sg_tags(sg_session)</code>","text":"<p>Get all tags on a ShotGrid project.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>ShotGrid Session object.</p> required <code>sg_entity_type</code> <code>str</code> <p>ShotGrid Entity type.</p> required <p>Returns:</p> Name Type Description <code>sg_tags</code> <code>dict[str, str]</code> <p>ShotGrid Project tags dictionary mapping the tag name to its id.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_tags(\n    sg_session: shotgun_api3.Shotgun\n) -&gt; dict:\n    \"\"\" Get all tags on a ShotGrid project.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): ShotGrid Session object.\n        sg_entity_type (str): ShotGrid Entity type.\n\n    Returns:\n        sg_tags (dict[str, str]): ShotGrid Project tags dictionary\n            mapping the tag name to its id.\n    \"\"\"\n    sg_tags = {\n        tags[\"name\"].lower(): tags[\"id\"]\n        for tags in sg_session.find(\"Tag\", [], fields=[\"name\", \"id\"])\n    }\n    return sg_tags\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_user_by_id","title":"<code>get_sg_user_by_id(sg_session, user_id, extra_fields=None)</code>","text":"<p>Find a user in ShotGrid by its id.</p> <p>Parameters:</p> Name Type Description Default <code>sg_session</code> <code>Shotgun</code> <p>Shotgun Session object.</p> required <code>user_id</code> <code>int</code> <p>The user ID to look for.</p> required <code>extra_fields</code> <code>Optional[list]</code> <p>List of optional fields to query.</p> <code>None</code> <p>Returns:     sg_project (dict): ShotGrid Project dict.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_user_by_id(\n    sg_session: shotgun_api3.Shotgun,\n    user_id: int,\n    extra_fields: Optional[list] = None\n) -&gt; dict:\n    \"\"\" Find a user in ShotGrid by its id.\n\n    Args:\n        sg_session (shotgun_api3.Shotgun): Shotgun Session object.\n        user_id (int): The user ID to look for.\n        extra_fields (Optional[list]): List of optional fields to query.\n    Returns:\n        sg_project (dict): ShotGrid Project dict.\n     \"\"\"\n    common_fields = list(SG_COMMON_ENTITY_FIELDS)\n\n    if extra_fields:\n        common_fields.extend(extra_fields)\n\n    sg_user = sg_session.find_one(\n        \"HumanUser\",\n        [[\"id\", \"is\", user_id]],\n        fields=common_fields,\n    )\n\n    if not sg_user:\n        raise ValueError(f\"Unable to find HumanUser {user_id} in ShotGrid.\")\n\n    return sg_user\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.get_sg_user_id","title":"<code>get_sg_user_id(ayon_username)</code>","text":"<p>Returns the ShotGrid user ID for a given AYON username.</p> <p>Queries AYON's user database to retrieve the associated ShotGrid user ID for a specified AYON username. If no association is found, the method returns <code>-1</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ayon_username</code> <code>str</code> <p>The username in AYON.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>[int]</code> <p>The corresponding ShotGrid user ID, or <code>-1</code> if not found.</p> <p>-1 returned as caching is used to differentiate between missing user in cache AND user without SG id</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def get_sg_user_id(ayon_username: str) -&gt; [int]:\n    \"\"\"Returns the ShotGrid user ID for a given AYON username.\n\n    Queries AYON's user database to retrieve the associated ShotGrid user ID\n    for a specified AYON username. If no association is found, the method\n    returns `-1`.\n\n    Args:\n        ayon_username (str): The username in AYON.\n\n    Returns:\n        int: The corresponding ShotGrid user ID, or `-1` if not found.\n\n    -1 returned as caching is used to differentiate between missing user in\n    cache AND user without SG id\n    \"\"\"\n    ayon_user = ayon_api.get_user(ayon_username)\n    if not ayon_user or not ayon_user[\"data\"].get(\"sg_user_id\"):\n        sg_user_id = -1\n    else:\n        sg_user_id = ayon_user[\"data\"][\"sg_user_id\"]\n    return sg_user_id\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.handle_comment","title":"<code>handle_comment(sg_ay_dict, sg_session, entity_hub)</code>","text":"<p>Transforms content and links from SG to matching AYON structures.</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def handle_comment(sg_ay_dict, sg_session, entity_hub):\n    \"\"\"Transforms content and links from SG to matching AYON structures.\"\"\"\n    sg_note_id = sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB]\n    sg_note, sg_note_id = _get_sg_note(sg_note_id, sg_session)\n\n    if not sg_note:\n        log.warning(f\"Couldn't find note '{sg_note_id}'\")\n        return\n\n    ayon_user_name = _get_ayon_user_name(sg_note[\"user\"])\n\n    ay_parent_entity = _get_sg_note_parent_entity(entity_hub, sg_note, sg_session)\n    if not ay_parent_entity:\n        log.warning(f\"Cannot find parent for comment '{sg_note_id}'\")\n        return\n\n    content = _get_content_with_notifications(sg_note)\n\n    project_name = entity_hub.project_name\n\n    sg_ayon_id = sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID)\n    ayon_comment = None\n    if sg_ayon_id:\n        ayon_comment = ayon_api.get_activity_by_id(project_name, sg_ayon_id)\n\n    if not ayon_comment:\n        ay_activity_id = _add_comment(\n            sg_session,\n            project_name,\n            ay_parent_entity[\"id\"],\n            ay_parent_entity[\"entity_type\"],\n            ayon_user_name,\n            content,\n            sg_note,\n        )\n    else:\n        ay_activity_id = _update_comment(\n            sg_session,\n            project_name,\n            ay_parent_entity,\n            ay_parent_entity[\"entity_type\"],\n            ayon_comment,\n            sg_note,\n        )\n    #updates SG with AYON comment id\n    sg_session.update(\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_TYPE_ATTRIB, \"\"),\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_ID_ATTRIB, \"\"),\n        {\n            CUST_FIELD_CODE_ID: ay_activity_id\n        }\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.update_ay_entity_custom_attributes","title":"<code>update_ay_entity_custom_attributes(ay_entity, sg_ay_dict, custom_attribs_map, values_to_update=None, ay_project=None)</code>","text":"<p>Update AYON entity custom attributes from ShotGrid dictionary</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def update_ay_entity_custom_attributes(\n    ay_entity: Union[ProjectEntity, FolderEntity, TaskEntity],\n    sg_ay_dict: dict,\n    custom_attribs_map: dict,\n    values_to_update: Optional[list] = None,\n    ay_project: ProjectEntity = None,\n):\n    \"\"\"Update AYON entity custom attributes from ShotGrid dictionary\"\"\"\n\n    # Check renaming through label\n    if (\n        sg_ay_dict[\"type\"].lower() != \"version\"\n        and sg_ay_dict[\"label\"]\n        and (ay_entity.label or ay_entity.get_name()) != sg_ay_dict[\"label\"]\n    ):\n        ay_entity.label = sg_ay_dict[\"label\"]\n\n    # Loop over custom attributes and detect changes.\n    for ay_attrib, _ in custom_attribs_map.items():\n        if values_to_update and ay_attrib not in values_to_update:\n            continue\n\n        attrib_value = sg_ay_dict[\"attribs\"].get(ay_attrib) or sg_ay_dict.get(ay_attrib)\n        if attrib_value is None:\n            continue\n\n        if ay_attrib == \"tags\":\n            ay_entity.tags = [tag[\"name\"] for tag in attrib_value]\n        elif ay_attrib == \"status\":\n            # Entity hub expects the statuses to be provided with the `name` and\n            # not the `short_name` (which is what we get from SG) so we convert\n            # the short name back to the long name before setting it\n            status_mapping = {\n                status.short_name: status\n                for status in ay_project.statuses\n            }\n            new_status = status_mapping.get(attrib_value)\n            if new_status and ay_entity.entity_type in new_status.scope:\n                ay_entity.status = new_status.name\n            else:\n                logging.warning(\n                    f\"Status '{attrib_value}' not available\"\n                    f\" for {ay_entity.entity_type}.\"\n                )\n        elif ay_attrib == \"assignees\":\n            if hasattr(ay_entity, \"assignees\"):\n                ay_entity.assignees = attrib_value\n            else:\n                logging.warning(\n                    \"Assignees sync not available with current\"\n                    \" ayon-python-api version.\"\n                )\n        else:\n\n            # SG API returns date values as string.\n            # Attempt to detect date field values.\n            try:\n                value_as_date = datetime.datetime.strptime(\n                    str(attrib_value),\n                    \"%Y-%m-%d\",\n                )\n\n            except (ValueError, TypeError):\n                value_as_date = None\n\n            # Field value matches a valid date,\n            if value_as_date:\n                all_attrib_schemas = ayon_api.get_attributes_schema()\n                attrib_schemas = [\n                    attr for attr in all_attrib_schemas[\"attributes\"]\n                    if attr[\"name\"] == ay_attrib\n                ]\n                # confirm target AYON attribute is of type datetime.\n                if not (\n                    attrib_schemas\n                    and attrib_schemas[0][\"data\"][\"type\"] == \"datetime\"\n                ):\n                    continue\n\n                # Check is a different date\n                current_set_date = ay_entity.attribs.get(ay_attrib)\n                value_as_utc = value_as_date.replace(\n                    tzinfo=datetime.timezone.utc).date()\n                if (\n                    current_set_date\n                    and datetime.datetime.fromisoformat(current_set_date).date()\n                    == value_as_utc\n                ):\n                    continue\n\n                attrib_value = value_as_date\n\n            ay_entity.attribs.set(ay_attrib, attrib_value)\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/utils.html#services.shotgrid_common.utils.update_movie_paths","title":"<code>update_movie_paths(sg_session, ayon_entity_hub, payload)</code>","text":"<p>Uses prepare sg_ field to store sg_path_to_ to particular Version</p> Source code in <code>services/shotgrid_common/utils.py</code> <pre><code>def update_movie_paths(\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    payload: dict\n):\n    \"\"\"Uses prepare sg_* field to store sg_path_to_* to particular Version\"\"\"\n    ay_version_id = payload.pop(\"versionId\")\n    log.info(f\"Updating paths '{ay_version_id}'\")\n\n    ay_version_entity = ayon_entity_hub.get_version_by_id(ay_version_id)\n    if not ay_version_entity:\n        raise ValueError(\n            \"Event has a non existent version entity \"\n            f\"'{ay_version_id}'\"\n        )\n\n    sg_version_id = ay_version_entity.attribs.get(SHOTGRID_ID_ATTRIB)\n    sg_version_type = ay_version_entity.attribs.get(SHOTGRID_TYPE_ATTRIB)\n\n    if not sg_version_id:\n        raise ValueError(f\"Version '{ay_version_id} not yet synched to SG.\")\n\n    sg_session.update(\n        sg_version_type,\n        sg_version_id,\n        payload\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/validate.html","title":"validate","text":"<p>Validation</p>"},{"location":"autoapi/services/shotgrid_common/validate.html#services.shotgrid_common.validate.check_project_disabled_entities","title":"<code>check_project_disabled_entities(ay_project, sg_project, enabled_entities, sg_session)</code>","text":"<p>Ensure enabled SG entities are compatibles for a given project.</p> Source code in <code>services/shotgrid_common/validate.py</code> <pre><code>def check_project_disabled_entities(\n    ay_project,\n    sg_project,\n    enabled_entities,\n    sg_session,\n):\n    \"\"\" Ensure enabled SG entities are compatibles for a given project.\n    \"\"\"\n    disabled_entities = []\n    ay_entities = [\n        folder[\"name\"]\n        for folder in ay_project.project_entity.folder_types\n        if folder[\"name\"] in enabled_entities\n    ]\n\n    sg_entities = [\n        entity_name\n        for entity_name, _ in get_sg_project_enabled_entities(\n            sg_session,\n            sg_project,\n            enabled_entities\n        )\n    ]\n\n    disabled_entities = [\n        ay_entity\n        for ay_entity in ay_entities\n        if ay_entity not in sg_entities\n    ]\n\n    if disabled_entities:\n        # This must be done manually and cannot be changed from the API yet.\n        # https://community.shotgridsoftware.com/t/set-project-configuration-via-python/15416\n        return (\n            f\"Unable to sync project {sg_project}, you need \"\n            f\"to manually enable the following entities in Shotgrid: {disabled_entities}. \"\n            \"This is done via Project &gt; Project Actions &gt; Tracking Settings.\"\n        )\n\n    return None\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/validate.html#services.shotgrid_common.validate.validate_custom_attribs_map","title":"<code>validate_custom_attribs_map(sg_session, custom_attribs_map, log=None)</code>","text":"<p>Ensure the custom attribute mapping between AYON and Flow is OK.</p> Source code in <code>services/shotgrid_common/validate.py</code> <pre><code>def validate_custom_attribs_map(\n    sg_session,\n    custom_attribs_map,\n    log=None\n):\n    \"\"\" Ensure the custom attribute mapping between AYON and Flow is OK.\n    \"\"\"\n    log = log or get_logger(__file__)\n    errors = []\n    report = []\n    sg_schemas = {}\n\n    AY_SG_TYPE_MAPPING = {\n        \"number\": \"integer\",\n        \"float\": \"float\",\n        \"text\": \"string\",\n        \"date_time\": \"datetime\",\n        \"date\": \"datetime\",\n    }\n\n    reversed_type_mapping = collections.defaultdict(list)\n    for key, value in AY_SG_TYPE_MAPPING.items():\n        reversed_type_mapping[value].append(key)\n\n    all_mapped_sgs = [entry[\"sg\"] for entry in custom_attribs_map]\n    all_mapped_ays = [entry[\"ayon\"] for entry in custom_attribs_map]\n\n    duplicate_sgs = [\n        item for item, count in collections.Counter(all_mapped_sgs).items()\n        if item and count &gt; 1\n    ]\n    duplicate_ays = [\n        item for item, count in collections.Counter(all_mapped_ays).items()\n        if item and count &gt; 1\n    ]\n\n    if duplicate_ays:\n        errors.append(\n            f\"Found duplicate settings for AYON attribute(s): {duplicate_ays}. \"\n            \"Cannot sync 2 different Flow fields to the same AYON attribute.\\n\"\n            \"Adjust your custom attribute mapping.\"\n        )\n\n    if duplicate_sgs:\n        errors.append(\n            f\"Found duplicate settings for SG field(s): {duplicate_sgs}. \"\n            \"Cannot sync 2 different AYON attribute to the same Flow field.\\n\"\n            \"Adjust your custom attribute mapping.\"\n        )\n\n    for entry in custom_attribs_map:\n\n        if not entry[\"sg\"]:\n            report.append(\n                f'AYON attribute {entry[\"ayon\"]} will not be mapped to Flow '\n                f'(no SG field set) for entities {entry[\"scope\"]}.'\n            )\n            continue\n\n        if not entry[\"scope\"]:\n            report.append(\n                f'AYON attribute {entry[\"ayon\"]} will not be mapped to Flow '\n                \"(empty scope).\"\n            )\n            continue\n\n        # Ensure that the mapped field exist for each scope\n        # in both AYON and SG with specified type.\n        for scope in entry[\"scope\"]:\n\n            if scope not in sg_schemas:\n                sg_schemas[scope] = sg_session.schema_field_read(scope)\n\n            fields_options = (f'{entry[\"sg\"]}', f'sg_{entry[\"sg\"]}')\n            for field_attempt in fields_options:\n                if field_attempt in list(sg_schemas[scope]):\n                    field_schema = sg_schemas[scope][field_attempt]\n\n                    if not field_schema[\"editable\"][\"value\"]:\n                        errors.append(\n                            f\"SG field {scope}.{field_attempt} \"\n                            \"is set as non-editable.\"\n                        )\n\n                    conformed_field_type = AY_SG_TYPE_MAPPING.get(\n                        field_schema[\"data_type\"][\"value\"],\n                        \"unknown\"\n                    )\n\n                    # Configuration is trying to sync an AYON attribute type we\n                    # do not expect to be synced over Flow. Flag it to the user\n                    # as consequences are pretty unpredictable.\n                    if entry[\"type\"] not in AY_SG_TYPE_MAPPING.values():\n                        report.append(\n                            f\"Attempt to sync a non-standard AYON attribute {scope}.\"\n                            f'{entry[\"ayon\"]}[type={entry[\"type\"]}] to {scope}.{field_attempt} '\n                            f\"[type={conformed_field_type}].\"\n                            \"This may lead to issues and/or inconsistent results.\"\n                        )\n\n                    # The AYON attribute is fine. Its counterpart exists in Flow, but not in\n                    # a data type we anticipated, this is likely something wrong with the Flow\n                    # field configuration.\n                    # E.g. syncing AYON attribute to a custom multi_entity Flow field.\n                    elif conformed_field_type == \"unknown\":\n                        expected_types = reversed_type_mapping[entry[\"type\"]]\n                        errors.append(\n                            f'Cannot sync AYON {scope}.{entry[\"ayon\"]} to Flow {scope}.{field_attempt}. '\n                            f\"Flow field is not of data type: {expected_types}.\\n\"\n                            \"Adjust either Flow field configuration or the AYON mapping settings.\"\n                        )\n\n                    # Both AYON attribute and Flow field data types are standard,\n                    # but they do not match (e.g. syncing a number to a string).\n                    elif conformed_field_type != entry[\"type\"]:\n                        errors.append(\n                            f'Cannot sync AYON {scope}.{entry[\"ayon\"]} to '\n                            f\"Flow field {scope}.{field_attempt} (invalid type). \"\n                            f'Expected Flow data type \"{entry[\"type\"]}\" got \"{conformed_field_type}\".\\n'\n                            \"Adjust either Flow field configuration or the AYON mapping settings.\"\n                        )\n\n                    break\n\n            else:\n                report.append(\n                    f'{scope}.{entry[\"sg\"]}: field does not exists in Flow.'\n                )\n\n    if report:\n        message = \"Custom AYON attributes mapping to Flow fields:\\n - \"\n        message += \"\\n - \".join(report)\n        log.debug(message)\n\n    if errors:\n        errors.insert(0, \"Settings validation failed:\")\n        raise ValueError(\"\\n - \".join(errors))\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/validate.html#services.shotgrid_common.validate.validate_projects_sync","title":"<code>validate_projects_sync(sg_session, enabled_entities, log=None)</code>","text":"<p>Validate overhall project configuration.</p> Source code in <code>services/shotgrid_common/validate.py</code> <pre><code>def validate_projects_sync(\n    sg_session,\n    enabled_entities,\n    log=None\n):\n    \"\"\" Validate overhall project configuration.\n    \"\"\"\n    log = log or get_logger(__file__)\n    errors = []\n    reports = {}\n    all_ay_projects = ayon_api.get_projects()\n\n    for ay_project in all_ay_projects:\n\n        project_name = ay_project[\"name\"]\n        report = []\n        reports[project_name] = report\n\n        if not ay_project[\"attrib\"].get(constants.SHOTGRID_ID_ATTRIB):\n            report.append(\"AY Project is not set up to sync with SG.\")\n            continue\n\n        sg_project_id = int(ay_project[\"attrib\"][constants.SHOTGRID_ID_ATTRIB])\n        sg_project = sg_session.find_one(\n            \"Project\",\n            [[\"id\", \"is\", sg_project_id]],\n            fields=[\"code\", \"name\", \"sg_ayon_auto_sync\"],\n        )\n\n        if not sg_project:\n            report.append(\n                \"AY Project is supposed to sync with SG. \"\n                f\"However associated project cannot be found in SG (id: {sg_project_id})\"\n            )\n            continue\n\n        error = check_project_disabled_entities(\n            EntityHub(project_name),\n            sg_project,\n            enabled_entities,\n            sg_session,\n        )\n\n        if error:\n            errors.append(error)\n            continue\n\n        # Autosync\n        if sg_project.get(\"sg_ayon_auto_sync\") and ay_project[\"attrib\"].get(\"shotgridPush\"):\n            report.append(\n                \"AY project is properly setup to sync with Flow automatically.\",\n            )\n\n        elif sg_project.get(\"sg_ayon_auto_sync\"):\n            report.append(\n                \"AY project will received updates from Flow automatically, \"\n                \"but it will not push anything back. Enable 'shotgunPush' attribute \"\n                \"of the project anatomy to enable that.\",\n            )\n\n        elif ay_project[\"attrib\"].get(\"shotgridPush\"):\n            report.append(\n                \"AY Project will send updates to Flow automatically, \"\n                \"but it will not pull anything back. Enable 'sg_ayon_auto_sync' field \"\n                \"of the Flow project to enabled that.\"\n            )\n\n        else:\n            report.append(\n                \"AY Project is not setup to push nor pull updates from/to Flow \"\n                \"automatically. Sync must be triggered manually.\"\n            )\n\n        # Check statuses compatibility\n        status_report = _validate_project_statuses_mapping(\n            ay_project,\n            sg_project,\n            enabled_entities,\n            sg_session,\n            log,\n        )\n\n        if status_report:\n            report.extend(status_report)\n\n    if reports:\n        for project_name, report in reports.items():\n            message = f\"AYON Project {project_name}: \"\n            message += \"\\n - \".join(report)\n            log.debug(message)\n\n    if errors:\n        errors.insert(0, \"Project setup validation failed:\")\n        raise ValueError(\"\\n\".join(errors))\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/validate.html#services.shotgrid_common.validate.validate_sg_url","title":"<code>validate_sg_url(sg_url)</code>","text":"<p>Ensure provided shotgrid_server URL is valid.</p> Source code in <code>services/shotgrid_common/validate.py</code> <pre><code>def validate_sg_url(sg_url):\n    \"\"\" Ensure provided shotgrid_server URL is valid.\n    \"\"\"\n    try:\n        resp = requests.get(sg_url)\n        if not resp.ok:\n            raise RuntimeError(\n                f\"Issue reaching {sg_url}: {resp.reason}\"\n            )\n\n    except Exception as error:\n        raise ValueError(f\"Unreachable URL: {sg_url}\") from error\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html","title":"ayon_shotgrid_hub","text":"<p>Influenced by the <code>ayon_api.EntityHub</code> the <code>AyonShotgridHub</code> is a class that provided a valid Project name and code, will perform all the necessary checks and provide methods to keep an AYON and Shotgrid project in sync.</p>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub","title":"<code>AyonShotgridHub</code>","text":"<p>A Hub to manage a Project in both AYON and Shotgrid</p> <p>Provided a correct project name and code, we attempt to initialize both APIs and ensures that both platforms have the required elements to synchronize a project across them.</p> <p>The Shotgrid credentials must have enough permissions to add fields to entities and create entities/projects.</p> <p>Parameters:</p> Name Type Description Default <code>sg_connection</code> <code>Shotgun</code> <p>The Shotgrid connection.</p> required <code>project_name</code> <code>str</code> <p>The project name, cannot contain spaces.</p> required <code>project_code</code> <code>str</code> <p>The project code (3 letter code).</p> required <code>sg_project_code_field</code> <code>str</code> <p>The field in the Shotgrid Project entity that represents the project code.</p> <code>None</code> <code>custom_attribs_map</code> <code>dict</code> <p>A dictionary mapping AYON attributes to Shotgrid fields, without the <code>sg_</code> prefix.</p> <code>None</code> <code>custom_attribs_types</code> <code>dict</code> <p>A dictionary mapping AYON attribute types to Shotgrid field types.</p> <code>None</code> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>class AyonShotgridHub:\n    \"\"\"A Hub to manage a Project in both AYON and Shotgrid\n\n    Provided a correct project name and code, we attempt to initialize both APIs\n    and ensures that both platforms have the required elements to synchronize a\n    project across them.\n\n    The Shotgrid credentials must have enough permissions to add fields to\n    entities and create entities/projects.\n\n    Args:\n        sg_connection (shotgun_api3.Shotgun): The Shotgrid connection.\n        project_name (str):The project name, cannot contain spaces.\n        project_code (str): The project code (3 letter code).\n        sg_project_code_field (str): The field in the Shotgrid Project entity\n            that represents the project code.\n        custom_attribs_map (dict): A dictionary mapping AYON attributes to\n            Shotgrid fields, without the `sg_` prefix.\n        custom_attribs_types (dict): A dictionary mapping AYON attribute types\n            to Shotgrid field types.\n    \"\"\"\n\n    log = get_logger(__file__)\n    custom_attribs_map = {\n        \"status\": \"status_list\",\n        \"tags\": \"tags\",\n        \"assignees\": \"task_assignees\"\n    }\n\n    def __init__(self,\n        sg_connection,\n        project_name,\n        project_code,\n        sg_project_code_field=None,\n        custom_attribs_map=None,\n        custom_attribs_types=None,\n        sg_enabled_entities=None,\n    ):\n        try:\n            self.settings = ayon_api.get_service_addon_settings(project_name)\n\n        except ayon_api.exceptions.HTTPRequestError:\n            self.log.warning(f\"Project {project_name} does not exist in AYON.\")\n            self.settings = ayon_api.get_service_addon_settings()\n\n        except ValueError:\n            # automated tests (service not initialized)\n            if isinstance(sg_connection, mockgun.Shotgun):\n                self.settings = {}\n            else:\n                raise\n\n        self._sg = sg_connection\n\n        self._ay_project = None\n        self._sg_project = None\n\n        if sg_project_code_field:\n            self.sg_project_code_field = sg_project_code_field\n        else:\n            self.sg_project_code_field = \"code\"\n\n        # add custom attributes from settings\n        if custom_attribs_map:\n            self.custom_attribs_map.update(custom_attribs_map)\n\n        self.custom_attribs_types = custom_attribs_types\n\n        if sg_enabled_entities:\n            self.sg_enabled_entities = sg_enabled_entities\n        else:\n            self.sg_enabled_entities = list(AYON_SHOTGRID_ENTITY_TYPE_MAP)\n\n        self.project_name = project_name\n        self.project_code = project_code\n\n    def create_sg_attributes(self):\n        \"\"\"Create all AYON needed attributes in Shotgrid.\"\"\"\n        create_ay_fields_in_sg_project(\n            self._sg, self.custom_attribs_map, self.custom_attribs_types\n        )\n        create_ay_fields_in_sg_entities(\n            self._sg,\n            self.sg_enabled_entities,\n            self.custom_attribs_map,\n            self.custom_attribs_types\n        )\n\n    @property\n    def sg_project(self):\n        return self._sg_project\n\n    @property\n    def entity_hub(self):\n        return self._ay_project\n\n    @property\n    def project_name(self):\n        return self._project_name\n\n    @project_name.setter\n    def project_name(self, project_name):\n        \"\"\"Set the project name\n\n        We make sure the name follows the conventions imposed by ayon-backend,\n        and if it passes we attempt to find the project in both platfomrs.\n        \"\"\"\n        if not PROJECT_NAME_REGEX.match(project_name):\n            raise ValueError(f\"Invalid Project Name: {project_name}\")\n\n        self._project_name = project_name\n\n        try:\n            self._ay_project = EntityHub(project_name)\n            self._ay_project.project_entity\n        except Exception:\n            self.log.warning(f\"Project {project_name} does not exist in AYON.\")\n            self._ay_project = None\n\n        custom_fields = [\n            self.sg_project_code_field,\n            CUST_FIELD_CODE_AUTO_SYNC,\n        ]\n        for attrib in self.custom_attribs_map.values():\n            custom_fields.extend([f\"sg_{attrib}\", attrib])\n\n        try:\n            self._sg_project = get_sg_project_by_name(\n                self._sg,\n                self.project_name,\n                custom_fields=custom_fields\n            )\n        except Exception:\n            self.log.warning(f\"Project {project_name} does not exist in Shotgrid. \")\n            self._sg_project = None\n\n    def create_project(self):\n        \"\"\"Create project in AYON and Shotgrid.\n        \"\"\"\n        if self._ay_project is None:\n            anatomy_preset_name = self.settings.get(\"anatomy_preset\", None)\n\n            # making sure build in preset is not used\n            if anatomy_preset_name == \"_\":\n                anatomy_preset_name = None\n\n            self.log.info(\n                f\"Creating AYON project {self.project_name}\\n\"\n                f\"- project code: {self.project_code}\\n\"\n                f\"- anatomy preset: {anatomy_preset_name}\\n\"\n            )\n            ayon_api.create_project(\n                self.project_name,\n                self.project_code,\n                preset_name=anatomy_preset_name\n            )\n            self._ay_project = EntityHub(self.project_name)\n            self._ay_project.query_entities_from_server()\n\n        self._ay_project.commit_changes()\n\n        if self._sg_project is None:\n            self.log.info(f\"Creating Shotgrid project {self.project_name} (self.project_code).\")\n            self._sg_project = self._sg.create(\n                \"Project\",\n                {\n                    \"name\": self.project_name,\n                    self.sg_project_code_field: self.project_code,\n                    CUST_FIELD_CODE_ID: self.project_name,\n                    CUST_FIELD_CODE_CODE: self.project_code,\n                    CUST_FIELD_CODE_URL: ayon_api.get_base_url(),\n                }\n            )\n            self._ay_project.project_entity.attribs.set(\n                SHOTGRID_ID_ATTRIB,\n                self._sg_project[\"id\"]\n            )\n\n            self._ay_project.project_entity.attribs.set(\n                SHOTGRID_TYPE_ATTRIB,\n                \"Project\"\n            )\n            self._ay_project.commit_changes()\n\n        self.create_sg_attributes()\n        self.log.info(f\"Project {self.project_name} ({self.project_code}) available in SG and AYON.\")\n\n    def synchronize_projects(self, source=\"ayon\"):\n        \"\"\" Ensure a Project matches in the other platform.\n\n        Args:\n            source (str): Either \"ayon\" or \"shotgrid\", dictates which one is the\n                \"source of truth\".\n        \"\"\"\n        if not self._ay_project or not self._sg_project:\n            raise ValueError(\"\"\"The project is missing in one of the two platforms:\n                AYON: {0}\n                Shotgrid: {1}\"\"\".format(self._ay_project, self._sg_project)\n            )\n\n        match source:\n            case \"ayon\":\n\n                error = validate.check_project_disabled_entities(\n                    self._ay_project,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                    self._sg,\n                )\n                if error:\n                    raise ValueError(error)\n\n                match_ayon_hierarchy_in_shotgrid(\n                    self._ay_project,\n                    self._sg_project,\n                    self._sg,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings,\n                )\n\n            case \"shotgrid\":\n                create_sg_entities_in_ay(\n                    self._ay_project.project_entity,\n                    self._sg,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                )\n                self._ay_project.commit_changes()\n\n                match_shotgrid_hierarchy_in_ayon(\n                    self._ay_project,\n                    self._sg_project,\n                    self._sg,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings\n                )\n\n            case _:\n                raise ValueError(\n                    \"The `source` argument can only be `ayon` or `shotgrid`.\"\n                )\n\n    def react_to_shotgrid_event(self, sg_event_meta):\n        \"\"\"React to events incoming from Shotgrid\n\n        Whenever there's a `shotgrid.event` spawned by the `leecher` of a change\n        in Shotgrid, we pass said event.\n\n        The current scope of what changes and what attributes we care is limited,\n        this is to be expanded.\n\n        Args:\n            sg_event_meta (dict): The `meta` key of a ShotGrid Event, describing\n                what the change encompasses, i.e. a new shot, new asset, etc.\n        \"\"\"\n        if not self._ay_project:\n            self.log.info(\n                f\"Ignoring event, AYON project {self.project_name} not found.\")\n            return\n\n        # revival of Asset with tasks will send first retirement_date changes\n        # on tasks, then retirement_date change on Asset AND only then revival\n        # of Asset\n        if (\n            sg_event_meta[\"type\"] == \"attribute_change\"\n            and sg_event_meta[\"attribute_name\"] == \"retirement_date\"\n            and sg_event_meta[\"new_value\"] is None  # eg revival\n        ):\n            if sg_event_meta[\"entity_type\"].lower() == \"asset\":\n                # do not do updates on not yet existing asset\n                return\n\n            self.log.info(\"Changed 'retirement_date' event to \"\n                          f\"'entity_revival' for Task | \"\n                          f\"{sg_event_meta['entity_id']}.\")\n            sg_event_meta[\"type\"] = \"entity_revival\"\n\n        match sg_event_meta[\"type\"]:\n            case \"new_entity\" | \"entity_revival\":\n                self.log.info(\n                    f\"Creating entity from SG event: {sg_event_meta['type']}\"\n                    f\"| {sg_event_meta['entity_type']} \"\n                    f\"| {sg_event_meta['entity_id']}\"\n                )\n                create_ay_entity_from_sg_event(\n                    sg_event_meta,\n                    self._sg_project,\n                    self._sg,\n                    self._ay_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings\n                )\n\n            case \"attribute_change\":\n                self.log.info(\n                    f\"Updating entity from SG event: {sg_event_meta['type']} \"\n                    f\"| {sg_event_meta['entity_type']} \"\n                    f\"| {sg_event_meta['entity_id']}\"\n                )\n                update_ayon_entity_from_sg_event(\n                    sg_event_meta,\n                    self._sg_project,\n                    self._sg,\n                    self._ay_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.settings,\n                    self.custom_attribs_map,\n                )\n\n            case \"entity_retirement\":\n                self.log.info(\n                    f\"Removing entity from SG event: {sg_event_meta['type']}\"\n                    f\"| {sg_event_meta['entity_type']} \"\n                    f\"| {sg_event_meta['entity_id']}\"\n                )\n                remove_ayon_entity_from_sg_event(\n                    sg_event_meta,\n                    self._sg,\n                    self._ay_project,\n                    self.sg_project_code_field,\n                    self.settings,\n                )\n\n            case _:\n                raise ValueError(\n                    f\"Unable to process event {sg_event_meta['type']}.\")\n\n    def react_to_ayon_event(self, ayon_event):\n        \"\"\"React to events incoming from AYON\n\n        Whenever there's a `entity.&lt;entity-type&gt;.&lt;action&gt;` in AYON, where we create,\n        update or delete an entity, we attempt to replicate the action in Shotgrid.\n\n        The current scope of what changes and what attributes we care is limited,\n        this is to be expanded.\n\n        Args:\n            ayon_event (dict): A dictionary describing what\n                the change encompases, i.e. a new shot, new asset, etc.\n        \"\"\"\n        if not self._sg_project:\n            self.log.info(\n                \"Ignoring event, Shotgrid project does not exist.\"\n            )\n            return\n\n        match ayon_event[\"topic\"]:\n            case (\n                \"entity.task.created\" |\n                \"entity.folder.created\" |\n                \"entity.version.created\"\n            ):\n                create_sg_entity_from_ayon_event(\n                    ayon_event,\n                    self._sg,\n                    self._ay_project,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings\n                )\n\n            case \"entity.task.deleted\" | \"entity.folder.deleted\":\n                remove_sg_entity_from_ayon_event(\n                    ayon_event,\n                    self._sg,\n                )\n\n            case (\n                \"entity.task.renamed\"\n                | \"entity.folder.renamed\"\n                | \"entity.folder.label_changed\"\n                | \"entity.task.label_changed\"\n            ):\n                update_sg_entity_from_ayon_event(\n                    ayon_event,\n                    self._sg,\n                    self._ay_project,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings\n                )\n            case \"entity.task.attrib_changed\" | \"entity.folder.attrib_changed\":\n                attrib_key = next(iter(ayon_event[\"payload\"][\"newValue\"]))\n                if attrib_key not in self.custom_attribs_map:\n                    self.log.warning(\n                        f\"Updating attribute '{attrib_key}' from AYON to SG \"\n                        f\"not supported: {self.custom_attribs_map}.\"\n                    )\n                    return\n                update_sg_entity_from_ayon_event(\n                    ayon_event,\n                    self._sg,\n                    self._ay_project,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings,\n                )\n            case (\n                \"entity.task.status_changed\"\n                | \"entity.folder.status_changed\"\n                | \"entity.task.tags_changed\"\n                | \"entity.folder.tags_changed\"\n                | \"entity.task.assignees_changed\"\n                | \"entity.version.status_changed\"\n            ):\n                # TODO: for some reason the payload here is not a dict but we know\n                # we always want to update the entity\n                update_sg_entity_from_ayon_event(\n                    ayon_event,\n                    self._sg,\n                    self._ay_project,\n                    self._sg_project,\n                    self.sg_enabled_entities,\n                    self.sg_project_code_field,\n                    self.custom_attribs_map,\n                    self.settings,\n                )\n            case (\"reviewable.created\"):\n                ay_version_id = ayon_event[\"summary\"][\"versionId\"]\n                upload_ay_reviewable_to_sg(\n                    self._sg,\n                    self._ay_project,  # EntityHub\n                    ay_version_id\n                )\n            case (\"flow.version.mediapath\"):\n                payload = ayon_event[\"payload\"]\n                # Backwards compatibility for older events without 'payload' filled.\n                # TODO remove in 0.7.0\n                if not payload:\n                    payload = ayon_event[\"summary\"]\n                update_movie_paths(\n                    self._sg,\n                    self._ay_project,  # EntityHub\n                    payload\n                )\n            case _:\n                raise ValueError(\n                    f\"Unable to process event {ayon_event['topic']} (unsupported event).\"\n                )\n\n    def sync_comments(self, activities_after_date):\n        project_activities = list(ayon_api.get_activities(\n            self.project_name,\n            activity_types={\"comment\"},\n            changed_after=activities_after_date.isoformat(),\n        ))\n        if not project_activities:\n            return 0\n\n        entity_dicts_by_id = self._get_entity_dicts_for_activities(\n            project_activities)\n\n        sg_user_id_by_user_name = {}\n        for activity in project_activities:\n            activity_data = activity[\"activityData\"]\n            orig_sg_id = activity_data.get(\"sg_note_id\")\n            sg_note = None\n            if orig_sg_id:\n                sg_note = self._sg.find_one(\n                    \"Note\",\n                    [[\"id\", \"is\", int(orig_sg_id)]],\n                    [\"id\", \"content\", \"sg_ayon_id\", \"attachments\"]\n                )\n\n            activity_attachments = activity_data.get(\"files\", [])\n            if sg_note is None:\n                entity_id = activity[\"entityId\"]\n                entity_dict = entity_dicts_by_id.get(entity_id)\n                ayon_username = activity[\"author\"][\"name\"]\n\n                sg_user_id = self._get_cached_sg_user_id(\n                    sg_user_id_by_user_name, ayon_username)\n\n                if sg_user_id &lt; 0:\n                    self.log.debug(\n                        f\"Author {ayon_username} is not synchronized \"\n                        \"to SG, comment will be left unassigned.\"\n                    )\n                    sg_user_id = None\n\n                self._create_sg_note(\n                    self.project_name,\n                    entity_dict,\n                    activity,\n                    sg_user_id_by_user_name,\n                    author_sg_id=sg_user_id,\n                )\n            else:\n                sg_update_data = {}\n                activity_atchmt_names = []\n                for atchmt in activity_attachments:\n                    filename = atchmt[\"filename\"]\n                    # handles filenames containing slashes which is happening when using the powerpack annotations in AYON\n                    if \"/\" in filename:\n                        filename = filename.split(\"/\")[-1]\n                    activity_atchmt_names.append(filename)\n\n                for sg_atchmt in sg_note[\"attachments\"]:\n                    if sg_atchmt[\"name\"] not in activity_atchmt_names:\n                        self._sg.delete(\"Attachment\", sg_atchmt[\"id\"])\n                        self.log.info(f\"Deleted attachment {sg_atchmt['name']} from SG.\")\n\n                if sg_note[\"content\"] != activity[\"body\"]:\n                    sg_update_data[\"content\"] = activity[\"body\"]\n\n                activity_id = activity[\"activityId\"]\n                sg_ayon_id = sg_note.get(\"sg_ayon_id\")\n                if sg_ayon_id != activity_id:\n                    sg_update_data[\"sg_ayon_id\"] = activity_id\n\n                if orig_sg_id != sg_note[\"id\"]:\n                    activity_data[\"sg_note_id\"] = sg_note[\"id\"]\n                    ayon_api.update_activity(\n                        self.project_name,\n                        activity[\"activityId\"],\n                        data=activity_data,\n                    )\n                if sg_update_data:\n                    self._sg.update(\"Note\", sg_note[\"id\"], sg_update_data)\n\n        return len(project_activities)\n\n    def _get_entity_dicts_for_activities(self, project_activities):\n        \"\"\"Build a dictionary mapping entity IDs to corresponding entity data.\n\n        Args:\n            project_activities (list): A list of project activities containing\n                information about entity IDs and types.\n\n        Returns:\n            dict: A dictionary where the keys are entity IDs and the values are\n            the corresponding entity data (e.g., folder, task, version).\n        \"\"\"\n        entity_ids_by_entity_type = collections.defaultdict(set)\n        for activity in project_activities:\n            entity_id = activity[\"entityId\"]\n            entity_type = activity[\"entityType\"]\n            entity_ids_by_entity_type[entity_type].add(entity_id)\n\n        entity_dicts_by_id = {}\n        for entity_type, entity_ids in entity_ids_by_entity_type.items():\n            entities = []\n            if entity_type == \"folder\":\n                entities = ayon_api.get_folders(\n                    self.project_name, folder_ids=entity_ids\n                )\n            elif entity_type == \"task\":\n                entities = ayon_api.get_tasks(\n                    self.project_name, task_ids=entity_ids\n                )\n            elif entity_type == \"version\":\n                entities = ayon_api.get_versions(\n                    self.project_name, version_ids=entity_ids\n                )\n            entity_dicts_by_id.update({\n                entity[\"id\"]: entity\n                for entity in entities\n            })\n        return entity_dicts_by_id\n\n    def _create_sg_note(\n        self,\n        project_name,\n        entity_dict,\n        activity,\n        sg_user_id_by_user_name,\n        author_sg_id=None,\n    ):\n        \"\"\"Create a new note in ShotGrid (SG) and update the activity data.\n\n        This method creates a new note in SG, setting its content, linked\n        entities, and author information. After the note is created, it updates\n        the corresponding activity data in AYON with the newly created note ID.\n\n        Args:\n            project_name (str): The name of the project in SG.\n            entity_dict (dict): A dictionary containing information about the\n                entity (folder, task, version) to which the note is linked.\n            activity (dict): Activity data containing details about the comment,\n                including the author, content, and activity ID.\n            sg_user_id_by_user_name (dict): A mapping of AYON usernames to\n                their corresponding SG user IDs.\n            author_sg_id (int): (Optional) The SG user ID of the author of the comment.\n        \"\"\"\n        if not self._sg_project:\n            self.log.warning(\n                f\"Project {self.project_name} doesn't exist in \"\"Shotgrid\")\n            return\n\n        note_links = self._get_note_links(entity_dict)\n\n        addressings_to, content =self._get_addressings_to(\n            activity[\"body\"], sg_user_id_by_user_name)\n\n        data = {\n            \"project\": {\"type\": \"Project\", \"id\": self._sg_project[\"id\"]},\n            \"note_links\": note_links,\n            \"subject\": content[:50],\n            \"content\": content,\n            \"addressings_to\": addressings_to\n        }\n\n        if author_sg_id:\n            data[\"user\"] = {\"type\": \"HumanUser\", \"id\": author_sg_id}\n\n        # Create the note\n        result = self._sg.create(\"Note\", data)\n\n        note_id = result[\"id\"]\n\n        activity_data = activity[\"activityData\"]\n        activity_data[\"sg_note_id\"] = note_id\n        ayon_api.update_activity(\n            project_name,\n            activity[\"activityId\"],\n            data=activity_data,\n        )\n\n        # download attachments temporarily to upload to SG\n        tmp_dir = tempfile.mkdtemp()\n        for atchmt in activity_data[\"files\"]:\n            self.log.debug(f\"{atchmt = }\")\n            tmp_file = os.path.join(tmp_dir, atchmt[\"filename\"])\n            ayon_api.download_file(\n                endpoint=f\"projects/{project_name}/files/{atchmt['id']}\",\n                filepath=tmp_file,\n            )\n            self.log.debug(f\"Downloaded AYON attachment {atchmt['filename']} to {tmp_file}.\")\n            self._sg.upload(\"Note\", note_id, tmp_file)\n            self.log.info(f\"Uploaded AYON attachment {atchmt['filename']} to SG.\")\n            os.remove(tmp_file)\n\n\n    def _get_addressings_to(self, content, sg_user_id_by_user_name):\n        \"\"\" Extract and generate the list of ShotGrid (SG) `addressings_to`\n\n        This method finds usernames tagged in the format `user:&lt;username&gt;`\n        in the given content and retrieves their corresponding SG user IDs.\n\n        Args:\n            content (str): The note content to search for tagged usernames.\n            sg_user_id_by_user_name (dict): A mapping of AYON usernames to\n                their corresponding SG user IDs.\n\n        Returns:\n            (tuple(list, str)): A list of dictionaries containing SG user IDs\n            in the format [{\"type\": \"HumanUser\", \"id\": sg_user_id}, ...]. AND\n            cleaned up content (removed (user:XXX) which caused broken link)\n        \"\"\"\n        addressings_to = []\n        user_names = re.findall(r'user:([\\w\\.\\-]+)', content)\n        for user_name in user_names:\n            # remove confusing link through on SG side\n            content = (content.replace(f\"(user:{user_name})\", \"\").\n                       replace(\"[\", \"\").replace(\"]\", \"\"))\n\n            sg_user_id = self._get_cached_sg_user_id(\n                sg_user_id_by_user_name, user_name)\n\n            if not sg_user_id:\n                continue\n\n            addressings_to.append(\n                {\"type\": \"HumanUser\", \"id\": sg_user_id}\n            )\n        return addressings_to, content\n\n    def _get_cached_sg_user_id(self, sg_user_id_by_user_name, user_name):\n        \"\"\"Retrieve the cached ShotGrid (SG) user ID for the given username.\n\n        Args:\n            sg_user_id_by_user_name (dict): A dict {ayon_user_name: sg_user_id}\n            user_name (str): The username for which the SG user ID is\n                being retrieved.\n\n        Returns:\n            int: real sg_user_id or -1 if `user_name` is not synchronized\n        \"\"\"\n        sg_user_id = sg_user_id_by_user_name.get(user_name)\n        if sg_user_id is None:\n            sg_user_id = get_sg_user_id(user_name)\n        sg_user_id_by_user_name[user_name] = sg_user_id\n        return sg_user_id\n\n    def _get_note_links(self, entity_dict):\n        \"\"\"Generate the note links for a given entity dictionary.\n\n        Note links are associated with the corresponding ShotGrid (SG) entities\n        (Shot, Sequence, Asset) if available.\n\n        Args:\n            entity_dict (dict): A dictionary representing the AYON entity\n\n        Returns:\n            list: A list of note link dictionaries with SG type and its id\n        \"\"\"\n        note_links = []\n        sg_id = entity_dict[\"attrib\"].get(\"shotgridId\")\n        sg_type = entity_dict[\"attrib\"].get(\"shotgridType\")\n\n        sg_entity = None\n        if sg_id and sg_type:\n            sg_entity = self._sg.find_one(\n                sg_type, [[\"id\", \"is\", int(sg_id)]])\n        if sg_entity:\n            note_links = [{\"type\": sg_type, \"id\": sg_entity[\"id\"]}]\n        return note_links\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub.create_project","title":"<code>create_project()</code>","text":"<p>Create project in AYON and Shotgrid.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>def create_project(self):\n    \"\"\"Create project in AYON and Shotgrid.\n    \"\"\"\n    if self._ay_project is None:\n        anatomy_preset_name = self.settings.get(\"anatomy_preset\", None)\n\n        # making sure build in preset is not used\n        if anatomy_preset_name == \"_\":\n            anatomy_preset_name = None\n\n        self.log.info(\n            f\"Creating AYON project {self.project_name}\\n\"\n            f\"- project code: {self.project_code}\\n\"\n            f\"- anatomy preset: {anatomy_preset_name}\\n\"\n        )\n        ayon_api.create_project(\n            self.project_name,\n            self.project_code,\n            preset_name=anatomy_preset_name\n        )\n        self._ay_project = EntityHub(self.project_name)\n        self._ay_project.query_entities_from_server()\n\n    self._ay_project.commit_changes()\n\n    if self._sg_project is None:\n        self.log.info(f\"Creating Shotgrid project {self.project_name} (self.project_code).\")\n        self._sg_project = self._sg.create(\n            \"Project\",\n            {\n                \"name\": self.project_name,\n                self.sg_project_code_field: self.project_code,\n                CUST_FIELD_CODE_ID: self.project_name,\n                CUST_FIELD_CODE_CODE: self.project_code,\n                CUST_FIELD_CODE_URL: ayon_api.get_base_url(),\n            }\n        )\n        self._ay_project.project_entity.attribs.set(\n            SHOTGRID_ID_ATTRIB,\n            self._sg_project[\"id\"]\n        )\n\n        self._ay_project.project_entity.attribs.set(\n            SHOTGRID_TYPE_ATTRIB,\n            \"Project\"\n        )\n        self._ay_project.commit_changes()\n\n    self.create_sg_attributes()\n    self.log.info(f\"Project {self.project_name} ({self.project_code}) available in SG and AYON.\")\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub.create_sg_attributes","title":"<code>create_sg_attributes()</code>","text":"<p>Create all AYON needed attributes in Shotgrid.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>def create_sg_attributes(self):\n    \"\"\"Create all AYON needed attributes in Shotgrid.\"\"\"\n    create_ay_fields_in_sg_project(\n        self._sg, self.custom_attribs_map, self.custom_attribs_types\n    )\n    create_ay_fields_in_sg_entities(\n        self._sg,\n        self.sg_enabled_entities,\n        self.custom_attribs_map,\n        self.custom_attribs_types\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub.react_to_ayon_event","title":"<code>react_to_ayon_event(ayon_event)</code>","text":"<p>React to events incoming from AYON</p> <p>Whenever there's a <code>entity.&lt;entity-type&gt;.&lt;action&gt;</code> in AYON, where we create, update or delete an entity, we attempt to replicate the action in Shotgrid.</p> <p>The current scope of what changes and what attributes we care is limited, this is to be expanded.</p> <p>Parameters:</p> Name Type Description Default <code>ayon_event</code> <code>dict</code> <p>A dictionary describing what the change encompases, i.e. a new shot, new asset, etc.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>def react_to_ayon_event(self, ayon_event):\n    \"\"\"React to events incoming from AYON\n\n    Whenever there's a `entity.&lt;entity-type&gt;.&lt;action&gt;` in AYON, where we create,\n    update or delete an entity, we attempt to replicate the action in Shotgrid.\n\n    The current scope of what changes and what attributes we care is limited,\n    this is to be expanded.\n\n    Args:\n        ayon_event (dict): A dictionary describing what\n            the change encompases, i.e. a new shot, new asset, etc.\n    \"\"\"\n    if not self._sg_project:\n        self.log.info(\n            \"Ignoring event, Shotgrid project does not exist.\"\n        )\n        return\n\n    match ayon_event[\"topic\"]:\n        case (\n            \"entity.task.created\" |\n            \"entity.folder.created\" |\n            \"entity.version.created\"\n        ):\n            create_sg_entity_from_ayon_event(\n                ayon_event,\n                self._sg,\n                self._ay_project,\n                self._sg_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings\n            )\n\n        case \"entity.task.deleted\" | \"entity.folder.deleted\":\n            remove_sg_entity_from_ayon_event(\n                ayon_event,\n                self._sg,\n            )\n\n        case (\n            \"entity.task.renamed\"\n            | \"entity.folder.renamed\"\n            | \"entity.folder.label_changed\"\n            | \"entity.task.label_changed\"\n        ):\n            update_sg_entity_from_ayon_event(\n                ayon_event,\n                self._sg,\n                self._ay_project,\n                self._sg_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings\n            )\n        case \"entity.task.attrib_changed\" | \"entity.folder.attrib_changed\":\n            attrib_key = next(iter(ayon_event[\"payload\"][\"newValue\"]))\n            if attrib_key not in self.custom_attribs_map:\n                self.log.warning(\n                    f\"Updating attribute '{attrib_key}' from AYON to SG \"\n                    f\"not supported: {self.custom_attribs_map}.\"\n                )\n                return\n            update_sg_entity_from_ayon_event(\n                ayon_event,\n                self._sg,\n                self._ay_project,\n                self._sg_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings,\n            )\n        case (\n            \"entity.task.status_changed\"\n            | \"entity.folder.status_changed\"\n            | \"entity.task.tags_changed\"\n            | \"entity.folder.tags_changed\"\n            | \"entity.task.assignees_changed\"\n            | \"entity.version.status_changed\"\n        ):\n            # TODO: for some reason the payload here is not a dict but we know\n            # we always want to update the entity\n            update_sg_entity_from_ayon_event(\n                ayon_event,\n                self._sg,\n                self._ay_project,\n                self._sg_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings,\n            )\n        case (\"reviewable.created\"):\n            ay_version_id = ayon_event[\"summary\"][\"versionId\"]\n            upload_ay_reviewable_to_sg(\n                self._sg,\n                self._ay_project,  # EntityHub\n                ay_version_id\n            )\n        case (\"flow.version.mediapath\"):\n            payload = ayon_event[\"payload\"]\n            # Backwards compatibility for older events without 'payload' filled.\n            # TODO remove in 0.7.0\n            if not payload:\n                payload = ayon_event[\"summary\"]\n            update_movie_paths(\n                self._sg,\n                self._ay_project,  # EntityHub\n                payload\n            )\n        case _:\n            raise ValueError(\n                f\"Unable to process event {ayon_event['topic']} (unsupported event).\"\n            )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub.react_to_shotgrid_event","title":"<code>react_to_shotgrid_event(sg_event_meta)</code>","text":"<p>React to events incoming from Shotgrid</p> <p>Whenever there's a <code>shotgrid.event</code> spawned by the <code>leecher</code> of a change in Shotgrid, we pass said event.</p> <p>The current scope of what changes and what attributes we care is limited, this is to be expanded.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event_meta</code> <code>dict</code> <p>The <code>meta</code> key of a ShotGrid Event, describing what the change encompasses, i.e. a new shot, new asset, etc.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>def react_to_shotgrid_event(self, sg_event_meta):\n    \"\"\"React to events incoming from Shotgrid\n\n    Whenever there's a `shotgrid.event` spawned by the `leecher` of a change\n    in Shotgrid, we pass said event.\n\n    The current scope of what changes and what attributes we care is limited,\n    this is to be expanded.\n\n    Args:\n        sg_event_meta (dict): The `meta` key of a ShotGrid Event, describing\n            what the change encompasses, i.e. a new shot, new asset, etc.\n    \"\"\"\n    if not self._ay_project:\n        self.log.info(\n            f\"Ignoring event, AYON project {self.project_name} not found.\")\n        return\n\n    # revival of Asset with tasks will send first retirement_date changes\n    # on tasks, then retirement_date change on Asset AND only then revival\n    # of Asset\n    if (\n        sg_event_meta[\"type\"] == \"attribute_change\"\n        and sg_event_meta[\"attribute_name\"] == \"retirement_date\"\n        and sg_event_meta[\"new_value\"] is None  # eg revival\n    ):\n        if sg_event_meta[\"entity_type\"].lower() == \"asset\":\n            # do not do updates on not yet existing asset\n            return\n\n        self.log.info(\"Changed 'retirement_date' event to \"\n                      f\"'entity_revival' for Task | \"\n                      f\"{sg_event_meta['entity_id']}.\")\n        sg_event_meta[\"type\"] = \"entity_revival\"\n\n    match sg_event_meta[\"type\"]:\n        case \"new_entity\" | \"entity_revival\":\n            self.log.info(\n                f\"Creating entity from SG event: {sg_event_meta['type']}\"\n                f\"| {sg_event_meta['entity_type']} \"\n                f\"| {sg_event_meta['entity_id']}\"\n            )\n            create_ay_entity_from_sg_event(\n                sg_event_meta,\n                self._sg_project,\n                self._sg,\n                self._ay_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings\n            )\n\n        case \"attribute_change\":\n            self.log.info(\n                f\"Updating entity from SG event: {sg_event_meta['type']} \"\n                f\"| {sg_event_meta['entity_type']} \"\n                f\"| {sg_event_meta['entity_id']}\"\n            )\n            update_ayon_entity_from_sg_event(\n                sg_event_meta,\n                self._sg_project,\n                self._sg,\n                self._ay_project,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.settings,\n                self.custom_attribs_map,\n            )\n\n        case \"entity_retirement\":\n            self.log.info(\n                f\"Removing entity from SG event: {sg_event_meta['type']}\"\n                f\"| {sg_event_meta['entity_type']} \"\n                f\"| {sg_event_meta['entity_id']}\"\n            )\n            remove_ayon_entity_from_sg_event(\n                sg_event_meta,\n                self._sg,\n                self._ay_project,\n                self.sg_project_code_field,\n                self.settings,\n            )\n\n        case _:\n            raise ValueError(\n                f\"Unable to process event {sg_event_meta['type']}.\")\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/index.html#services.shotgrid_common.ayon_shotgrid_hub.AyonShotgridHub.synchronize_projects","title":"<code>synchronize_projects(source='ayon')</code>","text":"<p>Ensure a Project matches in the other platform.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>Either \"ayon\" or \"shotgrid\", dictates which one is the \"source of truth\".</p> <code>'ayon'</code> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/__init__.py</code> <pre><code>def synchronize_projects(self, source=\"ayon\"):\n    \"\"\" Ensure a Project matches in the other platform.\n\n    Args:\n        source (str): Either \"ayon\" or \"shotgrid\", dictates which one is the\n            \"source of truth\".\n    \"\"\"\n    if not self._ay_project or not self._sg_project:\n        raise ValueError(\"\"\"The project is missing in one of the two platforms:\n            AYON: {0}\n            Shotgrid: {1}\"\"\".format(self._ay_project, self._sg_project)\n        )\n\n    match source:\n        case \"ayon\":\n\n            error = validate.check_project_disabled_entities(\n                self._ay_project,\n                self._sg_project,\n                self.sg_enabled_entities,\n                self._sg,\n            )\n            if error:\n                raise ValueError(error)\n\n            match_ayon_hierarchy_in_shotgrid(\n                self._ay_project,\n                self._sg_project,\n                self._sg,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings,\n            )\n\n        case \"shotgrid\":\n            create_sg_entities_in_ay(\n                self._ay_project.project_entity,\n                self._sg,\n                self._sg_project,\n                self.sg_enabled_entities,\n            )\n            self._ay_project.commit_changes()\n\n            match_shotgrid_hierarchy_in_ayon(\n                self._ay_project,\n                self._sg_project,\n                self._sg,\n                self.sg_enabled_entities,\n                self.sg_project_code_field,\n                self.custom_attribs_map,\n                self.settings\n            )\n\n        case _:\n            raise ValueError(\n                \"The `source` argument can only be `ayon` or `shotgrid`.\"\n            )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/match_ayon_hierarchy_in_shotgrid.html","title":"match_ayon_hierarchy_in_shotgrid","text":""},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/match_ayon_hierarchy_in_shotgrid.html#services.shotgrid_common.ayon_shotgrid_hub.match_ayon_hierarchy_in_shotgrid.match_ayon_hierarchy_in_shotgrid","title":"<code>match_ayon_hierarchy_in_shotgrid(entity_hub, sg_project, sg_session, sg_enabled_entities, project_code_field, custom_attribs_map, addon_settings)</code>","text":"<p>Replicate an AYON project into Shotgrid.</p> <p>This function creates a \"deck\" which we keep increasing while traversing the AYON project and finding new children, this is more efficient than creating a dictionary with the whole AYON project structure since we <code>popleft</code> the elements when processing them.</p> <p>Parameters:</p> Name Type Description Default <code>entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>sg_project</code> <code>dict</code> <p>The Shotgrid project.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The Shotgrid session.</p> required <code>project_code_field</code> <code>str</code> <p>The Shotgrid project code field.</p> required <code>sg_enabled_entities</code> <code>list</code> <p>List of Shotgrid entities to be enabled.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary of extra attributes to store in the SG entity.</p> required <code>addon_settings</code> <code>dict</code> <p>The addon settings.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/match_ayon_hierarchy_in_shotgrid.py</code> <pre><code>def match_ayon_hierarchy_in_shotgrid(\n    entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_project: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    sg_enabled_entities: List[str],\n    project_code_field: str,\n    custom_attribs_map: Dict[str, str],\n    addon_settings: Dict[str, Any],\n):\n    \"\"\"Replicate an AYON project into Shotgrid.\n\n    This function creates a \"deck\" which we keep increasing while traversing\n    the AYON project and finding new children, this is more efficient than\n    creating a dictionary with the whole AYON project structure since we\n    `popleft` the elements when processing them.\n\n    Args:\n        entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        sg_project (dict): The Shotgrid project.\n        sg_session (shotgun_api3.Shotgun): The Shotgrid session.\n        project_code_field (str): The Shotgrid project code field.\n        sg_enabled_entities (list): List of Shotgrid entities to be enabled.\n        custom_attribs_map (dict): Dictionary of extra attributes to\n            store in the SG entity.\n        addon_settings (dict): The addon settings.\n    \"\"\"\n    log.info(\"Getting AYON entities.\")\n    entity_hub.fetch_hierarchy_entities()\n\n    log.info(\"Getting Shotgrid entities.\")\n    sg_ay_dicts, sg_ay_dicts_parents = get_sg_entities(\n        sg_session,\n        sg_project,\n        sg_enabled_entities,\n        project_code_field,\n        custom_attribs_map,\n        addon_settings=addon_settings,\n    )\n    compatibility_settings = addon_settings.get(\"compatibility_settings\", {})\n    default_task_type = compatibility_settings.get(\"default_task_type\")\n\n    ay_entity_deck = collections.deque()\n\n    # Append the AYON project's direct children into processing queue\n    for ay_entity_child in entity_hub._entities_by_parent_id[\n            entity_hub.project_name]:\n        ay_entity_deck.append((\n            get_sg_entity_as_ay_dict(\n                sg_session,\n                \"Project\",\n                sg_project[\"id\"],\n                project_code_field,\n                default_task_type,\n                custom_attribs_map=custom_attribs_map\n            ),\n            ay_entity_child\n        ))\n\n    ay_project_sync_status = \"Synced\"\n    processed_ids = set()\n\n    ay_statuses = {\n        status.name: status.short_name\n        for status in  entity_hub.project_entity.statuses\n    }\n    all_sg_statuses = {}\n\n    while ay_entity_deck:\n        (sg_ay_parent_entity, ay_entity) = ay_entity_deck.popleft()\n        log.debug(f\"Processing entity: '{ay_entity}'\")\n\n        sg_ay_dict = None\n\n        # Skip entities that are not tasks or folders\n        if ay_entity.entity_type not in [\"task\", \"folder\", \"version\"]:\n            log.warning(\n                f\"Entity '{ay_entity.name}' is not a task, folder or version, \"\n                f\"skipping...\"\n            )\n            # even the folder is not synced, we need to process its children\n            _add_items_to_queue(\n                entity_hub, ay_entity_deck, ay_entity, sg_ay_parent_entity\n            )\n            continue\n\n        # only sync folders with type in sg_enabled_entities and tasks\n        if (\n            ay_entity.entity_type == \"folder\"\n            and ay_entity.folder_type not in sg_enabled_entities\n        ):\n            log.warning(\n                f\"Entity '{ay_entity.name}' is not enabled in \"\n                \"Shotgrid, skipping...\"\n            )\n            # even the folder is not synced, we need to process its children\n            _add_items_to_queue(\n                entity_hub, ay_entity_deck, ay_entity, sg_ay_parent_entity\n            )\n            continue\n\n        sg_entity_id = ay_entity.attribs.get(SHOTGRID_ID_ATTRIB, None)\n        sg_entity_type = ay_entity.attribs.get(SHOTGRID_TYPE_ATTRIB, \"\")\n        sg_dict_id = f\"{sg_entity_type}_{sg_entity_id}\"\n\n        if sg_entity_id and sg_entity_id == \"removed\":\n            # if SG entity is removed then it is marked as \"removed\"\n            log.info(\n                f\"Entity '{ay_entity.name}' was removed from \"\n                \"ShotGrid, skipping...\"\n            )\n            continue\n        elif sg_entity_id:\n            sg_entity_id = int(sg_entity_id)\n\n        if sg_entity_type == \"AssetCategory\":\n            log.warning(\n                f\"Entity '{ay_entity.name}' is an AssetCategory, skipping...\"\n            )\n            # even the folder is not synced, we need to process its children\n            _add_items_to_queue(\n                entity_hub, ay_entity_deck, ay_entity, sg_ay_parent_entity\n            )\n            continue\n\n        # make sure we don't process the same entity twice\n        if sg_dict_id in processed_ids:\n            msg = (\n                f\"Entity {sg_entity_id} already processed, skipping...\"\n                f\"Sg Ay Dict: {sg_ay_dict} - \"\n                f\"SG Ay Parent Entity: {sg_ay_parent_entity}\"\n            )\n            log.warning(msg)\n            continue\n\n        # entity was already synced before and we need to update it\n        if sg_entity_id and sg_dict_id in sg_ay_dicts:\n            sg_ay_dict = sg_ay_dicts[sg_dict_id]\n            log.info(\n                f\"Entity already exists in Shotgrid {sg_ay_dict['name']}\")\n\n            if sg_ay_dict[\"data\"][CUST_FIELD_CODE_ID] != ay_entity.id:\n                # QUESTION: Can this situation even occur?\n                log.warning(\n                    \"Shotgrid record for AYON id does not match...\"\n                    f\"SG: {sg_ay_dict['data'][CUST_FIELD_CODE_ID]} - \"\n                    f\"AYON: {ay_entity.id}\"\n                )\n                try:\n                    log.info(\"Updating SG entity with AYON id...\")\n                    sg_session.update(\n                        sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB],\n                        sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB],\n                        {\n                            CUST_FIELD_CODE_ID: ay_entity.id,\n                            CUST_FIELD_CODE_SYNC: \"Synced\",\n                        },\n                    )\n                except Exception:\n                    log.error(\n                        f\"Unable to update SG entity {sg_ay_dict['name']}\",\n                        exc_info=True\n                    )\n                    ay_project_sync_status = \"Failed\"\n\n            attrib_values = {}\n            if sg_entity_type in all_sg_statuses:\n                sg_statuses = all_sg_statuses[sg_entity_type]\n            else:\n                sg_statuses = get_sg_statuses(sg_session, sg_entity_type)\n                all_sg_statuses[sg_entity_type] = sg_statuses.copy()\n\n            short_name = ay_statuses.get(ay_entity.status)\n            if short_name in sg_statuses:\n                attrib_values[\"status\"] = short_name\n\n            attrib_values.update(ay_entity.attribs.to_dict())\n\n            # Ensure name still matching folder/task label or name\n            data_to_update = {}\n            try:\n                name = ay_entity.label or ay_entity.get_name()\n\n            except NotImplementedError:\n                pass\n\n            else:\n                if name != sg_ay_dict.get(\"name\"):\n                    sg_name_field = \"content\" if sg_entity_type == \"Task\" else \"code\"\n                    data_to_update = {sg_name_field: name}\n\n            data_to_update.update(\n                get_sg_custom_attributes_data(\n                    sg_session,\n                    attrib_values,\n                    sg_entity_type,\n                    custom_attribs_map\n                )\n            )\n            if data_to_update:\n                log.info(\"Syncing custom attributes on entity.\")\n                sg_session.update(\n                    sg_entity_type,\n                    sg_entity_id,\n                    data_to_update\n                )\n\n        # entity was not synced before and need to be created\n        if not sg_entity_id or not sg_ay_dict:\n            sg_parent_entity = sg_session.find_one(\n                sg_ay_parent_entity[\"attribs\"][SHOTGRID_TYPE_ATTRIB],\n                filters=[[\n                    \"id\",\n                    \"is\",\n                    int(sg_ay_parent_entity[\"attribs\"][SHOTGRID_ID_ATTRIB])\n                ]]\n            )\n\n            sg_ay_dict = create_new_sg_entity(\n                ay_entity,\n                sg_session,\n                sg_project,\n                sg_parent_entity,\n                sg_enabled_entities,\n                project_code_field,\n                custom_attribs_map,\n                addon_settings,\n                entity_hub.project_name\n            )\n\n            if not sg_ay_dict:\n                log.warning(f\"AYON entity {ay_entity} not found in SG, \"\n                            \"couldn't be created.\")\n                continue\n\n            sg_entity_id = sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB]\n            sg_dict_id = f'{sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB]}_{sg_entity_id}'\n            sg_ay_dicts[sg_dict_id] = sg_ay_dict\n            sg_parent_id = f'{sg_ay_parent_entity[\"attribs\"][SHOTGRID_TYPE_ATTRIB]}_{sg_parent_entity[\"id\"]}'\n            sg_ay_dicts_parents[sg_parent_id].add(sg_dict_id)\n\n            # add new Shotgrid ID and type to existing AYON entity\n            ay_entity.attribs.set(\n                SHOTGRID_ID_ATTRIB,\n                sg_entity_id\n            )\n            ay_entity.attribs.set(\n                SHOTGRID_TYPE_ATTRIB,\n                sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB]\n            )\n\n            if ay_entity.entity_type == \"version\":\n                upload_ay_reviewable_to_sg(\n                    sg_session,\n                    entity_hub,\n                    ay_entity.id,\n                )\n\n\n        if not sg_ay_dict:\n            log.warning(f\"AYON entity {ay_entity} not found in SG, ignoring it\")\n            continue\n\n        # add processed entity to the set for duplicity tracking\n        processed_ids.add(sg_dict_id)\n\n        _add_items_to_queue(entity_hub, ay_entity_deck, ay_entity, sg_ay_dict)\n\n    try:\n        # committing changes on project children\n        entity_hub.commit_changes()\n    except Exception:\n        log.error(\"Unable to commit all entities to AYON!\", exc_info=True)\n\n    # Sync project attributes from AYON to ShotGrid\n    data_to_update = {\n        CUST_FIELD_CODE_ID: entity_hub.project_name,\n        CUST_FIELD_CODE_SYNC: ay_project_sync_status\n    }\n    data_to_update |= get_sg_custom_attributes_data(\n        sg_session,\n        entity_hub.project_entity.attribs.to_dict(),\n        \"Project\",\n        custom_attribs_map,\n    )\n    sg_session.update(\n        \"Project\",\n        sg_project[\"id\"],\n        data_to_update\n    )\n\n    entity_hub.project_entity.attribs.set(\n        SHOTGRID_ID_ATTRIB,\n        sg_project[\"id\"]\n    )\n\n    entity_hub.project_entity.attribs.set(\n        SHOTGRID_TYPE_ATTRIB,\n        \"Project\"\n    )\n\n    # committing changes on project entity\n    entity_hub.commit_changes()\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/match_shotgrid_hierarchy_in_ayon.html","title":"match_shotgrid_hierarchy_in_ayon","text":""},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/match_shotgrid_hierarchy_in_ayon.html#services.shotgrid_common.ayon_shotgrid_hub.match_shotgrid_hierarchy_in_ayon.match_shotgrid_hierarchy_in_ayon","title":"<code>match_shotgrid_hierarchy_in_ayon(entity_hub, sg_project, sg_session, sg_enabled_entities, project_code_field, custom_attribs_map, addon_settings)</code>","text":"<p>Replicate a Shotgrid project into AYON.</p> <p>This function creates a \"deck\" which we keep increasing while traversing the Shotgrid project and finding new children, this is more efficient than creating a dictionary with the while Shotgrid project structure since we <code>popleft</code> the elements when processing them.</p> <p>Parameters:</p> Name Type Description Default <code>entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>sg_project</code> <code>dict</code> <p>The Shotgrid project.</p> required <code>sg_project</code> <code>Shotgun</code> <p>The Shotgrid session.</p> required <code>project_code_field</code> <code>str</code> <p>The Shotgrid project code field.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/match_shotgrid_hierarchy_in_ayon.py</code> <pre><code>def match_shotgrid_hierarchy_in_ayon(\n    entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_project: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    sg_enabled_entities: List[str],\n    project_code_field: str,\n    custom_attribs_map: Dict[str, str],\n    addon_settings: Dict[str, str]\n):\n    \"\"\"Replicate a Shotgrid project into AYON.\n\n    This function creates a \"deck\" which we keep increasing while traversing\n    the Shotgrid project and finding new children, this is more efficient than\n    creating a dictionary with the while Shotgrid project structure since we\n    `popleft` the elements when processing them.\n\n    Args:\n        entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        sg_project (dict): The Shotgrid project.\n        sg_project (shotgun_api3.Shotgun): The Shotgrid session.\n        project_code_field (str): The Shotgrid project code field.\n    \"\"\"\n    log.info(\"Getting Shotgrid entities.\")\n    sg_ay_dicts, sg_ay_dicts_parents = get_sg_entities(\n        sg_session,\n        sg_project,\n        sg_enabled_entities,\n        project_code_field,\n        custom_attribs_map,\n        addon_settings=addon_settings,\n    )\n\n    sg_ay_dicts_deck = collections.deque()\n\n    # Append the project's direct children.\n    for sg_ay_dict_child_id in sg_ay_dicts_parents[sg_project[\"id\"]]:\n        sg_ay_dicts_deck.append(\n            (entity_hub.project_entity, sg_ay_dict_child_id)\n        )\n\n    sg_project_sync_status = \"Synced\"\n    processed_ids = set()\n\n    while sg_ay_dicts_deck:\n        (ay_parent_entity, sg_ay_dict_child_id) = sg_ay_dicts_deck.popleft()\n        sg_ay_dict = sg_ay_dicts[sg_ay_dict_child_id]\n        sg_entity_id = sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB]\n        if sg_ay_dict_child_id in processed_ids:\n            msg = (\n                f\"Entity {sg_entity_id} already processed, skipping...\"\n                f\"Sg Ay Dict: {sg_ay_dict} - \"\n                f\"Ay Parent Entity: {ay_parent_entity}\"\n            )\n            log.warning(msg)\n            continue\n\n        processed_ids.add(sg_ay_dict_child_id)\n\n        log.debug(f\"Deck size: {len(sg_ay_dicts_deck)}\")\n\n        if sg_ay_dict[\"type\"].lower() == \"comment\":\n            handle_comment(sg_ay_dict, sg_session, entity_hub)\n            continue\n\n        shotgrid_type = sg_ay_dict[\"attribs\"].get(SHOTGRID_TYPE_ATTRIB)\n        ay_id = sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID)\n\n        ay_entity = None\n        sg_entity_sync_status = \"Synced\"\n\n        if ay_id:\n            ay_entity = entity_hub.get_or_query_entity_by_id(\n                ay_id, [sg_ay_dict[\"type\"]])\n\n        if shotgrid_type == \"Version\" and not ay_entity:\n            log.warning(\n                \"Version creation from Flow is not implemented because \"\n                \"Flow entity is much less strict than AYON product with reviewable \"\n                \"(e.g. product name and integer are not mandatory in Flow).\"\n            )\n            continue\n\n        # If we haven't found the ay_entity by its id, check by its name\n        # to avoid creating duplicates and erroring out\n        if ay_entity is None:\n\n            sg_parent_field = get_sg_entity_parent_field(\n                sg_session,\n                sg_project,\n                shotgrid_type,\n                sg_enabled_entities,\n            )\n            asset_category_parent = sg_parent_field == \"sg_asset_type\"\n\n            if (\n                shotgrid_type == \"Asset\"\n                and asset_category_parent\n            ):\n                # Parenting to AssetCategory is enabled.\n                # reparenting under already set parent (asset category folder).\n                log.debug(\"Reparenting %r under %r.\", sg_ay_dict, ay_parent_entity)\n\n            elif shotgrid_type in (\"Sequence\", \"Episode\", \"Shot\", \"AssetCategory\", \"Asset\"):\n                ay_parent_entity = get_reparenting_from_settings(\n                    entity_hub,\n                    sg_ay_dict,\n                    addon_settings\n                ) or ay_parent_entity\n\n            name = slugify_string(sg_ay_dict[\"name\"])\n            for child in ay_parent_entity.children:\n                if child.name.lower() == name.lower():\n                    ay_entity = child\n                    break\n\n        # If we couldn't find it we create it.\n        if ay_entity is None:\n            ay_entity = create_new_ayon_entity(\n                sg_session,\n                entity_hub,\n                ay_parent_entity,\n                sg_ay_dict\n            )\n        else:\n\n            if not _update_ay_entity(\n                ay_entity,\n                custom_attribs_map,\n                entity_hub,\n                sg_ay_dict,\n                sg_entity_id,\n            ):\n                sg_entity_sync_status = \"Failed\"\n                sg_project_sync_status = \"Failed\"\n\n\n        # skip if no ay_entity is found\n        # perhaps due Task with project entity as parent\n        if not ay_entity:\n            log.error(f\"Entity {sg_ay_dict} not found in AYON.\")\n            continue\n\n        # pass AYON id to SG\n        _update_sg_entity(\n            ay_entity,\n            sg_ay_dict,\n            sg_ay_dicts,\n            sg_entity_id,\n            sg_entity_sync_status,\n            sg_session\n        )\n\n        # If the entity has children, add it to the deck\n        for sg_child_id in sg_ay_dicts_parents.get(sg_ay_dict_child_id, []):\n            sg_ay_dicts_deck.append((ay_entity, sg_child_id))\n\n    _sync_project_attributes(entity_hub, custom_attribs_map, sg_project)\n\n    try:\n        entity_hub.commit_changes()\n    except Exception:\n        log.error(\n            \"Unable to commit all entities to AYON!\", exc_info=True)\n\n    log.info(\n        \"Processed entities successfully!. \"\n        f\"Amount of entities: {len(processed_ids)}\"\n    )\n\n    # Update Shotgrid project with AYON ID and sync status\n    sg_session.update(\n        \"Project\",\n        sg_project[\"id\"],\n        {\n            CUST_FIELD_CODE_ID: entity_hub.project_entity.id,\n            CUST_FIELD_CODE_SYNC: sg_project_sync_status\n        }\n    )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.html","title":"update_from_ayon","text":"<p>Module that handles creation, update or removal of SG entities based on AYON events.</p>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_ayon.create_sg_entity_from_ayon_event","title":"<code>create_sg_entity_from_ayon_event(ayon_event, sg_session, ayon_entity_hub, sg_project, sg_enabled_entities, sg_project_code_field, custom_attribs_map, addon_settings)</code>","text":"<p>Create a Shotgrid entity from an AYON event.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event</code> <code>dict</code> <p>AYON event.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The Shotgrid API session.</p> required <code>ayon_entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>sg_project</code> <code>dict</code> <p>The Shotgrid project.</p> required <code>sg_enabled_entities</code> <code>list</code> <p>List of Shotgrid entities to be enabled.</p> required <code>sg_project_code_field</code> <code>str</code> <p>'code' most likely</p> required <code>custom_attribs_map</code> <code>dict</code> <p>Dictionary that maps a list of attribute names from AYON to Shotgrid.</p> required <p>Returns:</p> Name Type Description <code>ay_entity</code> <code>Entity</code> <p>The newly created entity.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.py</code> <pre><code>def create_sg_entity_from_ayon_event(\n    ayon_event: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_project: Dict,\n    sg_enabled_entities: List[str],\n    sg_project_code_field: [str],\n    custom_attribs_map: Dict[str, str],\n    addon_settings: Dict[str, Any],\n):\n    \"\"\"Create a Shotgrid entity from an AYON event.\n\n    Args:\n        sg_event (dict): AYON event.\n        sg_session (shotgun_api3.Shotgun): The Shotgrid API session.\n        ayon_entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        sg_project (dict): The Shotgrid project.\n        sg_enabled_entities (list): List of Shotgrid entities to be enabled.\n        sg_project_code_field (str): 'code' most likely\n        custom_attribs_map (dict): Dictionary that maps a list of attribute names from\n            AYON to Shotgrid.\n\n    Returns:\n        ay_entity (ayon_api.entity_hub.EntityHub.Entity): The newly\n            created entity.\n    \"\"\"\n    ay_id = ayon_event[\"summary\"][\"entityId\"]\n    ay_entity = ayon_entity_hub.get_or_query_entity_by_id(\n        ay_id, [\"folder\", \"task\", \"version\"])\n\n    if not ay_entity:\n        raise ValueError(\n            \"Event has a non existent entity? \"\n            f\"{ayon_event['summary']['entityId']}\"\n        )\n\n    sg_id = ay_entity.attribs.get(\"shotgridId\")\n    sg_type = ay_entity.attribs.get(\"shotgridType\")\n\n    if not sg_type:\n        if ay_entity.entity_type == \"task\":\n            sg_type = \"Task\"\n        elif ay_entity.entity_type == \"version\":\n            sg_type = \"Version\"\n        else:\n            sg_type = ay_entity.folder_type\n\n    sg_entity = None\n\n    if sg_id and sg_type:\n        sg_entity = sg_session.find_one(sg_type, [[\"id\", \"is\", int(sg_id)]])\n\n    if sg_entity:\n        log.warning(f\"Entity {sg_entity} already exists in Shotgrid!\")\n        return ay_entity\n\n    try:\n        sg_parent_entity = _get_sg_parent_entity(\n            sg_session, ay_entity, ayon_event)\n\n        sg_entity = create_new_sg_entity(\n            ay_entity,\n            sg_session,\n            sg_project,\n            sg_parent_entity,\n            sg_enabled_entities,\n            sg_project_code_field,\n            custom_attribs_map,\n            addon_settings,\n            ayon_event[\"project\"]\n        )\n        if not sg_entity:\n            log.warning(f\"Couldn't create SG entity for '{ay_id}\")\n\n        if (\n            ay_entity.entity_type == \"folder\"\n            and ay_entity.folder_type == \"AssetCategory\"\n        ):\n            # AssetCategory is special, we don't want to create it in Shotgrid\n            # but we need to assign Shotgrid ID and Type to it\n            sg_entity = {\n                \"id\": ay_entity.name.lower(),\n                \"type\": \"AssetCategory\"\n            }\n\n        if not sg_entity:\n            if hasattr(ay_entity, \"folder_type\"):\n                log.warning(\n                    f\"Unable to create `{ay_entity.folder_type}` &lt;{ay_id}&gt; \"\n                    \"in Shotgrid!\"\n                )\n            else:\n                log.warning(\n                    f\"Unable to create `{ay_entity.entity_type}` &lt;{ay_id}&gt; \"\n                    \"in Shotgrid!\"\n                )\n            return None\n\n        sg_id = sg_entity[\"attribs\"][\"shotgridId\"]\n        sg_type = sg_entity[\"attribs\"][\"shotgridType\"]\n        log.info(f\"Created Shotgrid entity: {sg_id} of {sg_type}\")\n\n        ay_entity.attribs.set(\n            SHOTGRID_ID_ATTRIB,\n            sg_id\n        )\n        ay_entity.attribs.set(\n            SHOTGRID_TYPE_ATTRIB,\n            sg_type\n        )\n        ayon_entity_hub.commit_changes()\n        return ay_entity\n\n    except Exception:\n        log.error(\n            f\"Unable to create {sg_type} &lt;{ay_id}&gt; in Shotgrid!\",\n            exc_info=True\n        )\n        return None\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_ayon.remove_sg_entity_from_ayon_event","title":"<code>remove_sg_entity_from_ayon_event(ayon_event, sg_session)</code>","text":"<p>Try to remove a Shotgrid entity from an AYON event.</p> <p>Parameters:</p> Name Type Description Default <code>ayon_event</code> <code>dict</code> <p>The <code>meta</code> key from a Shotgrid Event.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The Shotgrid API session.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.py</code> <pre><code>def remove_sg_entity_from_ayon_event(\n    ayon_event: Dict,\n    sg_session: shotgun_api3.Shotgun\n):\n    \"\"\"Try to remove a Shotgrid entity from an AYON event.\n\n    Args:\n        ayon_event (dict): The `meta` key from a Shotgrid Event.\n        sg_session (shotgun_api3.Shotgun): The Shotgrid API session.\n    \"\"\"\n    ay_id = ayon_event[\"payload\"][\"entityData\"][\"id\"]\n    log.debug(f\"Removing Shotgrid entity: {ayon_event['payload']}\")\n\n    sg_id = ayon_event[\"payload\"][\"entityData\"][\"attrib\"].get(\"shotgridId\")\n\n    if not sg_id:\n        ay_entity_path = ayon_event[\"payload\"][\"entityData\"][\"path\"]\n        log.warning(\n            f\"Entity '{ay_entity_path}' does not have a \"\n            \"ShotGrid ID to remove.\"\n        )\n        return\n\n    sg_type = ayon_event[\"payload\"][\"entityData\"][\"attrib\"][\"shotgridType\"]\n\n    if not sg_type:\n        sg_type = ayon_event[\"payload\"][\"folderType\"]\n\n    if sg_id and sg_type:\n        sg_entity = sg_session.find_one(\n            sg_type,\n            filters=[[\"id\", \"is\", int(sg_id)]]\n        )\n    else:\n        sg_entity = sg_session.find_one(\n            sg_type,\n            filters=[[CUST_FIELD_CODE_ID, \"is\", ay_id]]\n        )\n\n    if not sg_entity:\n        log.warning(\n            f\"Unable to find AYON entity with id '{ay_id}' in Shotgrid.\")\n        return\n\n    sg_id = sg_entity[\"id\"]\n\n    try:\n        sg_session.delete(sg_type, int(sg_id))\n        log.info(f\"Retired Shotgrid entity: {sg_type} &lt;{sg_id}&gt;\")\n    except Exception:\n        log.error(\n            f\"Unable to delete {sg_type} &lt;{sg_id}&gt; in Shotgrid!\",\n            exc_info=True\n        )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_ayon.update_sg_entity_from_ayon_event","title":"<code>update_sg_entity_from_ayon_event(ayon_event, sg_session, ayon_entity_hub, sg_project, sg_enabled_entities, sg_project_code_field, custom_attribs_map, addon_settings)</code>","text":"<p>Try to update a Shotgrid entity from an AYON event.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event</code> <code>dict</code> <p>The <code>meta</code> key from a Shotgrid Event.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The Shotgrid API session.</p> required <code>ayon_entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>A mapping of custom attributes to update.</p> required <p>Returns:</p> Name Type Description <code>sg_entity</code> <code>dict</code> <p>The modified Shotgrid entity.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_ayon.py</code> <pre><code>def update_sg_entity_from_ayon_event(\n    ayon_event: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_project: Dict,\n    sg_enabled_entities: List[str],\n    sg_project_code_field: [str],\n    custom_attribs_map: Dict[str, str],\n    addon_settings: Dict[str, Any],\n):\n    \"\"\"Try to update a Shotgrid entity from an AYON event.\n\n    Args:\n        sg_event (dict): The `meta` key from a Shotgrid Event.\n        sg_session (shotgun_api3.Shotgun): The Shotgrid API session.\n        ayon_entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        custom_attribs_map (dict): A mapping of custom attributes to update.\n\n    Returns:\n        sg_entity (dict): The modified Shotgrid entity.\n\n    \"\"\"\n    ay_id = ayon_event[\"summary\"][\"entityId\"]\n    ay_entity = ayon_entity_hub.get_or_query_entity_by_id(\n        ay_id, [\"folder\", \"task\", \"version\"])\n\n    if not ay_entity:\n        raise ValueError(\n            \"Event has a non existent entity? \"\n            f\"{ayon_event['summary']['entityId']}\"\n        )\n\n    sg_id = ay_entity.attribs.get(\"shotgridId\")\n    sg_entity_type = ay_entity.attribs.get(\"shotgridType\")\n\n    # react to an AYON entity being updated\n    # that does not exist yet in Shotgrid.\n    if sg_id is None:\n\n        # Create SG entity and update existing ay_entity.\n        ay_entity = create_sg_entity_from_ayon_event(\n            ayon_event,\n            sg_session,\n            ayon_entity_hub,\n            sg_project,\n            sg_enabled_entities,\n            sg_project_code_field,\n            custom_attribs_map,\n            addon_settings,\n        )\n\n        sg_id = ay_entity.attribs.get(\"shotgridId\")\n        sg_entity_type = ay_entity.attribs.get(\"shotgridType\")\n\n        if sg_id is None:\n            log.warning(f\"Could not create SG entity from {ay_entity}.\")\n            return\n\n    try:\n        sg_field_name = \"code\"\n        if ay_entity[\"entity_type\"] == \"task\":\n            sg_field_name = \"content\"\n\n        data_to_update = {\n            CUST_FIELD_CODE_ID: ay_entity[\"id\"]\n        }\n\n        try:\n            data_to_update[sg_field_name] = ay_entity[\"name\"]\n        except NotImplementedError:\n            pass  # Version does not have a name.\n\n        # Add any possible new values to update\n        new_attribs = ayon_event[\"payload\"].get(\"newValue\")\n\n        if isinstance(new_attribs, dict):\n            # If payload newValue is a dict it means it's an attribute update\n            # but this only apply to case were attribs key is in the\n            # newValue dict\n            if \"attribs\" in new_attribs:\n                new_attribs = new_attribs[\"attribs\"]\n\n        # Label changed\n        elif ayon_event[\"topic\"].endswith(\"label_changed\"):\n            new_value = ayon_event[\"payload\"].get(\"newValue\")\n            data_to_update[sg_field_name] = new_value\n            new_attribs = None\n\n        # Otherwise it's a tag/status update\n        elif ayon_event[\"topic\"].endswith(\"status_changed\"):\n            sg_statuses = get_sg_statuses(sg_session, sg_entity_type)\n            ay_statuses = {\n                status.name: status.short_name\n                for status in  ayon_entity_hub.project_entity.statuses\n            }\n            short_name = ay_statuses.get(new_attribs)\n            if short_name in sg_statuses:\n                new_attribs = {\"status\": short_name}\n            else:\n                log.error(\n                    f\"Unable to update '{sg_entity_type}' with status \"\n                    f\"'{new_attribs}' in Shotgrid as it's not compatible! \"\n                    f\"It should be one of: {sg_statuses}\"\n                )\n                return\n\n        elif ayon_event[\"topic\"].endswith(\"tags_changed\"):\n            tags_event_list = new_attribs\n            new_attribs = {\"tags\": []}\n            sg_tags = get_sg_tags(sg_session)\n            for tag_name in tags_event_list:\n                if tag_name.lower() in sg_tags:\n                    tag_id = sg_tags[tag_name]\n                else:\n                    log.info(\n                        f\"Tag '{tag_name}' not found in ShotGrid, \"\n                        \"creating a new one.\"\n                    )\n                    new_tag = sg_session.create(\"Tag\", {'name': tag_name})\n                    tag_id = new_tag[\"id\"]\n\n                new_attribs[\"tags\"].append(\n                    {\"name\": tag_name, \"id\": tag_id, \"type\": \"Tag\"}\n                )\n        elif ayon_event[\"topic\"].endswith(\"assignees_changed\"):\n            sg_assignees = []\n            for user_name in new_attribs:\n                ayon_user = ayon_api.get_user(user_name)\n                if not ayon_user or not ayon_user[\"data\"].get(\"sg_user_id\"):\n                    log.warning(f\"User {user_name} is not synched to SG yet.\")\n                    continue\n                sg_assignees.append(\n                    {\"type\": \"HumanUser\",\n                     \"id\": ayon_user[\"data\"][\"sg_user_id\"]}\n                )\n            new_attribs = {\"assignees\": sg_assignees}\n        else:\n            log.warning(\n                \"Unknown event type, skipping update of custom attribs.\")\n            new_attribs = None\n\n        if new_attribs:\n            data_to_update.update(get_sg_custom_attributes_data(\n                sg_session,\n                new_attribs,\n                sg_entity_type,\n                custom_attribs_map\n            ))\n\n\n        sg_entity = sg_session.update(\n            sg_entity_type,\n            int(sg_id),\n            data_to_update\n        )\n        log.info(f\"Updated ShotGrid entity: {sg_entity}\")\n        return sg_entity\n\n    except Exception:\n        log.error(\n            f\"Unable to update {sg_entity_type} &lt;{sg_id}&gt; in ShotGrid!\",\n            exc_info=True\n        )\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.html","title":"update_from_shotgrid","text":"<p>Module that handles creation, update or removal of AYON entities based on ShotGrid Events.</p> <p>The updates come through <code>meta</code> dictionaries such as: \"meta\": {     \"id\": 1274,     \"type\": \"entity_retirement\",     \"entity_id\": 1274,     \"class_name\": \"Shot\",     \"entity_type\": \"Shot\",     \"display_name\": \"bunny_099_012\",     \"retirement_date\": \"2023-03-31 15:26:16 UTC\" }</p> <p>And most of the times it fetches the ShotGrid entity as an AYON dict like: {     \"label\": label,     \"name\": name,     SHOTGRID_ID_ATTRIB: ShotGrid id,     CUST_FIELD_CODE_ID: ayon id stored in ShotGrid,     CUST_FIELD_CODE_SYNC: sync status stored in ShotGrid,     \"type\": the entity type, }</p>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_shotgrid.create_ay_entity_from_sg_event","title":"<code>create_ay_entity_from_sg_event(sg_event, sg_project, sg_session, ayon_entity_hub, sg_enabled_entities, project_code_field, custom_attribs_map=None, addon_settings=None)</code>","text":"<p>Create an AYON entity from a ShotGrid Event.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event</code> <code>dict</code> <p>The <code>meta</code> key from a ShotGrid Event.</p> required <code>sg_project</code> <code>dict</code> <p>The ShotGrid project.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The ShotGrid API session.</p> required <code>ayon_entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>sg_enabled_entities</code> <code>list[str]</code> <p>List of entity strings enabled.</p> required <code>project_code_field</code> <code>str</code> <p>The Shotgrid project code field.</p> required <code>custom_attribs_map</code> <code>Optional[dict]</code> <p>A dictionary that maps ShotGrid attributes to Ayon attributes.</p> <code>None</code> <code>addon_settings</code> <code>Optional[dict]</code> <p>A dictionary of Settings</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ay_entity</code> <code>Entity</code> <p>The newly created entity.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.py</code> <pre><code>def create_ay_entity_from_sg_event(\n    sg_event: Dict,\n    sg_project: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_enabled_entities: List[str],\n    project_code_field: str,\n    custom_attribs_map: Optional[Dict[str, str]] = None,\n    addon_settings: Optional[Dict[str, str]] = None\n):\n    \"\"\"Create an AYON entity from a ShotGrid Event.\n\n    Args:\n        sg_event (dict): The `meta` key from a ShotGrid Event.\n        sg_project (dict): The ShotGrid project.\n        sg_session (shotgun_api3.Shotgun): The ShotGrid API session.\n        ayon_entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        sg_enabled_entities (list[str]): List of entity strings enabled.\n        project_code_field (str): The Shotgrid project code field.\n        custom_attribs_map (Optional[dict]): A dictionary that maps ShotGrid\n            attributes to Ayon attributes.\n        addon_settings (Optional[dict]): A dictionary of Settings\n\n    Returns:\n        ay_entity (ayon_api.entity_hub.EntityHub.Entity): The newly\n            created entity.\n    \"\"\"\n    default_task_type = addon_settings[\n        \"compatibility_settings\"][\"default_task_type\"]\n    sg_parent_field = get_sg_entity_parent_field(\n        sg_session,\n        sg_project,\n        sg_event[\"entity_type\"],\n        sg_enabled_entities,\n    )\n\n    extra_fields = [sg_parent_field]\n\n\n    sg_ay_dict = get_sg_entity_as_ay_dict(\n        sg_session,\n        sg_event[\"entity_type\"],\n        sg_event[\"entity_id\"],\n        project_code_field,\n        default_task_type,\n        custom_attribs_map=custom_attribs_map,\n        extra_fields=extra_fields,\n    )\n\n    if sg_ay_dict[\"type\"].lower() == \"comment\":\n        # SG note as AYON comment creation is\n        # handled by update_ayon_entity_from_sg_event\n        return\n\n    log.debug(f\"ShotGrid Entity as AYON dict: {sg_ay_dict}\")\n    if not sg_ay_dict:\n        log.warning(\n            f\"Entity {sg_event['entity_type']} &lt;{sg_event['entity_id']}&gt; \"\n            \"no longer exists in ShotGrid, aborting...\"\n        )\n        return\n\n    ayon_id_stored_in_sg = sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID)\n    if ayon_id_stored_in_sg:\n        # Revived entity, check if it's still in the Server\n        ay_entity = ayon_entity_hub.get_or_query_entity_by_id(\n            ayon_id_stored_in_sg,\n            [sg_ay_dict[\"type\"]]\n        )\n\n        if ay_entity:\n            log.debug(\"ShotGrid Entity exists in AYON.\")\n            # Ensure AYON Entity has the correct ShotGrid ID\n            ay_entity = _update_sg_id(\n                ay_entity,\n                custom_attribs_map,\n                sg_ay_dict,\n                ayon_entity_hub.project_entity\n            )\n\n            return ay_entity\n\n    ay_parent_entity = None\n    items_to_create = collections.deque()\n    while ay_parent_entity is None:\n        items_to_create.append(sg_ay_dict)\n        ay_parent_entity = _get_ayon_parent_entity(\n            ayon_entity_hub,\n            project_code_field,\n            sg_ay_dict,\n            sg_parent_field,\n            sg_project,\n            sg_session,\n            addon_settings\n        )\n\n        sg_parent = sg_ay_dict[\"data\"].get(sg_parent_field)\n        if not ay_parent_entity and not sg_parent:\n            ay_parent_entity = ayon_entity_hub.project_entity\n\n        if not ay_parent_entity:\n            if sg_ay_dict[\"data\"][sg_parent_field][\"type\"] == \"Asset\":\n                extra_field = \"sg_asset_type\"\n\n            else:\n                extra_field = get_sg_entity_parent_field(\n                    sg_session,\n                    sg_project,\n                    sg_ay_dict[\"data\"][sg_parent_field][\"type\"],\n                    sg_enabled_entities,\n                )\n\n            sg_ay_dict = get_sg_entity_as_ay_dict(\n                sg_session,\n                sg_ay_dict[\"data\"][sg_parent_field][\"type\"],\n                sg_ay_dict[\"data\"][sg_parent_field][\"id\"],\n                project_code_field,\n                default_task_type,\n                custom_attribs_map=custom_attribs_map,\n                extra_fields=[extra_field],\n            )\n            sg_parent_field = extra_field\n\n    while items_to_create:\n        sg_ay_dict = items_to_create.pop()\n\n        shotgrid_type = sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB]\n        sg_parent_field = get_sg_entity_parent_field(\n            sg_session,\n            sg_project,\n            shotgrid_type,\n            sg_enabled_entities,\n        )\n        ay_parent_entity = _get_ayon_parent_entity(\n            ayon_entity_hub,\n            project_code_field,\n            sg_ay_dict,\n            sg_parent_field,\n            sg_project,\n            sg_session,\n            addon_settings\n        )\n\n        ay_entity = create_new_ayon_entity(\n            sg_session,\n            ayon_entity_hub,\n            ay_parent_entity,\n            sg_ay_dict\n        )\n\n    return ay_entity\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_shotgrid.remove_ayon_entity_from_sg_event","title":"<code>remove_ayon_entity_from_sg_event(sg_event, sg_session, ayon_entity_hub, project_code_field, addon_settings)</code>","text":"<p>Try to remove an entity in AYON.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event</code> <code>dict</code> <p>The <code>meta</code> key from a ShotGrid Event.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The ShotGrid API session.</p> required <code>ayon_entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>project_code_field</code> <code>str</code> <p>The ShotGrid field that contains the AYON ID.</p> required <code>addon_settings</code> <code>dict</code> <p>A dictionary of Settings.</p> required Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.py</code> <pre><code>def remove_ayon_entity_from_sg_event(\n    sg_event: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    project_code_field: str,\n    addon_settings: Dict[str, Any],\n):\n    \"\"\"Try to remove an entity in AYON.\n\n    Args:\n        sg_event (dict): The `meta` key from a ShotGrid Event.\n        sg_session (shotgun_api3.Shotgun): The ShotGrid API session.\n        ayon_entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        project_code_field (str): The ShotGrid field that contains the AYON ID.\n        addon_settings (dict): A dictionary of Settings.\n    \"\"\"\n    default_task_type = addon_settings[\n        \"compatibility_settings\"][\"default_task_type\"]\n\n    sg_ay_dict = get_sg_entity_as_ay_dict(\n        sg_session,\n        sg_event[\"entity_type\"],\n        sg_event[\"entity_id\"],\n        project_code_field,\n        default_task_type,\n        retired_only=True\n    )\n\n    if not sg_ay_dict:\n        sg_ay_dict = get_sg_entity_as_ay_dict(\n            sg_session,\n            sg_event[\"entity_type\"],\n            sg_event[\"entity_id\"],\n            project_code_field,\n            default_task_type,\n            retired_only=False,\n        )\n        if sg_ay_dict:\n            log.info(\n                f\"No need to remove entity {sg_event['entity_type']} \"\n                f\"&lt;{sg_event['entity_id']}&gt;, it's not retired anymore.\"\n            )\n            return\n        else:\n            log.warning(\n                f\"Entity {sg_event['entity_type']} &lt;{sg_event['entity_id']}&gt; \"\n                \"no longer exists in ShotGrid.\"\n            )\n\n    if not sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID):\n        log.warning(\n            \"Entity does not have an AYON ID, aborting...\"\n        )\n        return\n\n    ay_entity = ayon_entity_hub.get_or_query_entity_by_id(\n        sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID),\n        [\"task\" if sg_ay_dict.get(\"type\").lower() == \"task\" else \"folder\"]\n    )\n\n    if not ay_entity:\n        raise ValueError(\"Unable to update a non existing entity.\")\n\n    if sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID) != ay_entity.id:\n        raise ValueError(\"Mismatching ShotGrid IDs, aborting...\")\n\n    if not ay_entity.immutable_for_hierarchy:\n        log.info(f\"Deleting AYON entity: {ay_entity}\")\n        ayon_entity_hub.delete_entity(ay_entity)\n    else:\n        log.info(\"Entity is immutable.\")\n        ay_entity.attribs.set(SHOTGRID_ID_ATTRIB, SHOTGRID_REMOVED_VALUE)\n\n    ayon_entity_hub.commit_changes()\n</code></pre>"},{"location":"autoapi/services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.html#services.shotgrid_common.ayon_shotgrid_hub.update_from_shotgrid.update_ayon_entity_from_sg_event","title":"<code>update_ayon_entity_from_sg_event(sg_event, sg_project, sg_session, ayon_entity_hub, sg_enabled_entities, project_code_field, addon_settings, custom_attribs_map=None)</code>","text":"<p>Try to update an entity in AYON.</p> <p>Parameters:</p> Name Type Description Default <code>sg_event</code> <code>dict</code> <p>The <code>meta</code> key from a ShotGrid Event.</p> required <code>sg_project</code> <code>dict</code> <p>The ShotGrid project.</p> required <code>sg_session</code> <code>Shotgun</code> <p>The ShotGrid API session.</p> required <code>ayon_entity_hub</code> <code>EntityHub</code> <p>The AYON EntityHub.</p> required <code>sg_enabled_entities</code> <code>list[str]</code> <p>List of entity strings enabled.</p> required <code>project_code_field</code> <code>str</code> <p>The ShotGrid project code field.</p> required <code>addon_settings</code> <code>dict</code> <p>A dictionary of Settings.</p> required <code>custom_attribs_map</code> <code>dict</code> <p>A dictionary that maps ShotGrid attributes to AYON attributes.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ay_entity</code> <code>Entity</code> <p>The modified entity.</p> Source code in <code>services/shotgrid_common/ayon_shotgrid_hub/update_from_shotgrid.py</code> <pre><code>def update_ayon_entity_from_sg_event(\n    sg_event: Dict,\n    sg_project: Dict,\n    sg_session: shotgun_api3.Shotgun,\n    ayon_entity_hub: ayon_api.entity_hub.EntityHub,\n    sg_enabled_entities: List[str],\n    project_code_field: str,\n    addon_settings: Dict[str, Any],\n    custom_attribs_map: Optional[Dict[str, str]] = None,\n):\n    \"\"\"Try to update an entity in AYON.\n\n    Args:\n        sg_event (dict): The `meta` key from a ShotGrid Event.\n        sg_project (dict): The ShotGrid project.\n        sg_session (shotgun_api3.Shotgun): The ShotGrid API session.\n        ayon_entity_hub (ayon_api.entity_hub.EntityHub): The AYON EntityHub.\n        sg_enabled_entities (list[str]): List of entity strings enabled.\n        project_code_field (str): The ShotGrid project code field.\n        addon_settings (dict): A dictionary of Settings.\n        custom_attribs_map (dict): A dictionary that maps ShotGrid\n            attributes to AYON attributes.\n\n    Returns:\n        ay_entity (ayon_api.entity_hub.EntityHub.Entity): The modified entity.\n\n    \"\"\"\n    default_task_type = addon_settings[\n        \"compatibility_settings\"][\"default_task_type\"]\n\n    sg_ay_dict = get_sg_entity_as_ay_dict(\n        sg_session,\n        sg_event[\"entity_type\"],\n        sg_event[\"entity_id\"],\n        project_code_field,\n        default_task_type,\n        custom_attribs_map=custom_attribs_map\n    )\n\n    if not sg_ay_dict:\n        log.warning(\n            f\"Entity {sg_event['entity_type']} &lt;{sg_event['entity_id']}&gt; \"\n            \"no longer exists in ShotGrid, aborting...\"\n        )\n        return\n\n    if sg_ay_dict[\"type\"].lower() == \"comment\":\n        handle_comment(sg_ay_dict, sg_session, ayon_entity_hub)\n        return\n\n    # if the entity does not have an AYON ID, try to create it\n    # and no need to update\n    if not sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID):\n        log.debug(f\"Creating AYON Entity: {sg_ay_dict}\")\n        try:\n            create_ay_entity_from_sg_event(\n                sg_event,\n                sg_project,\n                sg_session,\n                ayon_entity_hub,\n                sg_enabled_entities,\n                project_code_field,\n                custom_attribs_map\n            )\n        except Exception:\n            log.debug(\"AYON Entity could not be created\", exc_info=True)\n        return\n\n    ay_entity = ayon_entity_hub.get_or_query_entity_by_id(\n        sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID),\n        [sg_ay_dict[\"type\"]]\n    )\n\n    if not ay_entity:\n        raise ValueError(\"Unable to update a non existing entity.\")\n\n    # make sure the entity is not immutable\n    if (\n        ay_entity.immutable_for_hierarchy\n        and sg_event[\"attribute_name\"] in SG_RESTRICTED_ATTR_FIELDS\n    ):\n        raise ValueError(\"Entity is immutable, aborting...\")\n\n    # Ensure AYON Entity has the correct ShotGrid ID\n    ayon_entity_sg_id = str(\n        ay_entity.attribs.get(SHOTGRID_ID_ATTRIB, \"\")\n    )\n    sg_entity_sg_id = str(\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_ID_ATTRIB, \"\")\n    )\n\n\n    # We need to check for existence in `ayon_entity_sg_id` as it could be\n    # that it's a new entity and it doesn't have a ShotGrid ID yet.\n    if ayon_entity_sg_id and ayon_entity_sg_id != sg_entity_sg_id:\n        log.error(\"Mismatching ShotGrid IDs, aborting...\")\n        raise ValueError(\"Mismatching ShotGrid IDs, aborting...\")\n\n    # Update entity label.\n    if ay_entity.entity_type != \"version\":\n        log.debug(f\"Updating AYON Entity: {ay_entity.name}\")\n    else:\n        log.debug(f\"Updating AYON Entity: {ay_entity}\")\n\n    # TODO: Only update the updated fields in the event\n    update_ay_entity_custom_attributes(\n        ay_entity,\n        sg_ay_dict,\n        custom_attribs_map,\n        ay_project=ayon_entity_hub.project_entity\n    )\n\n    ayon_entity_hub.commit_changes()\n\n    if sg_ay_dict[\"data\"].get(CUST_FIELD_CODE_ID) != ay_entity.id:\n        sg_session.update(\n            sg_ay_dict[\"attribs\"][SHOTGRID_TYPE_ATTRIB],\n            sg_ay_dict[\"attribs\"][SHOTGRID_ID_ATTRIB],\n            {\n                CUST_FIELD_CODE_ID: ay_entity.id\n            }\n        )\n\n    ay_entity.attribs.set(\n        SHOTGRID_ID_ATTRIB,\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_ID_ATTRIB, \"\")\n    )\n    ay_entity.attribs.set(\n        SHOTGRID_TYPE_ATTRIB,\n        sg_ay_dict[\"attribs\"].get(SHOTGRID_TYPE_ATTRIB, \"\")\n    )\n\n    return ay_entity\n</code></pre>"},{"location":"autoapi/services/tests/index.html","title":"tests","text":"<p>Tests for services code.</p>"},{"location":"autoapi/services/tests/conftest.html","title":"conftest","text":""},{"location":"autoapi/services/tests/conftest.html#services.tests.conftest.hub_and_project","title":"<code>hub_and_project(mockgun_project)</code>","text":"<p>Fixture that sets up the AyonShotgridHub and related mock entities.</p> Source code in <code>services/tests/conftest.py</code> <pre><code>@pytest.fixture\ndef hub_and_project(mockgun_project):\n    \"\"\"Fixture that sets up the AyonShotgridHub and related mock entities.\"\"\"\n    mg, project = mockgun_project\n\n    hub = AyonShotgridHub(\n        mg,\n        \"test_project\",\n        \"test\",\n        sg_project_code_field=\"code\",\n        sg_enabled_entities=(\n            \"Episode\",\n            \"Sequence\",\n            \"Shot\",\n            \"Asset\",\n        ),\n    )\n\n    entity_hub = MockEntityHub(\"test_project\")\n\n    project_entity = MockFolderEntity(\n        \"test_project\",\n        \"Project\",\n        parent_id=None,\n        entity_hub=entity_hub,\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: str(project[\"id\"]),\n            constants.SHOTGRID_TYPE_ATTRIB: \"Project\",\n        }\n    )\n\n    # Inject mock entity hub into the hub\n    hub._ay_project = entity_hub\n\n    return {\n        \"hub\": hub,\n        \"entity_hub\": entity_hub,\n        \"project_entity\": project_entity,\n        \"mg\": mg,\n        \"project\": project,\n    }\n</code></pre>"},{"location":"autoapi/services/tests/conftest.html#services.tests.conftest.mockgun_project","title":"<code>mockgun_project()</code>","text":"<p>Fixture that returns a mockgun instance and a created project.</p> Source code in <code>services/tests/conftest.py</code> <pre><code>@pytest.fixture\ndef mockgun_project():\n    \"\"\"Fixture that returns a mockgun instance and a created project.\"\"\"\n    mg = mockgun.Shotgun(\"http://random_url\")\n    project = mg.create(\n        \"Project\",\n        {\n            \"code\": \"test\",\n            \"name\": \"test_project\",\n            \"sg_ayon_auto_sync\": True,\n        }\n    )\n    return mg, project\n</code></pre>"},{"location":"autoapi/services/tests/helpers.html","title":"helpers","text":"<p>Automated tests helpers.</p>"},{"location":"autoapi/services/tests/helpers.html#services.tests.helpers.recursive_partial_assert","title":"<code>recursive_partial_assert(expected, actual)</code>","text":"<p>Partial assert recursive, to compare API result from Mockgun with expected data.</p> Source code in <code>services/tests/helpers.py</code> <pre><code>def recursive_partial_assert(expected: dict, actual: dict) -&gt; bool:\n    \"\"\" Partial assert recursive, to compare API result from Mockgun with expected data.\n    \"\"\"\n    if isinstance(expected, dict):\n        assert isinstance(actual, dict), f\"Expected dict, got {type(actual)}\"\n        for key, value in expected.items():\n            assert key in actual\n\n        return all(recursive_partial_assert(value, actual[key]) for key, value in expected.items())\n\n    elif isinstance(expected, list):\n        assert isinstance(actual, list)\n\n        for exp_item in expected:\n            return any(recursive_partial_assert(exp_item, act_item) for act_item in actual)\n\n    return expected == actual\n</code></pre>"},{"location":"autoapi/services/tests/helpers.html#services.tests.helpers.setup_sg_project_and_hub","title":"<code>setup_sg_project_and_hub(ay_project_data, mg)</code>","text":"<p>Utils setup SG project and hub objects.</p> Source code in <code>services/tests/helpers.py</code> <pre><code>def setup_sg_project_and_hub(\n        ay_project_data: dataclasses.dataclass,\n        mg: mockgun.Shotgun\n    ) -&gt; AyonShotgridHub:\n    \"\"\" Utils setup SG project and hub objects.\n    \"\"\"\n    # create SG project and step in Mockgun\n    sg_project = mg.create(\n        \"Project\",\n        {\n            \"code\": ay_project_data.project_code,\n            \"name\": ay_project_data.project_name,\n            \"sg_ayon_auto_sync\": True,\n        }\n    )\n    mg.create(\"Step\", {\"code\": \"edit\", \"entity_type\": \"Asset\"})\n    mg.create(\"Step\", {\"code\": \"edit\", \"entity_type\": \"Shot\"})\n    mg.create(\"Step\", {\"code\": \"rendering\", \"entity_type\": \"Asset\"})\n    mg.create(\"Step\", {\"code\": \"rendering\", \"entity_type\": \"Shot\"})\n\n    # create some data in AYON\n    hub = AyonShotgridHub(\n        mg,\n        ay_project_data.project_name,\n        ay_project_data.project_code,\n        sg_project_code_field=\"code\",\n        sg_enabled_entities=ENABLED_ENTITIES.keys(),\n    )\n\n    hub.entity_hub.project_entity.attribs[constants.SHOTGRID_TYPE_ATTRIB] = \"Project\"\n    hub.entity_hub.project_entity.attribs[constants.SHOTGRID_ID_ATTRIB] = sg_project[\"id\"]\n    hub.entity_hub.commit_changes()\n\n    return hub, sg_project\n</code></pre>"},{"location":"autoapi/services/tests/test_sg_base.html","title":"test_sg_base","text":"<p>Base class to test Shotgrid implementation via Mockgun.</p>"},{"location":"autoapi/services/tests/test_sg_base.html#services.tests.test_sg_base.test_hub_initialization","title":"<code>test_hub_initialization(hub_and_project)</code>","text":"<p>Example test to validate the hub object was created correctly.</p> Source code in <code>services/tests/test_sg_base.py</code> <pre><code>def test_hub_initialization(hub_and_project):\n    \"\"\" Example test to validate the hub object was created correctly. \"\"\"\n    hub = hub_and_project[\"hub\"]\n    assert hub.sg_enabled_entities == (\"Episode\", \"Sequence\", \"Shot\", \"Asset\")\n</code></pre>"},{"location":"autoapi/services/tests/test_sg_base.html#services.tests.test_sg_base.test_project_entity_attributes","title":"<code>test_project_entity_attributes(hub_and_project)</code>","text":"<p>Validate attributes of the mocked FolderEntity.</p> Source code in <code>services/tests/test_sg_base.py</code> <pre><code>def test_project_entity_attributes(hub_and_project):\n    \"\"\" Validate attributes of the mocked FolderEntity. \"\"\"\n    entity = hub_and_project[\"project_entity\"]\n    assert entity.attribs[constants.SHOTGRID_TYPE_ATTRIB] == \"Project\"\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/index.html","title":"match_ayon_hierarchy","text":""},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_create.html","title":"test_create","text":"<p>Test match an AYON hierarchy to SG.</p>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_create.html#services.tests.match_ayon_hierarchy.test_create.test_match_heavy_hierarchy","title":"<code>test_match_heavy_hierarchy(empty_project, mockgun_project)</code>","text":"<p>Ensure syncing 20 assets takes less than 10 seconds.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_create.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\ndef test_match_heavy_hierarchy(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure syncing 20 assets takes less than 10 seconds.\n    \"\"\"\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    for idx in range(20):\n        entity_hub.add_new_folder(\n            folder_type=\"Asset\",\n            name=f\"my_asset_{idx}\",\n            parent_id=entity_hub.project_entity.id,\n        )\n\n    # Launch hierarchy sync\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        before = datetime.datetime.now()\n        hub.synchronize_projects()\n        after = datetime.datetime.now()\n\n    # Checks\n    assets = mg.find(\"Asset\", [[\"project\", \"is\", sg_project]], [\"project\", \"code\", \"sg_ayon_id\"])\n    elapsed = after - before\n\n    assert elapsed.total_seconds() &lt;= 10.0\n    assert len(assets) == 20\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_create.html#services.tests.match_ayon_hierarchy.test_create.test_match_hierarchy_create","title":"<code>test_match_hierarchy_create(empty_project, mockgun_project)</code>","text":"<p>Ensure new AYON folders and task are created from an AYON hierarchy.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_create.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\n@pytest.mark.parametrize(\"empty_project\", [{\"task_types\": (\"rendering\", \"edit\")}], indirect=True)\ndef test_match_hierarchy_create(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure new AYON folders and task are created from an AYON hierarchy.\n    \"\"\"\n\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    ay_asset = entity_hub.add_new_folder(\n        folder_type=\"Asset\",\n        name=\"my_asset\",\n        label=\"my_asset\",\n        parent_id=entity_hub.project_entity.id,\n    )\n    ay_sequence = entity_hub.add_new_folder(\n        folder_type=\"Sequence\",\n        name=\"my_sequence\",\n        label=\"my_sequence\",\n        parent_id=entity_hub.project_entity.id,\n    )\n    ay_shot = entity_hub.add_new_folder(\n        folder_type=\"Shot\",\n        name=\"my_shot\",\n        label=\"my_shot\",\n        parent_id=ay_sequence.id,\n    )\n    rendering_task = entity_hub.add_new_task(\n        task_type=\"rendering\",\n        name=\"my_rendering_task\",\n        label=\"my_rendering_task\",\n        parent_id=ay_asset.id,\n    )\n    edit_task = entity_hub.add_new_task(\n        task_type=\"edit\",\n        name=\"my_edit_task\",\n        label=\"my_edit_task\",\n        parent_id=ay_shot.id,\n    )\n\n    # Launch hierarchy sync\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.synchronize_projects()\n\n    # Checks\n    assets = mg.find(\"Asset\", [[\"project\", \"is\", sg_project]], [\"project\", \"code\", \"sg_ayon_id\"])\n    shots = mg.find(\"Shot\", [[\"project\", \"is\", sg_project]], [\"project\", \"sg_sequence\", \"code\", \"sg_ayon_id\"])\n    sequences = mg.find(\"Sequence\", [[\"project\", \"is\", sg_project]], [\"project\", \"code\", \"sg_ayon_id\"])\n    tasks = mg.find(\"Task\", [[\"project\", \"is\", sg_project]], [\"project\", \"content\", \"step.Step.code\", \"entity\", \"sg_ayon_id\"])\n\n    assert assets == [\n        {\n            'code': 'my_asset',\n            'id': 1,\n            'project': {\n                'id': 2,\n                'name': ay_project_data.project_name,\n                'type': 'Project'\n            },\n            'type': 'Asset',\n            'sg_ayon_id': ay_asset.id,\n        }\n    ]\n\n    assert sequences == [\n        {\n            'code': 'my_sequence',\n            'id': 1,\n            'project': {\n                'id': 2,\n                'name': ay_project_data.project_name,\n                'type': 'Project'\n            },\n            'type': 'Sequence',\n            'sg_ayon_id': ay_sequence.id,\n        }\n    ]\n    assert shots == [\n        {\n            'code': 'my_shot',\n            'id': 1,\n            'project': {\n                'id': 2,\n                'name': ay_project_data.project_name,\n                'type': 'Project'\n            },\n            'sg_sequence': {\n                'id': 1,\n                'type': 'Sequence'\n            },\n            'type': 'Shot',\n            'sg_ayon_id': ay_shot.id\n        }\n    ]\n    assert tasks == [\n        {\n            'content': 'my_rendering_task',\n            'entity': {'id': 1, 'type': 'Asset'},\n            'id': 1,\n            'project': {\n                'id': 2,\n                'name': ay_project_data.project_name,\n                'type': 'Project'\n            },\n            'step.Step.code': 'rendering',\n            'type': 'Task',\n            'sg_ayon_id': rendering_task.id\n        },\n        {\n            'content': 'my_edit_task',\n            'entity': {'id': 1, 'type': 'Shot'},\n            'id': 2,\n            'project': {\n                'id': 2,\n                'name': ay_project_data.project_name,\n                'type': 'Project'\n            },\n            'step.Step.code': 'edit',\n            'type': 'Task',\n            'sg_ayon_id': edit_task.id\n        }\n    ]\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_create.html#services.tests.match_ayon_hierarchy.test_create.test_match_hierarchy_create_version","title":"<code>test_match_hierarchy_create_version(empty_project, mockgun_project)</code>","text":"<p>Ensure new AYON version are created properly.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_create.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\n@pytest.mark.parametrize(\"empty_project\", [{\"task_types\": (\"rendering\", \"edit\")}], indirect=True)\ndef test_match_hierarchy_create_version(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure new AYON version are created properly.\n    \"\"\"\n\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    ay_shot = entity_hub.add_new_folder(\n        folder_type=\"Shot\",\n        name=\"my_shot\",\n        label=\"my_shot\",\n    )\n    edit_task = entity_hub.add_new_task(\n        task_type=\"edit\",\n        name=\"my_edit_task\",\n        label=\"my_edit_task\",\n        parent_id=ay_shot.id,\n    )\n    ay_product = entity_hub.add_new_product(\n        \"product_name\",\n        \"render\",\n        folder_id=ay_shot.id,\n    )\n    ay_version = entity_hub.add_new_version(\n        25,\n        product_id=ay_product.id,\n        task_id=edit_task.id,\n        data={}\n    )\n    entity_hub.commit_changes()\n\n    # Launch hierarchy sync\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.synchronize_projects()\n\n    # Checks\n    versions = mg.find(\n        \"Version\",\n        [[\"project\", \"is\", sg_project]],\n        [\"code\", \"sg_first_frame\", \"sg_last_frame\", \"sg_version_type\", \"sg_ayon_id\"]\n    )\n\n    assert versions == [\n        {\n            'code': 'product_name_v025',\n            'sg_first_frame': 0,\n            'sg_version_type': 'render',\n            'id': 1,\n            'sg_last_frame': 0,\n            'type': 'Version',\n            'sg_ayon_id': ay_version.id,\n        }\n    ]\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_rename.html","title":"test_rename","text":"<p>Test match an AYON hierarchy to SG.</p>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_rename.html#services.tests.match_ayon_hierarchy.test_rename.test_update_rename_folder","title":"<code>test_update_rename_folder(empty_project, mockgun_project)</code>","text":"<p>Ensure renaming an entity in Flow renamed the AYON label.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_rename.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\ndef test_update_rename_folder(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure renaming an entity in Flow renamed the AYON label.\n    \"\"\"\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    ay_shot = entity_hub.add_new_folder(\n        folder_type=\"Shot\",\n        name=\"my_shot\",\n        label=\"my_shot\",\n    )\n    ay_rendering_task = entity_hub.add_new_task(\n        task_type=\"rendering\",\n        name=\"my_rendering_task\",\n        label=\"my_rendering_task\",\n        parent_id=ay_shot.id,\n    )\n    entity_hub.commit_changes()\n\n    # Sync once to create matching entities in SG\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.synchronize_projects()\n\n    # Rename label for shot and task\n    ay_shot.label = \"my_shot (renamed)\"\n    ay_rendering_task.label = \"my_rendering_task (renamed)\"\n    entity_hub.commit_changes()\n\n    # Sync another time to sync new labels.\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.synchronize_projects()\n\n    sg_shot = mg.find_one(\"Shot\", [[\"project\", \"is\", sg_project]], [\"code\", \"sg_ayon_id\"])\n    sg_task = mg.find_one(\"Task\", [[\"project\", \"is\", sg_project]], [\"content\", \"sg_ayon_id\"])\n\n    assert sg_shot == {\n        'sg_ayon_id': ay_shot.id,\n        'type': 'Shot',\n        'id': 1,\n        'code': 'my_shot (renamed)'\n    }\n\n    assert sg_task == {\n        'sg_ayon_id': ay_rendering_task.id,\n        'type': 'Task',\n        'content': 'my_rendering_task (renamed)',\n        'id': 1\n    }\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_update.html","title":"test_update","text":"<p>Test update AYON hierarchy to SG.</p>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_update.html#services.tests.match_ayon_hierarchy.test_update.test_match_hierarchy_update","title":"<code>test_match_hierarchy_update(empty_project, mockgun_project)</code>","text":"<p>Ensure new Flow entities are updated from an AYON hierarchy.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_update.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\n@pytest.mark.parametrize(\"empty_project\", [{\"task_types\": (\"rendering\", \"edit\")}], indirect=True)\ndef test_match_hierarchy_update(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure new Flow entities are updated from an AYON hierarchy.\n    \"\"\"\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    # Add \"final\" status\n    data = entity_hub.project_entity.statuses.to_data()\n    data.append({\"name\": \"Final\", \"shortName\": \"fin\"})\n    data.append({\"name\": \"In Progress\", \"shortName\": \"ip\"})\n    entity_hub.project_entity.set_statuses(data)\n\n    # An asset that exist in SG but needs update.\n    ay_asset = entity_hub.add_new_folder(\n        folder_type=\"Asset\",\n        name=\"my_asset\",\n        label=\"my_asset\",\n        parent_id=entity_hub.project_entity.id,\n        status=\"Final\",\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: \"1\",\n            constants.SHOTGRID_TYPE_ATTRIB: \"Asset\"\n        }\n    )\n    edit_task = entity_hub.add_new_task(\n        task_type=\"edit\",\n        name=\"my_edit_task\",\n        label=\"my_edit_task\",\n        parent_id=ay_asset.id,\n        status=\"Final\",\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: \"1\",\n            constants.SHOTGRID_TYPE_ATTRIB: \"Task\"\n        }\n    )\n\n    sg_asset = mg.create(\n        \"Asset\",\n        {\n            \"code\": \"my_asset\",\n            \"sg_ayon_id\": ay_asset.id,\n            \"sg_status_list\": \"wtg\",\n            \"project\": sg_project,\n        }\n    )\n    mg.create(\n        \"Task\",\n        {\n            'content': 'my_edit_task',\n            'entity': sg_asset,\n            'project': sg_project,\n            'sg_ayon_id': edit_task.id,\n            \"sg_status_list\": \"wtg\",\n        }\n    )\n\n    # A sequence that does not exist in SG but needs update.\n    ay_sequence = entity_hub.add_new_folder(\n        folder_type=\"Sequence\",\n        name=\"my_sequence\",\n        label=\"my_sequence\",\n        status=\"Final\",\n        parent_id=entity_hub.project_entity.id,\n    )\n    entity_hub.commit_changes()\n\n    # Launch hierarchy sync\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.synchronize_projects()\n\n    sg_asset = mg.find_one(\n        \"Asset\",\n        [[\"id\", \"is\", 1]],\n        [\"sg_status_list\"]\n    )\n    sg_sequence = mg.find_one(\n        \"Sequence\",\n        [[\"id\", \"is\", 1]],\n        [\"sg_status_list\", \"sg_ayon_id\"],\n    )\n    sg_task = mg.find_one(\n        \"Task\",\n        [[\"id\", \"is\", 1]],\n        [\"sg_status_list\"]\n    )\n\n    # Ensure asset status got updated.\n    assert sg_asset[\"sg_status_list\"] == \"fin\"\n\n    # Ensure sequence got created and updated.\n    assert sg_sequence[\"sg_ayon_id\"] == ay_sequence.id\n    assert sg_sequence[\"sg_status_list\"] == \"fin\"\n\n    # Ensure task status got updated.\n    assert sg_task[\"sg_status_list\"] == \"fin\"\n</code></pre>"},{"location":"autoapi/services/tests/match_ayon_hierarchy/test_update.html#services.tests.match_ayon_hierarchy.test_update.test_update_create_folder","title":"<code>test_update_create_folder(empty_project, mockgun_project)</code>","text":"<p>Ensure updating a folder that does not exist yet in SG, creates it.</p> Source code in <code>services/tests/match_ayon_hierarchy/test_update.py</code> <pre><code>@pytest.mark.skipif(helpers.IS_GITHUB_ACTIONS, reason=\"WIP make it run on GitHub actions.\")\ndef test_update_create_folder(empty_project, mockgun_project):    # noqa: F811\n    \"\"\" Ensure updating a folder that does not exist yet in SG, creates it.\n    \"\"\"\n    ay_project_data = empty_project\n    mg, _ = mockgun_project\n    hub, sg_project = helpers.setup_sg_project_and_hub(ay_project_data, mg)\n\n    entity_hub = hub.entity_hub\n\n    ay_shot = entity_hub.add_new_folder(\n        folder_type=\"Shot\",\n        name=\"my_shot\",\n        label=\"my_shot\",\n    )\n\n    # Add \"final\" status\n    data = entity_hub.project_entity.statuses.to_data()\n    data.append({\"name\": \"Final\", \"shortName\": \"fin\"})\n    entity_hub.project_entity.set_statuses(data)\n    entity_hub.commit_changes()\n\n    ay_event = {\n        'topic': 'entity.folder.status_changed',\n        'project': 'test_project',\n        'payload': {\n            'oldValue': 'not_started',\n            'newValue': 'Final'\n        },\n        'summary': {\n            'entityId': ay_shot.id,\n            'parentId': ay_shot.parent.id\n        },\n        'user': 'admin'\n    }\n\n    with (\n        mock.patch.object(validate, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n        mock.patch.object(utils, \"get_sg_project_enabled_entities\", return_value=helpers.ENABLED_ENTITIES.items()),\n    ):\n        hub.react_to_ayon_event(ay_event)\n\n    result = mg.find_one(\"Shot\", [[\"project\", \"is\", sg_project]], [\"sg_ayon_id\"])\n    assert result[\"sg_ayon_id\"] == ay_shot.id\n</code></pre>"},{"location":"autoapi/services/tests/match_shotgrid_hierarchy/index.html","title":"match_shotgrid_hierarchy","text":""},{"location":"autoapi/services/tests/match_shotgrid_hierarchy/test_create.html","title":"test_create","text":"<p>Test match an AYON hierarchy to SG.</p>"},{"location":"autoapi/services/tests/match_shotgrid_hierarchy/test_rename.html","title":"test_rename","text":"<p>Test renaming through label when matchin hierarchy.</p>"},{"location":"autoapi/services/tests/update_from_ayon/index.html","title":"update_from_ayon","text":""},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html","title":"test_create_from_ayon","text":"<p>Test entity creation from AYON to SG.</p>"},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html#services.tests.update_from_ayon.test_create_from_ayon.test_create_new_asset","title":"<code>test_create_new_asset(hub_and_project, common_ay_event)</code>","text":"<p>Ensure a new Asset is created in Flow from an AYON event.</p> Source code in <code>services/tests/update_from_ayon/test_create_from_ayon.py</code> <pre><code>def test_create_new_asset(hub_and_project, common_ay_event):\n    \"\"\" Ensure a new Asset is created in Flow from an AYON event.\n    \"\"\"\n\n    common_ay_event[\"description\"] = \"Folder new_asset created\"\n    common_ay_event[\"topic\"] = \"entity.folder.created\"\n\n    folder_entity = FolderEntity(\"new_asset\", \"Asset\", parent_id=None, entity_hub=hub_and_project[\"entity_hub\"])\n\n    with mock.patch.object(EntityHub, \"get_or_query_entity_by_id\", return_value=folder_entity), \\\n         mock.patch.object(FolderEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent, \\\n         mock.patch.object(utils, \"get_sg_entity_parent_field\", return_value=\"project\"):\n\n        mock_parent.return_value = hub_and_project[\"project_entity\"]\n        hub_and_project[\"hub\"].react_to_ayon_event(common_ay_event)\n\n    new_asset = hub_and_project[\"mg\"].find(\"Asset\", [[\"project\", \"is\", hub_and_project[\"project\"]]], [\"code\"])[0]\n    assert new_asset == {'code': 'new_asset', 'id': 1, 'type': 'Asset'}\n</code></pre>"},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html#services.tests.update_from_ayon.test_create_from_ayon.test_create_new_episode","title":"<code>test_create_new_episode(hub_and_project, common_ay_event)</code>","text":"<p>Ensure a new Episode is created in Flow from an AYON event.</p> Source code in <code>services/tests/update_from_ayon/test_create_from_ayon.py</code> <pre><code>def test_create_new_episode(hub_and_project, common_ay_event):\n    \"\"\" Ensure a new Episode is created in Flow from an AYON event.\n    \"\"\"\n\n    common_ay_event[\"description\"] = \"Folder my_new_episode created\"\n    common_ay_event[\"topic\"] = \"entity.folder.created\"\n\n    folder_entity = FolderEntity(\"new_episode\", \"Episode\", parent_id=None, entity_hub=hub_and_project[\"entity_hub\"])\n\n    with mock.patch.object(EntityHub, \"get_or_query_entity_by_id\", return_value=folder_entity), \\\n         mock.patch.object(FolderEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent, \\\n         mock.patch.object(utils, \"get_sg_entity_parent_field\", return_value=\"project\"):\n\n        mock_parent.return_value = hub_and_project[\"project_entity\"]\n        hub_and_project[\"hub\"].react_to_ayon_event(common_ay_event)\n\n    new_episode = hub_and_project[\"mg\"].find(\"Episode\", [[\"project\", \"is\", hub_and_project[\"project\"]]], [\"code\"])[0]\n    assert new_episode == {'code': 'new_episode', 'id': 1, 'type': 'Episode'}\n</code></pre>"},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html#services.tests.update_from_ayon.test_create_from_ayon.test_create_new_shot","title":"<code>test_create_new_shot(hub_and_project, common_ay_event)</code>","text":"<p>Ensure a new Shot is created in Flow from an AYON event.</p> Source code in <code>services/tests/update_from_ayon/test_create_from_ayon.py</code> <pre><code>def test_create_new_shot(hub_and_project, common_ay_event):\n    \"\"\" Ensure a new Shot is created in Flow from an AYON event.\n    \"\"\"\n\n    sg_sequence = hub_and_project[\"mg\"].create(\"Sequence\", {\"project\": hub_and_project[\"project\"], \"code\": \"my_sequence\"})\n    sequence_entity = FolderEntity(\n        \"new_sequence\",\n        \"Sequence\",\n        parent_id=None,\n        entity_hub=hub_and_project[\"entity_hub\"],\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: str(sg_sequence[\"id\"]),\n            constants.SHOTGRID_TYPE_ATTRIB: \"Sequence\",\n        }\n    )\n\n    shot_entity = FolderEntity(\"new_shot\", \"Shot\", parent_id=sequence_entity.id, entity_hub=hub_and_project[\"entity_hub\"])\n\n    common_ay_event[\"description\"] = \"Folder new_shot created\"\n    common_ay_event[\"topic\"] = \"entity.folder.created\"\n\n    with mock.patch.object(EntityHub, \"get_or_query_entity_by_id\", return_value=shot_entity), \\\n         mock.patch.object(FolderEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent, \\\n         mock.patch.object(utils, \"get_sg_entity_parent_field\", return_value=\"sg_sequence\"):\n\n        mock_parent.return_value = sequence_entity\n        hub_and_project[\"hub\"].react_to_ayon_event(common_ay_event)\n\n    new_shot = hub_and_project[\"mg\"].find(\"Shot\", [[\"project\", \"is\", hub_and_project[\"project\"]]], [\"code\", \"sg_sequence\"])[0]\n    assert new_shot == {\n        'code': 'new_shot',\n        'id': 1,\n        'type': 'Shot',\n        'sg_sequence': {'type': 'Sequence', 'id': 1}\n    }\n</code></pre>"},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html#services.tests.update_from_ayon.test_create_from_ayon.test_create_new_task","title":"<code>test_create_new_task(hub_and_project)</code>","text":"<p>Ensure a new Task is created in Flow from an AYON event.</p> Source code in <code>services/tests/update_from_ayon/test_create_from_ayon.py</code> <pre><code>def test_create_new_task(hub_and_project):\n    \"\"\" Ensure a new Task is created in Flow from an AYON event.\n    \"\"\"\n\n    mg = hub_and_project[\"mg\"]\n    project = hub_and_project[\"project\"]\n    entity_hub = hub_and_project[\"entity_hub\"]\n    hub = hub_and_project[\"hub\"]\n\n    sg_sequence = mg.create(\"Sequence\", {\"project\": project, \"code\": \"my_sequence\"})\n    mg.create(\"Step\", {\"code\": \"edit\", \"entity_type\": \"Sequence\"})\n\n    sequence_entity = FolderEntity(\n        \"new_sequence\",\n        \"Sequence\",\n        parent_id=None,\n        entity_hub=entity_hub,\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: str(sg_sequence[\"id\"]),\n            constants.SHOTGRID_TYPE_ATTRIB: \"Sequence\",\n        }\n    )\n\n    task_entity = TaskEntity(\n        \"new_task\",\n        task_type=\"edit\",\n        folder_id=\"11d9f4cd1fac11f099587cb566e6652d\",\n        entity_id=\"f56a1540251011f08eedd9567d7d6404\",\n        entity_hub=entity_hub,\n    )\n\n    ay_event = {\n        'createdAt': '2025-04-29T15:45:23.550702+00:00',\n        'dependsOn': None,\n        'description': 'Task new_edit_task created',\n        'hash': 'f69a64a6251011f0ac900242ac120002',\n        'id': 'f69a64a6251011f0ac900242ac120002',\n        'payload': {},\n        'project': 'test_project',\n        'retries': 0,\n        'sender': '1YWHoUnmujGNUKwXWuiLvP',\n        'senderType': 'api',\n        'status': 'finished',\n        'summary': {\n            'entityId': 'f56a1540251011f08eedd9567d7d6404',\n            'parentId': '11d9f4cd1fac11f099587cb566e6652d'\n        },\n        'topic': 'entity.task.created',\n        'updatedAt': '2025-04-29T15:45:23.550702+00:00',\n        'user': 'admin'\n    }\n\n    with mock.patch.object(EntityHub, \"get_or_query_entity_by_id\", return_value=task_entity), \\\n         mock.patch.object(TaskEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent, \\\n         mock.patch.object(utils, \"get_sg_entity_parent_field\", return_value=\"entity\"), \\\n         mock.patch.object(utils, \"_sg_to_ay_dict\", return_value={}):\n\n        mock_parent.return_value = sequence_entity\n        hub.react_to_ayon_event(ay_event)\n\n    new_task = mg.find(\"Task\", [[\"project\", \"is\", project]], [\"code\", \"entity\", \"step\"])[0]\n    assert new_task == {\n        'code': None,\n        'entity': {'id': 1, 'type': 'Sequence'},\n        'step': {'id': 1, 'type': 'Step'},\n        'id': 1,\n        'type': 'Task'\n    }\n</code></pre>"},{"location":"autoapi/services/tests/update_from_ayon/test_create_from_ayon.html#services.tests.update_from_ayon.test_create_from_ayon.test_create_new_version","title":"<code>test_create_new_version(hub_and_project)</code>","text":"<p>Ensure a new Task is created in Flow from an AYON event.</p> Source code in <code>services/tests/update_from_ayon/test_create_from_ayon.py</code> <pre><code>def test_create_new_version(hub_and_project):\n    \"\"\" Ensure a new Task is created in Flow from an AYON event.\n    \"\"\"\n\n    mg = hub_and_project[\"mg\"]\n    project = hub_and_project[\"project\"]\n    entity_hub = hub_and_project[\"entity_hub\"]\n    hub = hub_and_project[\"hub\"]\n\n    sg_sequence = mg.create(\"Sequence\", {\"project\": project, \"code\": \"my_sequence\"})\n    mg.create(\"Step\", {\"code\": \"edit\", \"entity_type\": \"Sequence\"})\n\n    sequence_entity = FolderEntity(\n        \"new_sequence\",\n        \"Sequence\",\n        parent_id=project,\n        entity_hub=entity_hub,\n        attribs={\n            constants.SHOTGRID_ID_ATTRIB: str(sg_sequence[\"id\"]),\n            constants.SHOTGRID_TYPE_ATTRIB: \"Sequence\",\n        }\n    )\n\n    product_entity = ProductEntity(\n        \"product_name\",\n        \"render\",\n        folder_id=sequence_entity.id,\n        entity_hub=entity_hub,\n    )\n\n    version_entity = VersionEntity(\n        30,\n        product_id=product_entity.id,\n        data={},\n        entity_hub=entity_hub,\n    )\n\n    ay_event = {\n        'createdAt': '2025-04-29T15:45:23.550702+00:00',\n        'dependsOn': None,\n        'description': 'Task new_edit_task created',\n        'hash': 'f69a64a6251011f0ac900242ac120002',\n        'id': 'f69a64a6251011f0ac900242ac120002',\n        'payload': {},\n        'project': 'test_project',\n        'retries': 0,\n        'sender': '1YWHoUnmujGNUKwXWuiLvP',\n        'senderType': 'api',\n        'status': 'finished',\n        'summary': {\n            'entityId': 'f56a1540251011f08eedd9567d7d6404',\n            'parentId': '11d9f4cd1fac11f099587cb566e6652d'\n        },\n        'topic': 'entity.version.created',\n        'updatedAt': '2025-04-29T15:45:23.550702+00:00',\n        'user': 'admin'\n    }\n\n    with mock.patch.object(EntityHub, \"get_or_query_entity_by_id\", return_value=version_entity), \\\n         mock.patch.object(VersionEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent, \\\n         mock.patch.object(ProductEntity, \"parent\", new_callable=mock.PropertyMock) as mock_parent_2, \\\n         mock.patch.object(ayon_api, \"get_folder_by_id\", return_value=sequence_entity.to_create_body_data()), \\\n         mock.patch.object(ayon_api, \"get_product_by_id\", return_value={\"productType\": \"render\"}), \\\n         mock.patch.object(utils, \"get_sg_entity_parent_field\", return_value=\"entity\"):\n\n        mock_parent.return_value = product_entity\n        mock_parent_2.return_value = sequence_entity\n        hub.react_to_ayon_event(ay_event)\n\n    new_version = mg.find_one(\n        \"Version\",\n        [[\"project\", \"is\", project]],\n        [\n            \"code\", \"entity\", \"sg_version_type\",\n            \"sg_first_frame\", \"sg_last_frame\"\n        ]\n    )\n\n    assert new_version == {\n        'sg_version_type': 'render',\n        'entity': {'type': 'Sequence', 'id': 1},\n        'sg_last_frame': 0,\n        'code': 'product_name_v030',\n        'sg_first_frame': 0,\n        'type': 'Version',\n        'id': 1\n    }\n</code></pre>"},{"location":"autoapi/services/tests/update_from_ayon/test_delete_from_ayon.html","title":"test_delete_from_ayon","text":"<p>Test entity deletion from AYON to SG.</p>"},{"location":"autoapi/services/tests/update_from_ayon/test_update_from_ayon.html","title":"test_update_from_ayon","text":"<p>Test entity update from AYON to SG.</p>"},{"location":"autoapi/services/transmitter/transmitter/index.html","title":"transmitter","text":""},{"location":"autoapi/services/transmitter/transmitter/index.html#services.transmitter.transmitter.ShotgridTransmitter","title":"<code>ShotgridTransmitter</code>","text":"Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>class ShotgridTransmitter:\n    log = get_logger(__file__)\n    _sg: shotgun_api3.Shotgun = None\n\n    def __init__(self):\n        \"\"\" Ensure both AYON and Shotgrid connections are available.\n\n        Set up common needed attributes and handle shotgrid connection\n        closure via signal handlers.\n\n        Args:\n            func (Callable, None): In case we want to override the default\n                function we cast to the processed events.\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Transmitter.\")\n\n        self._cached_hubs = {}\n        try:\n            ayon_api.init_service()\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            # SSL validation\n            if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n                shotgun_api3.NO_SSL_VALIDATION = True\n                self.log.info(\"SSL validation is disabled.\")\n\n            # Compatibility settings\n            custom_attribs_map = self.settings[\"compatibility_settings\"][\n                \"custom_attribs_map\"]\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in custom_attribs_map\n                if attr[\"sg\"]\n            }\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.custom_attribs_types = {\n                attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n                for attr in custom_attribs_map\n                if attr[\"sg\"]\n            }\n            self.sg_enabled_entities = (\n                self.settings[\"compatibility_settings\"]\n                             [\"shotgrid_enabled_entities\"])\n            try:\n                self.sg_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.sg_polling_frequency = 10\n\n        except Exception as e:\n            self.log.error(\"Unable to get Addon settings from the server.\")\n            raise e\n\n    def get_sg_connection(self):\n        \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n        Start connections to the APIs and catch any possible error, we abort if\n        this steps fails for any reason.\n        \"\"\"\n\n        if self._sg is None:\n            try:\n                self._sg = shotgun_api3.Shotgun(\n                    self.sg_url,\n                    script_name=self.sg_script_name,\n                    api_key=self.sg_api_key,\n                )\n            except Exception as e:\n                self.log.error(\"Unable to create Shotgrid Session.\")\n                raise e\n\n        try:\n            self._sg.connect()\n\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid.\")\n            raise e\n\n        return self._sg\n\n    def start_processing(self):\n        \"\"\" Main loop querying AYON for `entity.*` events.\n\n        We enroll to events that `created`, `deleted` and `renamed`\n        on AYON `entity` to replicate the event in Shotgrid.\n        \"\"\"\n        events_we_care = [\n            \"entity.task.created\",\n            \"entity.task.deleted\",\n            \"entity.task.renamed\",\n            \"entity.task.create\",\n            \"entity.task.assignees_changed\",\n            \"entity.task.attrib_changed\",\n            \"entity.task.label_changed\",\n            \"entity.task.status_changed\",\n            \"entity.task.tags_changed\",\n            \"entity.folder.created\",\n            \"entity.folder.deleted\",\n            \"entity.folder.renamed\",\n            \"entity.folder.attrib_changed\",\n            \"entity.folder.label_changed\",\n            \"entity.folder.status_changed\",\n            \"entity.folder.tags_changed\",\n            \"entity.version.created\",\n            \"entity.version.status_changed\",\n            \"reviewable.created\",\n            \"flow.version.mediapath\"\n        ]\n\n        last_comments_sync = datetime.min.replace(tzinfo=timezone.utc)\n        while True:\n            try:\n                # Run comments sync\n                now_time = arrow.utcnow()\n                sec_diff = (now_time - last_comments_sync).total_seconds()\n                if sec_diff &gt; COMMENTS_SYNC_INTERVAL:\n                    self._sync_comments()\n\n                # enrolling only events which were not created by any\n                # of service users so loopback is avoided\n                event = ayon_api.enroll_event_job(\n                    events_we_care,\n                    \"shotgrid.push\",\n                    socket.gethostname(),\n                    ignore_sender_types=[\"shotgrid\"],\n                    description=(\n                        \"Handle AYON entity changes and \"\n                        \"sync them to Shotgrid.\"\n                    ),\n                    max_retries=2\n                )\n\n                if not event:\n                    time.sleep(self.sg_polling_frequency)\n                    continue\n\n                source_event = ayon_api.get_event(event[\"dependsOn\"])\n\n                project_name = source_event[\"project\"]\n\n                if project_name not in self._get_sync_project_names():\n                    # This should never happen since we only fetch events of\n                    # projects we have shotgridPush enabled; but just in case\n                    # The event happens when after we deleted a project in\n                    # AYON.\n                    self.log.info(\n                        f\"Project {project_name} does not exist in AYON \"\n                        \"or does not have the `shotgridPush` attribute set, \"\n                        f\"ignoring event {event}.\"\n                    )\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        project_name=project_name,\n                        status=\"finished\"\n                    )\n                    continue\n\n                hub = self._get_hub(project_name)\n                hub.react_to_ayon_event(source_event)\n\n                self.log.info(\"Event has been processed... setting to finished!\")\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"finished\"\n                )\n            except Exception:\n                self.log.error(\n                    \"Error processing event\", exc_info=True)\n\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"failed\",\n                    payload={\n                        \"message\": traceback.format_exc(),\n                    },\n                )\n\n    def _get_sync_project_names(self):\n        \"\"\"Get project names that are enabled for SG sync.\"\"\"\n        ayon_projects = ayon_api.get_projects(fields=[\"name\", \"attrib\"])\n\n        project_names = []\n        for project in ayon_projects:\n            if project[\"attrib\"].get(\"shotgridPush\"):\n                project_names.append(project[\"name\"])\n\n        return project_names\n\n    def _get_hub(self, project_name):\n        hub = self._cached_hubs.get(project_name)\n\n        if not hub:\n            ay_project = ayon_api.get_project(project_name)\n            project_code = ay_project[\"code\"]\n            hub = AyonShotgridHub(\n                self.get_sg_connection(),\n                project_name,\n                project_code,\n                sg_project_code_field=self.sg_project_code_field,\n                custom_attribs_map=self.custom_attribs_map,\n                custom_attribs_types=self.custom_attribs_types,\n                sg_enabled_entities=self.sg_enabled_entities,\n            )\n\n            # Do not cache the hub object\n            # if the SG project does not exist (yet?).\n            # This is to force refresh on next event.\n            if hub.sg_project is not None:\n                self._cached_hubs[project_name] = hub\n\n        return hub\n\n    def _sync_comments(self):\n        \"\"\"Checks if no other syncing is runnin or when last successful ran.\"\"\"\n        any_in_progress = self._cleanup_in_progress_comment_events()\n        if any_in_progress:\n            return\n\n        now = arrow.utcnow()\n        activities_after_date = None\n\n        last_finished_event = self._get_last_finished_event()\n        if last_finished_event is not None:\n            created_at = arrow.get(\n                last_finished_event[\"createdAt\"]\n            ).to(\"local\")\n            delta = now - created_at\n            if delta.seconds &lt; COMMENTS_SYNC_INTERVAL:\n                return\n            activities_after_date = created_at\n\n        if activities_after_date is None:\n            activities_after_date = now - timedelta(days=5)\n\n        response = ayon_api.dispatch_event(\n            SHOTGRID_COMMENTS_TOPIC,\n            description=(\n                \"Synchronizing comments from AYON to SG.\"\n            ),\n            summary=None,\n            payload={},\n            finished=True,\n            store=True,\n        )\n        if isinstance(response, str):\n            event_id = response\n        else:\n            event_id = response[\"id\"]\n\n        try:\n            synced_comments = 0\n            project_names = self._get_sync_project_names()\n            for project_name in project_names:\n                hub = self._get_hub(project_name)\n                synced_comments += hub.sync_comments(activities_after_date)\n            success = True\n        except Exception:\n            success = False\n            self.log.warning(\"Failed to sync comments.\", exc_info=True)\n\n        finally:\n            ayon_api.update_event(\n                event_id,\n                description=\"Synchronized comments from AYON to SG.\",\n                status=\"finished\" if success else \"failed\",\n                payload={\"synced_comments\": synced_comments},\n            )\n\n    def _cleanup_in_progress_comment_events(self) -&gt; bool:\n        \"\"\"Clean stuck or hard failed synchronizations\"\"\"\n        in_progress_events = list(ayon_api.get_events(\n            topics={SHOTGRID_COMMENTS_TOPIC},\n            statuses={\"in_progress\"},\n            fields={\"id\", \"createdAt\"}\n        ))\n\n        any_in_progress = False\n        now = arrow.utcnow()\n        for event in in_progress_events:\n            created_at = arrow.get(event[\"createdAt\"]).to(\"local\")\n            delta = now - created_at\n            if delta.seconds &lt; COMMENTS_SYNC_TIMEOUT:\n                any_in_progress = True\n            else:\n                ayon_api.update_event(\n                    event[\"id\"],\n                    status=\"failed\",\n                )\n        return any_in_progress\n\n    def _get_last_finished_event(self):\n        \"\"\"Finds last successful run of comments synching to SG.\"\"\"\n        finished_events = list(ayon_api.get_events(\n            topics={SHOTGRID_COMMENTS_TOPIC},\n            statuses={\"finished\"},\n            limit=1,\n            order=ayon_api.SortOrder.descending,\n        ))\n        for event in finished_events:\n            return event\n        return None\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/index.html#services.transmitter.transmitter.ShotgridTransmitter.__init__","title":"<code>__init__()</code>","text":"<p>Ensure both AYON and Shotgrid connections are available.</p> <p>Set up common needed attributes and handle shotgrid connection closure via signal handlers.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>(Callable, None)</code> <p>In case we want to override the default function we cast to the processed events.</p> required Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def __init__(self):\n    \"\"\" Ensure both AYON and Shotgrid connections are available.\n\n    Set up common needed attributes and handle shotgrid connection\n    closure via signal handlers.\n\n    Args:\n        func (Callable, None): In case we want to override the default\n            function we cast to the processed events.\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Transmitter.\")\n\n    self._cached_hubs = {}\n    try:\n        ayon_api.init_service()\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        # Compatibility settings\n        custom_attribs_map = self.settings[\"compatibility_settings\"][\n            \"custom_attribs_map\"]\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in custom_attribs_map\n            if attr[\"sg\"]\n        }\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.custom_attribs_types = {\n            attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n            for attr in custom_attribs_map\n            if attr[\"sg\"]\n        }\n        self.sg_enabled_entities = (\n            self.settings[\"compatibility_settings\"]\n                         [\"shotgrid_enabled_entities\"])\n        try:\n            self.sg_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.sg_polling_frequency = 10\n\n    except Exception as e:\n        self.log.error(\"Unable to get Addon settings from the server.\")\n        raise e\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/index.html#services.transmitter.transmitter.ShotgridTransmitter.get_sg_connection","title":"<code>get_sg_connection()</code>","text":"<p>Ensure we can talk to AYON and Shotgrid.</p> <p>Start connections to the APIs and catch any possible error, we abort if this steps fails for any reason.</p> Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def get_sg_connection(self):\n    \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n    Start connections to the APIs and catch any possible error, we abort if\n    this steps fails for any reason.\n    \"\"\"\n\n    if self._sg is None:\n        try:\n            self._sg = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key,\n            )\n        except Exception as e:\n            self.log.error(\"Unable to create Shotgrid Session.\")\n            raise e\n\n    try:\n        self._sg.connect()\n\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid.\")\n        raise e\n\n    return self._sg\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/index.html#services.transmitter.transmitter.ShotgridTransmitter.start_processing","title":"<code>start_processing()</code>","text":"<p>Main loop querying AYON for <code>entity.*</code> events.</p> <p>We enroll to events that <code>created</code>, <code>deleted</code> and <code>renamed</code> on AYON <code>entity</code> to replicate the event in Shotgrid.</p> Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def start_processing(self):\n    \"\"\" Main loop querying AYON for `entity.*` events.\n\n    We enroll to events that `created`, `deleted` and `renamed`\n    on AYON `entity` to replicate the event in Shotgrid.\n    \"\"\"\n    events_we_care = [\n        \"entity.task.created\",\n        \"entity.task.deleted\",\n        \"entity.task.renamed\",\n        \"entity.task.create\",\n        \"entity.task.assignees_changed\",\n        \"entity.task.attrib_changed\",\n        \"entity.task.label_changed\",\n        \"entity.task.status_changed\",\n        \"entity.task.tags_changed\",\n        \"entity.folder.created\",\n        \"entity.folder.deleted\",\n        \"entity.folder.renamed\",\n        \"entity.folder.attrib_changed\",\n        \"entity.folder.label_changed\",\n        \"entity.folder.status_changed\",\n        \"entity.folder.tags_changed\",\n        \"entity.version.created\",\n        \"entity.version.status_changed\",\n        \"reviewable.created\",\n        \"flow.version.mediapath\"\n    ]\n\n    last_comments_sync = datetime.min.replace(tzinfo=timezone.utc)\n    while True:\n        try:\n            # Run comments sync\n            now_time = arrow.utcnow()\n            sec_diff = (now_time - last_comments_sync).total_seconds()\n            if sec_diff &gt; COMMENTS_SYNC_INTERVAL:\n                self._sync_comments()\n\n            # enrolling only events which were not created by any\n            # of service users so loopback is avoided\n            event = ayon_api.enroll_event_job(\n                events_we_care,\n                \"shotgrid.push\",\n                socket.gethostname(),\n                ignore_sender_types=[\"shotgrid\"],\n                description=(\n                    \"Handle AYON entity changes and \"\n                    \"sync them to Shotgrid.\"\n                ),\n                max_retries=2\n            )\n\n            if not event:\n                time.sleep(self.sg_polling_frequency)\n                continue\n\n            source_event = ayon_api.get_event(event[\"dependsOn\"])\n\n            project_name = source_event[\"project\"]\n\n            if project_name not in self._get_sync_project_names():\n                # This should never happen since we only fetch events of\n                # projects we have shotgridPush enabled; but just in case\n                # The event happens when after we deleted a project in\n                # AYON.\n                self.log.info(\n                    f\"Project {project_name} does not exist in AYON \"\n                    \"or does not have the `shotgridPush` attribute set, \"\n                    f\"ignoring event {event}.\"\n                )\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"finished\"\n                )\n                continue\n\n            hub = self._get_hub(project_name)\n            hub.react_to_ayon_event(source_event)\n\n            self.log.info(\"Event has been processed... setting to finished!\")\n            ayon_api.update_event(\n                event[\"id\"],\n                project_name=project_name,\n                status=\"finished\"\n            )\n        except Exception:\n            self.log.error(\n                \"Error processing event\", exc_info=True)\n\n            ayon_api.update_event(\n                event[\"id\"],\n                project_name=project_name,\n                status=\"failed\",\n                payload={\n                    \"message\": traceback.format_exc(),\n                },\n            )\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/__main__.html","title":"__main__","text":""},{"location":"autoapi/services/transmitter/transmitter/transmitter.html","title":"transmitter","text":"<p>A AYON Events listener to push changes to Shotgrid.</p> <p>This service will continually run and query the AYON Events Server in order to enroll the events of topic <code>entity.folder</code> and <code>entity.task</code> when any of the two are <code>created</code>, <code>renamed</code> or <code>deleted</code>.</p>"},{"location":"autoapi/services/transmitter/transmitter/transmitter.html#services.transmitter.transmitter.transmitter.ShotgridTransmitter","title":"<code>ShotgridTransmitter</code>","text":"Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>class ShotgridTransmitter:\n    log = get_logger(__file__)\n    _sg: shotgun_api3.Shotgun = None\n\n    def __init__(self):\n        \"\"\" Ensure both AYON and Shotgrid connections are available.\n\n        Set up common needed attributes and handle shotgrid connection\n        closure via signal handlers.\n\n        Args:\n            func (Callable, None): In case we want to override the default\n                function we cast to the processed events.\n        \"\"\"\n        self.log.info(\"Initializing the Shotgrid Transmitter.\")\n\n        self._cached_hubs = {}\n        try:\n            ayon_api.init_service()\n            self.settings = ayon_api.get_service_addon_settings()\n            service_settings = self.settings[\"service_settings\"]\n\n            self.sg_url = self.settings[\"shotgrid_server\"]\n            self.sg_project_code_field = self.settings[\n                \"shotgrid_project_code_field\"]\n\n            # get server op related ShotGrid script api properties\n            shotgrid_secret = ayon_api.get_secret(\n                service_settings[\"script_key\"])\n\n            if isinstance(shotgrid_secret, list):\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings. \"\n                    \"`ayon+settings://shotgrid/service_settings/script_key`\"\n                )\n\n            self.sg_api_key = shotgrid_secret.get(\"value\")\n            if not self.sg_api_key:\n                raise ValueError(\n                    \"Shotgrid API Key not found. Make sure to set it in the \"\n                    \"Addon System settings.\"\n                )\n\n            self.sg_script_name = service_settings[\"script_name\"]\n            if not self.sg_script_name:\n                raise ValueError(\n                    \"Shotgrid Script Name not found. Make sure to set it in \"\n                    \"the Addon System settings.\"\n                )\n\n            # SSL validation\n            if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n                shotgun_api3.NO_SSL_VALIDATION = True\n                self.log.info(\"SSL validation is disabled.\")\n\n            # Compatibility settings\n            custom_attribs_map = self.settings[\"compatibility_settings\"][\n                \"custom_attribs_map\"]\n            self.custom_attribs_map = {\n                attr[\"ayon\"]: attr[\"sg\"]\n                for attr in custom_attribs_map\n                if attr[\"sg\"]\n            }\n            self.custom_attribs_map.update({\n                \"status\": \"status_list\",\n                \"tags\": \"tags\",\n                \"assignees\": \"task_assignees\"\n            })\n\n            self.custom_attribs_types = {\n                attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n                for attr in custom_attribs_map\n                if attr[\"sg\"]\n            }\n            self.sg_enabled_entities = (\n                self.settings[\"compatibility_settings\"]\n                             [\"shotgrid_enabled_entities\"])\n            try:\n                self.sg_polling_frequency = int(\n                    service_settings[\"polling_frequency\"]\n                )\n            except Exception:\n                self.sg_polling_frequency = 10\n\n        except Exception as e:\n            self.log.error(\"Unable to get Addon settings from the server.\")\n            raise e\n\n    def get_sg_connection(self):\n        \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n        Start connections to the APIs and catch any possible error, we abort if\n        this steps fails for any reason.\n        \"\"\"\n\n        if self._sg is None:\n            try:\n                self._sg = shotgun_api3.Shotgun(\n                    self.sg_url,\n                    script_name=self.sg_script_name,\n                    api_key=self.sg_api_key,\n                )\n            except Exception as e:\n                self.log.error(\"Unable to create Shotgrid Session.\")\n                raise e\n\n        try:\n            self._sg.connect()\n\n        except Exception as e:\n            self.log.error(\"Unable to connect to Shotgrid.\")\n            raise e\n\n        return self._sg\n\n    def start_processing(self):\n        \"\"\" Main loop querying AYON for `entity.*` events.\n\n        We enroll to events that `created`, `deleted` and `renamed`\n        on AYON `entity` to replicate the event in Shotgrid.\n        \"\"\"\n        events_we_care = [\n            \"entity.task.created\",\n            \"entity.task.deleted\",\n            \"entity.task.renamed\",\n            \"entity.task.create\",\n            \"entity.task.assignees_changed\",\n            \"entity.task.attrib_changed\",\n            \"entity.task.label_changed\",\n            \"entity.task.status_changed\",\n            \"entity.task.tags_changed\",\n            \"entity.folder.created\",\n            \"entity.folder.deleted\",\n            \"entity.folder.renamed\",\n            \"entity.folder.attrib_changed\",\n            \"entity.folder.label_changed\",\n            \"entity.folder.status_changed\",\n            \"entity.folder.tags_changed\",\n            \"entity.version.created\",\n            \"entity.version.status_changed\",\n            \"reviewable.created\",\n            \"flow.version.mediapath\"\n        ]\n\n        last_comments_sync = datetime.min.replace(tzinfo=timezone.utc)\n        while True:\n            try:\n                # Run comments sync\n                now_time = arrow.utcnow()\n                sec_diff = (now_time - last_comments_sync).total_seconds()\n                if sec_diff &gt; COMMENTS_SYNC_INTERVAL:\n                    self._sync_comments()\n\n                # enrolling only events which were not created by any\n                # of service users so loopback is avoided\n                event = ayon_api.enroll_event_job(\n                    events_we_care,\n                    \"shotgrid.push\",\n                    socket.gethostname(),\n                    ignore_sender_types=[\"shotgrid\"],\n                    description=(\n                        \"Handle AYON entity changes and \"\n                        \"sync them to Shotgrid.\"\n                    ),\n                    max_retries=2\n                )\n\n                if not event:\n                    time.sleep(self.sg_polling_frequency)\n                    continue\n\n                source_event = ayon_api.get_event(event[\"dependsOn\"])\n\n                project_name = source_event[\"project\"]\n\n                if project_name not in self._get_sync_project_names():\n                    # This should never happen since we only fetch events of\n                    # projects we have shotgridPush enabled; but just in case\n                    # The event happens when after we deleted a project in\n                    # AYON.\n                    self.log.info(\n                        f\"Project {project_name} does not exist in AYON \"\n                        \"or does not have the `shotgridPush` attribute set, \"\n                        f\"ignoring event {event}.\"\n                    )\n                    ayon_api.update_event(\n                        event[\"id\"],\n                        project_name=project_name,\n                        status=\"finished\"\n                    )\n                    continue\n\n                hub = self._get_hub(project_name)\n                hub.react_to_ayon_event(source_event)\n\n                self.log.info(\"Event has been processed... setting to finished!\")\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"finished\"\n                )\n            except Exception:\n                self.log.error(\n                    \"Error processing event\", exc_info=True)\n\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"failed\",\n                    payload={\n                        \"message\": traceback.format_exc(),\n                    },\n                )\n\n    def _get_sync_project_names(self):\n        \"\"\"Get project names that are enabled for SG sync.\"\"\"\n        ayon_projects = ayon_api.get_projects(fields=[\"name\", \"attrib\"])\n\n        project_names = []\n        for project in ayon_projects:\n            if project[\"attrib\"].get(\"shotgridPush\"):\n                project_names.append(project[\"name\"])\n\n        return project_names\n\n    def _get_hub(self, project_name):\n        hub = self._cached_hubs.get(project_name)\n\n        if not hub:\n            ay_project = ayon_api.get_project(project_name)\n            project_code = ay_project[\"code\"]\n            hub = AyonShotgridHub(\n                self.get_sg_connection(),\n                project_name,\n                project_code,\n                sg_project_code_field=self.sg_project_code_field,\n                custom_attribs_map=self.custom_attribs_map,\n                custom_attribs_types=self.custom_attribs_types,\n                sg_enabled_entities=self.sg_enabled_entities,\n            )\n\n            # Do not cache the hub object\n            # if the SG project does not exist (yet?).\n            # This is to force refresh on next event.\n            if hub.sg_project is not None:\n                self._cached_hubs[project_name] = hub\n\n        return hub\n\n    def _sync_comments(self):\n        \"\"\"Checks if no other syncing is runnin or when last successful ran.\"\"\"\n        any_in_progress = self._cleanup_in_progress_comment_events()\n        if any_in_progress:\n            return\n\n        now = arrow.utcnow()\n        activities_after_date = None\n\n        last_finished_event = self._get_last_finished_event()\n        if last_finished_event is not None:\n            created_at = arrow.get(\n                last_finished_event[\"createdAt\"]\n            ).to(\"local\")\n            delta = now - created_at\n            if delta.seconds &lt; COMMENTS_SYNC_INTERVAL:\n                return\n            activities_after_date = created_at\n\n        if activities_after_date is None:\n            activities_after_date = now - timedelta(days=5)\n\n        response = ayon_api.dispatch_event(\n            SHOTGRID_COMMENTS_TOPIC,\n            description=(\n                \"Synchronizing comments from AYON to SG.\"\n            ),\n            summary=None,\n            payload={},\n            finished=True,\n            store=True,\n        )\n        if isinstance(response, str):\n            event_id = response\n        else:\n            event_id = response[\"id\"]\n\n        try:\n            synced_comments = 0\n            project_names = self._get_sync_project_names()\n            for project_name in project_names:\n                hub = self._get_hub(project_name)\n                synced_comments += hub.sync_comments(activities_after_date)\n            success = True\n        except Exception:\n            success = False\n            self.log.warning(\"Failed to sync comments.\", exc_info=True)\n\n        finally:\n            ayon_api.update_event(\n                event_id,\n                description=\"Synchronized comments from AYON to SG.\",\n                status=\"finished\" if success else \"failed\",\n                payload={\"synced_comments\": synced_comments},\n            )\n\n    def _cleanup_in_progress_comment_events(self) -&gt; bool:\n        \"\"\"Clean stuck or hard failed synchronizations\"\"\"\n        in_progress_events = list(ayon_api.get_events(\n            topics={SHOTGRID_COMMENTS_TOPIC},\n            statuses={\"in_progress\"},\n            fields={\"id\", \"createdAt\"}\n        ))\n\n        any_in_progress = False\n        now = arrow.utcnow()\n        for event in in_progress_events:\n            created_at = arrow.get(event[\"createdAt\"]).to(\"local\")\n            delta = now - created_at\n            if delta.seconds &lt; COMMENTS_SYNC_TIMEOUT:\n                any_in_progress = True\n            else:\n                ayon_api.update_event(\n                    event[\"id\"],\n                    status=\"failed\",\n                )\n        return any_in_progress\n\n    def _get_last_finished_event(self):\n        \"\"\"Finds last successful run of comments synching to SG.\"\"\"\n        finished_events = list(ayon_api.get_events(\n            topics={SHOTGRID_COMMENTS_TOPIC},\n            statuses={\"finished\"},\n            limit=1,\n            order=ayon_api.SortOrder.descending,\n        ))\n        for event in finished_events:\n            return event\n        return None\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/transmitter.html#services.transmitter.transmitter.transmitter.ShotgridTransmitter.__init__","title":"<code>__init__()</code>","text":"<p>Ensure both AYON and Shotgrid connections are available.</p> <p>Set up common needed attributes and handle shotgrid connection closure via signal handlers.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>(Callable, None)</code> <p>In case we want to override the default function we cast to the processed events.</p> required Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def __init__(self):\n    \"\"\" Ensure both AYON and Shotgrid connections are available.\n\n    Set up common needed attributes and handle shotgrid connection\n    closure via signal handlers.\n\n    Args:\n        func (Callable, None): In case we want to override the default\n            function we cast to the processed events.\n    \"\"\"\n    self.log.info(\"Initializing the Shotgrid Transmitter.\")\n\n    self._cached_hubs = {}\n    try:\n        ayon_api.init_service()\n        self.settings = ayon_api.get_service_addon_settings()\n        service_settings = self.settings[\"service_settings\"]\n\n        self.sg_url = self.settings[\"shotgrid_server\"]\n        self.sg_project_code_field = self.settings[\n            \"shotgrid_project_code_field\"]\n\n        # get server op related ShotGrid script api properties\n        shotgrid_secret = ayon_api.get_secret(\n            service_settings[\"script_key\"])\n\n        if isinstance(shotgrid_secret, list):\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings. \"\n                \"`ayon+settings://shotgrid/service_settings/script_key`\"\n            )\n\n        self.sg_api_key = shotgrid_secret.get(\"value\")\n        if not self.sg_api_key:\n            raise ValueError(\n                \"Shotgrid API Key not found. Make sure to set it in the \"\n                \"Addon System settings.\"\n            )\n\n        self.sg_script_name = service_settings[\"script_name\"]\n        if not self.sg_script_name:\n            raise ValueError(\n                \"Shotgrid Script Name not found. Make sure to set it in \"\n                \"the Addon System settings.\"\n            )\n\n        # SSL validation\n        if self.settings.get(\"shotgrid_no_ssl_validation\", False):\n            shotgun_api3.NO_SSL_VALIDATION = True\n            self.log.info(\"SSL validation is disabled.\")\n\n        # Compatibility settings\n        custom_attribs_map = self.settings[\"compatibility_settings\"][\n            \"custom_attribs_map\"]\n        self.custom_attribs_map = {\n            attr[\"ayon\"]: attr[\"sg\"]\n            for attr in custom_attribs_map\n            if attr[\"sg\"]\n        }\n        self.custom_attribs_map.update({\n            \"status\": \"status_list\",\n            \"tags\": \"tags\",\n            \"assignees\": \"task_assignees\"\n        })\n\n        self.custom_attribs_types = {\n            attr[\"sg\"]: (attr[\"type\"], attr[\"scope\"])\n            for attr in custom_attribs_map\n            if attr[\"sg\"]\n        }\n        self.sg_enabled_entities = (\n            self.settings[\"compatibility_settings\"]\n                         [\"shotgrid_enabled_entities\"])\n        try:\n            self.sg_polling_frequency = int(\n                service_settings[\"polling_frequency\"]\n            )\n        except Exception:\n            self.sg_polling_frequency = 10\n\n    except Exception as e:\n        self.log.error(\"Unable to get Addon settings from the server.\")\n        raise e\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/transmitter.html#services.transmitter.transmitter.transmitter.ShotgridTransmitter.get_sg_connection","title":"<code>get_sg_connection()</code>","text":"<p>Ensure we can talk to AYON and Shotgrid.</p> <p>Start connections to the APIs and catch any possible error, we abort if this steps fails for any reason.</p> Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def get_sg_connection(self):\n    \"\"\"Ensure we can talk to AYON and Shotgrid.\n\n    Start connections to the APIs and catch any possible error, we abort if\n    this steps fails for any reason.\n    \"\"\"\n\n    if self._sg is None:\n        try:\n            self._sg = shotgun_api3.Shotgun(\n                self.sg_url,\n                script_name=self.sg_script_name,\n                api_key=self.sg_api_key,\n            )\n        except Exception as e:\n            self.log.error(\"Unable to create Shotgrid Session.\")\n            raise e\n\n    try:\n        self._sg.connect()\n\n    except Exception as e:\n        self.log.error(\"Unable to connect to Shotgrid.\")\n        raise e\n\n    return self._sg\n</code></pre>"},{"location":"autoapi/services/transmitter/transmitter/transmitter.html#services.transmitter.transmitter.transmitter.ShotgridTransmitter.start_processing","title":"<code>start_processing()</code>","text":"<p>Main loop querying AYON for <code>entity.*</code> events.</p> <p>We enroll to events that <code>created</code>, <code>deleted</code> and <code>renamed</code> on AYON <code>entity</code> to replicate the event in Shotgrid.</p> Source code in <code>services/transmitter/transmitter/transmitter.py</code> <pre><code>def start_processing(self):\n    \"\"\" Main loop querying AYON for `entity.*` events.\n\n    We enroll to events that `created`, `deleted` and `renamed`\n    on AYON `entity` to replicate the event in Shotgrid.\n    \"\"\"\n    events_we_care = [\n        \"entity.task.created\",\n        \"entity.task.deleted\",\n        \"entity.task.renamed\",\n        \"entity.task.create\",\n        \"entity.task.assignees_changed\",\n        \"entity.task.attrib_changed\",\n        \"entity.task.label_changed\",\n        \"entity.task.status_changed\",\n        \"entity.task.tags_changed\",\n        \"entity.folder.created\",\n        \"entity.folder.deleted\",\n        \"entity.folder.renamed\",\n        \"entity.folder.attrib_changed\",\n        \"entity.folder.label_changed\",\n        \"entity.folder.status_changed\",\n        \"entity.folder.tags_changed\",\n        \"entity.version.created\",\n        \"entity.version.status_changed\",\n        \"reviewable.created\",\n        \"flow.version.mediapath\"\n    ]\n\n    last_comments_sync = datetime.min.replace(tzinfo=timezone.utc)\n    while True:\n        try:\n            # Run comments sync\n            now_time = arrow.utcnow()\n            sec_diff = (now_time - last_comments_sync).total_seconds()\n            if sec_diff &gt; COMMENTS_SYNC_INTERVAL:\n                self._sync_comments()\n\n            # enrolling only events which were not created by any\n            # of service users so loopback is avoided\n            event = ayon_api.enroll_event_job(\n                events_we_care,\n                \"shotgrid.push\",\n                socket.gethostname(),\n                ignore_sender_types=[\"shotgrid\"],\n                description=(\n                    \"Handle AYON entity changes and \"\n                    \"sync them to Shotgrid.\"\n                ),\n                max_retries=2\n            )\n\n            if not event:\n                time.sleep(self.sg_polling_frequency)\n                continue\n\n            source_event = ayon_api.get_event(event[\"dependsOn\"])\n\n            project_name = source_event[\"project\"]\n\n            if project_name not in self._get_sync_project_names():\n                # This should never happen since we only fetch events of\n                # projects we have shotgridPush enabled; but just in case\n                # The event happens when after we deleted a project in\n                # AYON.\n                self.log.info(\n                    f\"Project {project_name} does not exist in AYON \"\n                    \"or does not have the `shotgridPush` attribute set, \"\n                    f\"ignoring event {event}.\"\n                )\n                ayon_api.update_event(\n                    event[\"id\"],\n                    project_name=project_name,\n                    status=\"finished\"\n                )\n                continue\n\n            hub = self._get_hub(project_name)\n            hub.react_to_ayon_event(source_event)\n\n            self.log.info(\"Event has been processed... setting to finished!\")\n            ayon_api.update_event(\n                event[\"id\"],\n                project_name=project_name,\n                status=\"finished\"\n            )\n        except Exception:\n            self.log.error(\n                \"Error processing event\", exc_info=True)\n\n            ayon_api.update_event(\n                event[\"id\"],\n                project_name=project_name,\n                status=\"failed\",\n                payload={\n                    \"message\": traceback.format_exc(),\n                },\n            )\n</code></pre>"}]}